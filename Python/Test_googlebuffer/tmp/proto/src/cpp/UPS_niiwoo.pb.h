// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UPS_niiwoo.proto

#ifndef PROTOBUF_UPS_5fniiwoo_2eproto__INCLUDED
#define PROTOBUF_UPS_5fniiwoo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace UPS_niiwoo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

class label_type;
class label;
class label_type_list_ask;
class label_type_list_ans;
class label_type_detail_ask;
class label_type_detail_ans;
class label_type_save_ask;
class label_type_save_ans;
class label_type_remove_ask;
class label_type_remove_ans;
class label_type_tree_ask;
class label_type_tree_ans;
class label_list_ask;
class label_list_ans;
class label_detail_ask;
class label_detail_ans;
class label_save_ask;
class label_save_ans;
class label_remove_ask;
class label_remove_ans;
class user_labels_ask;
class user_labels_ans;
class label_users_ask;
class user_basic_info;
class label_users_ans;
class user_avatar_ask;
class user_avatar_ans;
class income_source;
class user_house_info;
class user_car_info;
class user_basic_info_ask;
class user_basic_info_ans;
class user_common_ask;
class user_common_ans;
class user_labels_by_type_ask;
class label_set;
class user_labels_by_type_ans;

// ===================================================================

class label_type : public ::google::protobuf::Message {
 public:
  label_type();
  virtual ~label_type();

  label_type(const label_type& from);

  inline label_type& operator=(const label_type& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type& default_instance();

  void Swap(label_type* other);

  // implements Message ----------------------------------------------

  label_type* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type& from);
  void MergeFrom(const label_type& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type_id = 1;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes type_name = 2;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 2;
  inline const ::std::string& type_name() const;
  inline void set_type_name(const ::std::string& value);
  inline void set_type_name(const char* value);
  inline void set_type_name(const void* value, size_t size);
  inline ::std::string* mutable_type_name();
  inline ::std::string* release_type_name();
  inline void set_allocated_type_name(::std::string* type_name);

  // optional int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);

  // optional int32 type_prefix = 4;
  inline bool has_type_prefix() const;
  inline void clear_type_prefix();
  static const int kTypePrefixFieldNumber = 4;
  inline ::google::protobuf::int32 type_prefix() const;
  inline void set_type_prefix(::google::protobuf::int32 value);

  // optional bytes type_note = 5;
  inline bool has_type_note() const;
  inline void clear_type_note();
  static const int kTypeNoteFieldNumber = 5;
  inline const ::std::string& type_note() const;
  inline void set_type_note(const ::std::string& value);
  inline void set_type_note(const char* value);
  inline void set_type_note(const void* value, size_t size);
  inline ::std::string* mutable_type_note();
  inline ::std::string* release_type_note();
  inline void set_allocated_type_note(::std::string* type_note);

  // optional bytes add_time = 6;
  inline bool has_add_time() const;
  inline void clear_add_time();
  static const int kAddTimeFieldNumber = 6;
  inline const ::std::string& add_time() const;
  inline void set_add_time(const ::std::string& value);
  inline void set_add_time(const char* value);
  inline void set_add_time(const void* value, size_t size);
  inline ::std::string* mutable_add_time();
  inline ::std::string* release_add_time();
  inline void set_allocated_add_time(::std::string* add_time);

  // optional bytes update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type)
 private:
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_type_name();
  inline void clear_has_type_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_type_prefix();
  inline void clear_has_type_prefix();
  inline void set_has_type_note();
  inline void clear_has_type_note();
  inline void set_has_add_time();
  inline void clear_has_add_time();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_name_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* type_note_;
  ::std::string* add_time_;
  ::std::string* update_time_;
  ::google::protobuf::int32 type_prefix_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type* default_instance_;
};
// -------------------------------------------------------------------

class label : public ::google::protobuf::Message {
 public:
  label();
  virtual ~label();

  label(const label& from);

  inline label& operator=(const label& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label& default_instance();

  void Swap(label* other);

  // implements Message ----------------------------------------------

  label* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label& from);
  void MergeFrom(const label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 label_id = 1;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 1;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes label_name = 3;
  inline bool has_label_name() const;
  inline void clear_label_name();
  static const int kLabelNameFieldNumber = 3;
  inline const ::std::string& label_name() const;
  inline void set_label_name(const ::std::string& value);
  inline void set_label_name(const char* value);
  inline void set_label_name(const void* value, size_t size);
  inline ::std::string* mutable_label_name();
  inline ::std::string* release_label_name();
  inline void set_allocated_label_name(::std::string* label_name);

  // optional int32 parent_id = 4;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 4;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);

  // optional bytes label_note = 5;
  inline bool has_label_note() const;
  inline void clear_label_note();
  static const int kLabelNoteFieldNumber = 5;
  inline const ::std::string& label_note() const;
  inline void set_label_note(const ::std::string& value);
  inline void set_label_note(const char* value);
  inline void set_label_note(const void* value, size_t size);
  inline ::std::string* mutable_label_note();
  inline ::std::string* release_label_note();
  inline void set_allocated_label_note(::std::string* label_note);

  // optional bytes add_time = 6;
  inline bool has_add_time() const;
  inline void clear_add_time();
  static const int kAddTimeFieldNumber = 6;
  inline const ::std::string& add_time() const;
  inline void set_add_time(const ::std::string& value);
  inline void set_add_time(const char* value);
  inline void set_add_time(const void* value, size_t size);
  inline ::std::string* mutable_add_time();
  inline ::std::string* release_add_time();
  inline void set_allocated_add_time(::std::string* add_time);

  // optional bytes update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const void* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label)
 private:
  inline void set_has_label_id();
  inline void clear_has_label_id();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_label_name();
  inline void clear_has_label_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_label_note();
  inline void clear_has_label_note();
  inline void set_has_add_time();
  inline void clear_has_add_time();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 label_id_;
  ::google::protobuf::int32 type_id_;
  ::std::string* label_name_;
  ::std::string* label_note_;
  ::std::string* add_time_;
  ::std::string* update_time_;
  ::google::protobuf::int32 parent_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label* default_instance_;
};
// -------------------------------------------------------------------

class label_type_list_ask : public ::google::protobuf::Message {
 public:
  label_type_list_ask();
  virtual ~label_type_list_ask();

  label_type_list_ask(const label_type_list_ask& from);

  inline label_type_list_ask& operator=(const label_type_list_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_list_ask& default_instance();

  void Swap(label_type_list_ask* other);

  // implements Message ----------------------------------------------

  label_type_list_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_list_ask& from);
  void MergeFrom(const label_type_list_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes type_name = 3;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 3;
  inline const ::std::string& type_name() const;
  inline void set_type_name(const ::std::string& value);
  inline void set_type_name(const char* value);
  inline void set_type_name(const void* value, size_t size);
  inline ::std::string* mutable_type_name();
  inline ::std::string* release_type_name();
  inline void set_allocated_type_name(::std::string* type_name);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_list_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_type_name();
  inline void clear_has_type_name();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* type_name_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_list_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_type_list_ans : public ::google::protobuf::Message {
 public:
  label_type_list_ans();
  virtual ~label_type_list_ans();

  label_type_list_ans(const label_type_list_ans& from);

  inline label_type_list_ans& operator=(const label_type_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_list_ans& default_instance();

  void Swap(label_type_list_ans* other);

  // implements Message ----------------------------------------------

  label_type_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_list_ans& from);
  void MergeFrom(const label_type_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_niiwoo.label_type list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UPS_niiwoo::label_type& list(int index) const;
  inline ::UPS_niiwoo::label_type* mutable_list(int index);
  inline ::UPS_niiwoo::label_type* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_list_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_type_detail_ask : public ::google::protobuf::Message {
 public:
  label_type_detail_ask();
  virtual ~label_type_detail_ask();

  label_type_detail_ask(const label_type_detail_ask& from);

  inline label_type_detail_ask& operator=(const label_type_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_detail_ask& default_instance();

  void Swap(label_type_detail_ask* other);

  // implements Message ----------------------------------------------

  label_type_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_detail_ask& from);
  void MergeFrom(const label_type_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_detail_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 type_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_type_detail_ans : public ::google::protobuf::Message {
 public:
  label_type_detail_ans();
  virtual ~label_type_detail_ans();

  label_type_detail_ans(const label_type_detail_ans& from);

  inline label_type_detail_ans& operator=(const label_type_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_detail_ans& default_instance();

  void Swap(label_type_detail_ans* other);

  // implements Message ----------------------------------------------

  label_type_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_detail_ans& from);
  void MergeFrom(const label_type_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UPS_niiwoo.label_type info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UPS_niiwoo::label_type& info() const;
  inline ::UPS_niiwoo::label_type* mutable_info();
  inline ::UPS_niiwoo::label_type* release_info();
  inline void set_allocated_info(::UPS_niiwoo::label_type* info);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_detail_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::UPS_niiwoo::label_type* info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_type_save_ask : public ::google::protobuf::Message {
 public:
  label_type_save_ask();
  virtual ~label_type_save_ask();

  label_type_save_ask(const label_type_save_ask& from);

  inline label_type_save_ask& operator=(const label_type_save_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_save_ask& default_instance();

  void Swap(label_type_save_ask* other);

  // implements Message ----------------------------------------------

  label_type_save_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_save_ask& from);
  void MergeFrom(const label_type_save_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .UPS_niiwoo.label_type info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::UPS_niiwoo::label_type& info() const;
  inline ::UPS_niiwoo::label_type* mutable_info();
  inline ::UPS_niiwoo::label_type* release_info();
  inline void set_allocated_info(::UPS_niiwoo::label_type* info);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_save_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::UPS_niiwoo::label_type* info_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_save_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_type_save_ans : public ::google::protobuf::Message {
 public:
  label_type_save_ans();
  virtual ~label_type_save_ans();

  label_type_save_ans(const label_type_save_ans& from);

  inline label_type_save_ans& operator=(const label_type_save_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_save_ans& default_instance();

  void Swap(label_type_save_ans* other);

  // implements Message ----------------------------------------------

  label_type_save_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_save_ans& from);
  void MergeFrom(const label_type_save_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_save_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_save_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_type_remove_ask : public ::google::protobuf::Message {
 public:
  label_type_remove_ask();
  virtual ~label_type_remove_ask();

  label_type_remove_ask(const label_type_remove_ask& from);

  inline label_type_remove_ask& operator=(const label_type_remove_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_remove_ask& default_instance();

  void Swap(label_type_remove_ask* other);

  // implements Message ----------------------------------------------

  label_type_remove_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_remove_ask& from);
  void MergeFrom(const label_type_remove_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_remove_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 type_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_remove_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_type_remove_ans : public ::google::protobuf::Message {
 public:
  label_type_remove_ans();
  virtual ~label_type_remove_ans();

  label_type_remove_ans(const label_type_remove_ans& from);

  inline label_type_remove_ans& operator=(const label_type_remove_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_remove_ans& default_instance();

  void Swap(label_type_remove_ans* other);

  // implements Message ----------------------------------------------

  label_type_remove_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_remove_ans& from);
  void MergeFrom(const label_type_remove_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_remove_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_remove_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_type_tree_ask : public ::google::protobuf::Message {
 public:
  label_type_tree_ask();
  virtual ~label_type_tree_ask();

  label_type_tree_ask(const label_type_tree_ask& from);

  inline label_type_tree_ask& operator=(const label_type_tree_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_tree_ask& default_instance();

  void Swap(label_type_tree_ask* other);

  // implements Message ----------------------------------------------

  label_type_tree_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_tree_ask& from);
  void MergeFrom(const label_type_tree_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_tree_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_type_id();
  inline void clear_has_type_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 type_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_tree_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_type_tree_ans : public ::google::protobuf::Message {
 public:
  label_type_tree_ans();
  virtual ~label_type_tree_ans();

  label_type_tree_ans(const label_type_tree_ans& from);

  inline label_type_tree_ans& operator=(const label_type_tree_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_type_tree_ans& default_instance();

  void Swap(label_type_tree_ans* other);

  // implements Message ----------------------------------------------

  label_type_tree_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_type_tree_ans& from);
  void MergeFrom(const label_type_tree_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_niiwoo.label_type list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UPS_niiwoo::label_type& list(int index) const;
  inline ::UPS_niiwoo::label_type* mutable_list(int index);
  inline ::UPS_niiwoo::label_type* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >*
      mutable_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_type_tree_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type > list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_type_tree_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_list_ask : public ::google::protobuf::Message {
 public:
  label_list_ask();
  virtual ~label_list_ask();

  label_list_ask(const label_list_ask& from);

  inline label_list_ask& operator=(const label_list_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_list_ask& default_instance();

  void Swap(label_list_ask* other);

  // implements Message ----------------------------------------------

  label_list_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_list_ask& from);
  void MergeFrom(const label_list_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 type_id = 2;
  inline bool has_type_id() const;
  inline void clear_type_id();
  static const int kTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 type_id() const;
  inline void set_type_id(::google::protobuf::int32 value);

  // optional bytes label_name = 3;
  inline bool has_label_name() const;
  inline void clear_label_name();
  static const int kLabelNameFieldNumber = 3;
  inline const ::std::string& label_name() const;
  inline void set_label_name(const ::std::string& value);
  inline void set_label_name(const char* value);
  inline void set_label_name(const void* value, size_t size);
  inline ::std::string* mutable_label_name();
  inline ::std::string* release_label_name();
  inline void set_allocated_label_name(::std::string* label_name);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_list_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_type_id();
  inline void clear_has_type_id();
  inline void set_has_label_name();
  inline void clear_has_label_name();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* label_name_;
  ::google::protobuf::int32 type_id_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_list_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_list_ans : public ::google::protobuf::Message {
 public:
  label_list_ans();
  virtual ~label_list_ans();

  label_list_ans(const label_list_ans& from);

  inline label_list_ans& operator=(const label_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_list_ans& default_instance();

  void Swap(label_list_ans* other);

  // implements Message ----------------------------------------------

  label_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_list_ans& from);
  void MergeFrom(const label_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_niiwoo.label list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::UPS_niiwoo::label& list(int index) const;
  inline ::UPS_niiwoo::label* mutable_list(int index);
  inline ::UPS_niiwoo::label* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label >*
      mutable_list();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_list_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label > list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_detail_ask : public ::google::protobuf::Message {
 public:
  label_detail_ask();
  virtual ~label_detail_ask();

  label_detail_ask(const label_detail_ask& from);

  inline label_detail_ask& operator=(const label_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_detail_ask& default_instance();

  void Swap(label_detail_ask* other);

  // implements Message ----------------------------------------------

  label_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_detail_ask& from);
  void MergeFrom(const label_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 label_id = 2;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 2;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_detail_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_label_id();
  inline void clear_has_label_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 label_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_detail_ans : public ::google::protobuf::Message {
 public:
  label_detail_ans();
  virtual ~label_detail_ans();

  label_detail_ans(const label_detail_ans& from);

  inline label_detail_ans& operator=(const label_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_detail_ans& default_instance();

  void Swap(label_detail_ans* other);

  // implements Message ----------------------------------------------

  label_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_detail_ans& from);
  void MergeFrom(const label_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UPS_niiwoo.label info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UPS_niiwoo::label& info() const;
  inline ::UPS_niiwoo::label* mutable_info();
  inline ::UPS_niiwoo::label* release_info();
  inline void set_allocated_info(::UPS_niiwoo::label* info);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_detail_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::UPS_niiwoo::label* info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_save_ask : public ::google::protobuf::Message {
 public:
  label_save_ask();
  virtual ~label_save_ask();

  label_save_ask(const label_save_ask& from);

  inline label_save_ask& operator=(const label_save_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_save_ask& default_instance();

  void Swap(label_save_ask* other);

  // implements Message ----------------------------------------------

  label_save_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_save_ask& from);
  void MergeFrom(const label_save_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .UPS_niiwoo.label info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::UPS_niiwoo::label& info() const;
  inline ::UPS_niiwoo::label* mutable_info();
  inline ::UPS_niiwoo::label* release_info();
  inline void set_allocated_info(::UPS_niiwoo::label* info);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_save_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::UPS_niiwoo::label* info_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_save_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_save_ans : public ::google::protobuf::Message {
 public:
  label_save_ans();
  virtual ~label_save_ans();

  label_save_ans(const label_save_ans& from);

  inline label_save_ans& operator=(const label_save_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_save_ans& default_instance();

  void Swap(label_save_ans* other);

  // implements Message ----------------------------------------------

  label_save_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_save_ans& from);
  void MergeFrom(const label_save_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_save_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_save_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_remove_ask : public ::google::protobuf::Message {
 public:
  label_remove_ask();
  virtual ~label_remove_ask();

  label_remove_ask(const label_remove_ask& from);

  inline label_remove_ask& operator=(const label_remove_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_remove_ask& default_instance();

  void Swap(label_remove_ask* other);

  // implements Message ----------------------------------------------

  label_remove_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_remove_ask& from);
  void MergeFrom(const label_remove_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 label_id = 2;
  inline bool has_label_id() const;
  inline void clear_label_id();
  static const int kLabelIdFieldNumber = 2;
  inline ::google::protobuf::int32 label_id() const;
  inline void set_label_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_remove_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_label_id();
  inline void clear_has_label_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 label_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_remove_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_remove_ans : public ::google::protobuf::Message {
 public:
  label_remove_ans();
  virtual ~label_remove_ans();

  label_remove_ans(const label_remove_ans& from);

  inline label_remove_ans& operator=(const label_remove_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_remove_ans& default_instance();

  void Swap(label_remove_ans* other);

  // implements Message ----------------------------------------------

  label_remove_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_remove_ans& from);
  void MergeFrom(const label_remove_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_remove_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_remove_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_labels_ask : public ::google::protobuf::Message {
 public:
  user_labels_ask();
  virtual ~user_labels_ask();

  user_labels_ask(const user_labels_ask& from);

  inline user_labels_ask& operator=(const user_labels_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_labels_ask& default_instance();

  void Swap(user_labels_ask* other);

  // implements Message ----------------------------------------------

  user_labels_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_labels_ask& from);
  void MergeFrom(const user_labels_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes id_card = 2;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 2;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_labels_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* id_card_;
  ::std::string* mobile_phone_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_labels_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_labels_ans : public ::google::protobuf::Message {
 public:
  user_labels_ans();
  virtual ~user_labels_ans();

  user_labels_ans(const user_labels_ans& from);

  inline user_labels_ans& operator=(const user_labels_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_labels_ans& default_instance();

  void Swap(user_labels_ans* other);

  // implements Message ----------------------------------------------

  user_labels_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_labels_ans& from);
  void MergeFrom(const user_labels_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes labels = 1;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 1;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const void* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_labels_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_labels_ans* default_instance_;
};
// -------------------------------------------------------------------

class label_users_ask : public ::google::protobuf::Message {
 public:
  label_users_ask();
  virtual ~label_users_ask();

  label_users_ask(const label_users_ask& from);

  inline label_users_ask& operator=(const label_users_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_users_ask& default_instance();

  void Swap(label_users_ask* other);

  // implements Message ----------------------------------------------

  label_users_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_users_ask& from);
  void MergeFrom(const label_users_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // repeated int32 label_ids = 2;
  inline int label_ids_size() const;
  inline void clear_label_ids();
  static const int kLabelIdsFieldNumber = 2;
  inline ::google::protobuf::int32 label_ids(int index) const;
  inline void set_label_ids(int index, ::google::protobuf::int32 value);
  inline void add_label_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      label_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_label_ids();

  // optional int32 all_in = 3 [default = 2];
  inline bool has_all_in() const;
  inline void clear_all_in();
  static const int kAllInFieldNumber = 3;
  inline ::google::protobuf::int32 all_in() const;
  inline void set_all_in(::google::protobuf::int32 value);

  // optional int32 page_num = 4;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 4;
  inline ::google::protobuf::int32 page_num() const;
  inline void set_page_num(::google::protobuf::int32 value);

  // optional int32 cur_page = 5;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 5;
  inline ::google::protobuf::int32 cur_page() const;
  inline void set_cur_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_users_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_all_in();
  inline void clear_has_all_in();
  inline void set_has_page_num();
  inline void clear_has_page_num();
  inline void set_has_cur_page();
  inline void clear_has_cur_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > label_ids_;
  ::google::protobuf::int32 all_in_;
  ::google::protobuf::int32 page_num_;
  ::google::protobuf::int32 cur_page_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_users_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_basic_info : public ::google::protobuf::Message {
 public:
  user_basic_info();
  virtual ~user_basic_info();

  user_basic_info(const user_basic_info& from);

  inline user_basic_info& operator=(const user_basic_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info& default_instance();

  void Swap(user_basic_info* other);

  // implements Message ----------------------------------------------

  user_basic_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info& from);
  void MergeFrom(const user_basic_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const void* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional bytes mobile_phone = 2;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes id_card_no = 3;
  inline bool has_id_card_no() const;
  inline void clear_id_card_no();
  static const int kIdCardNoFieldNumber = 3;
  inline const ::std::string& id_card_no() const;
  inline void set_id_card_no(const ::std::string& value);
  inline void set_id_card_no(const char* value);
  inline void set_id_card_no(const void* value, size_t size);
  inline ::std::string* mutable_id_card_no();
  inline ::std::string* release_id_card_no();
  inline void set_allocated_id_card_no(::std::string* id_card_no);

  // optional bytes position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const void* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional bytes living_loc_info = 5;
  inline bool has_living_loc_info() const;
  inline void clear_living_loc_info();
  static const int kLivingLocInfoFieldNumber = 5;
  inline const ::std::string& living_loc_info() const;
  inline void set_living_loc_info(const ::std::string& value);
  inline void set_living_loc_info(const char* value);
  inline void set_living_loc_info(const void* value, size_t size);
  inline ::std::string* mutable_living_loc_info();
  inline ::std::string* release_living_loc_info();
  inline void set_allocated_living_loc_info(::std::string* living_loc_info);

  // optional bytes id_card_address = 6;
  inline bool has_id_card_address() const;
  inline void clear_id_card_address();
  static const int kIdCardAddressFieldNumber = 6;
  inline const ::std::string& id_card_address() const;
  inline void set_id_card_address(const ::std::string& value);
  inline void set_id_card_address(const char* value);
  inline void set_id_card_address(const void* value, size_t size);
  inline ::std::string* mutable_id_card_address();
  inline ::std::string* release_id_card_address();
  inline void set_allocated_id_card_address(::std::string* id_card_address);

  // optional bytes living_province = 7;
  inline bool has_living_province() const;
  inline void clear_living_province();
  static const int kLivingProvinceFieldNumber = 7;
  inline const ::std::string& living_province() const;
  inline void set_living_province(const ::std::string& value);
  inline void set_living_province(const char* value);
  inline void set_living_province(const void* value, size_t size);
  inline ::std::string* mutable_living_province();
  inline ::std::string* release_living_province();
  inline void set_allocated_living_province(::std::string* living_province);

  // optional bytes living_city = 8;
  inline bool has_living_city() const;
  inline void clear_living_city();
  static const int kLivingCityFieldNumber = 8;
  inline const ::std::string& living_city() const;
  inline void set_living_city(const ::std::string& value);
  inline void set_living_city(const char* value);
  inline void set_living_city(const void* value, size_t size);
  inline ::std::string* mutable_living_city();
  inline ::std::string* release_living_city();
  inline void set_allocated_living_city(::std::string* living_city);

  // optional bytes living_address = 9;
  inline bool has_living_address() const;
  inline void clear_living_address();
  static const int kLivingAddressFieldNumber = 9;
  inline const ::std::string& living_address() const;
  inline void set_living_address(const ::std::string& value);
  inline void set_living_address(const char* value);
  inline void set_living_address(const void* value, size_t size);
  inline ::std::string* mutable_living_address();
  inline ::std::string* release_living_address();
  inline void set_allocated_living_address(::std::string* living_address);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_basic_info)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_id_card_no();
  inline void clear_has_id_card_no();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_living_loc_info();
  inline void clear_has_living_loc_info();
  inline void set_has_id_card_address();
  inline void clear_has_id_card_address();
  inline void set_has_living_province();
  inline void clear_has_living_province();
  inline void set_has_living_city();
  inline void clear_has_living_city();
  inline void set_has_living_address();
  inline void clear_has_living_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* mobile_phone_;
  ::std::string* id_card_no_;
  ::std::string* position_;
  ::std::string* living_loc_info_;
  ::std::string* id_card_address_;
  ::std::string* living_province_;
  ::std::string* living_city_;
  ::std::string* living_address_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info* default_instance_;
};
// -------------------------------------------------------------------

class label_users_ans : public ::google::protobuf::Message {
 public:
  label_users_ans();
  virtual ~label_users_ans();

  label_users_ans(const label_users_ans& from);

  inline label_users_ans& operator=(const label_users_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_users_ans& default_instance();

  void Swap(label_users_ans* other);

  // implements Message ----------------------------------------------

  label_users_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_users_ans& from);
  void MergeFrom(const label_users_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_niiwoo.user_basic_info users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::UPS_niiwoo::user_basic_info& users(int index) const;
  inline ::UPS_niiwoo::user_basic_info* mutable_users(int index);
  inline ::UPS_niiwoo::user_basic_info* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_basic_info >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_basic_info >*
      mutable_users();

  // optional int32 total_number = 2;
  inline bool has_total_number() const;
  inline void clear_total_number();
  static const int kTotalNumberFieldNumber = 2;
  inline ::google::protobuf::int32 total_number() const;
  inline void set_total_number(::google::protobuf::int32 value);

  // optional .common.result_info result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_users_ans)
 private:
  inline void set_has_total_number();
  inline void clear_has_total_number();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_basic_info > users_;
  ::common::result_info* result_;
  ::google::protobuf::int32 total_number_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_users_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_avatar_ask : public ::google::protobuf::Message {
 public:
  user_avatar_ask();
  virtual ~user_avatar_ask();

  user_avatar_ask(const user_avatar_ask& from);

  inline user_avatar_ask& operator=(const user_avatar_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_avatar_ask& default_instance();

  void Swap(user_avatar_ask* other);

  // implements Message ----------------------------------------------

  user_avatar_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_avatar_ask& from);
  void MergeFrom(const user_avatar_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_avatar_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_avatar_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_avatar_ans : public ::google::protobuf::Message {
 public:
  user_avatar_ans();
  virtual ~user_avatar_ans();

  user_avatar_ans(const user_avatar_ans& from);

  inline user_avatar_ans& operator=(const user_avatar_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_avatar_ans& default_instance();

  void Swap(user_avatar_ans* other);

  // implements Message ----------------------------------------------

  user_avatar_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_avatar_ans& from);
  void MergeFrom(const user_avatar_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes avatars = 1;
  inline int avatars_size() const;
  inline void clear_avatars();
  static const int kAvatarsFieldNumber = 1;
  inline const ::std::string& avatars(int index) const;
  inline ::std::string* mutable_avatars(int index);
  inline void set_avatars(int index, const ::std::string& value);
  inline void set_avatars(int index, const char* value);
  inline void set_avatars(int index, const void* value, size_t size);
  inline ::std::string* add_avatars();
  inline void add_avatars(const ::std::string& value);
  inline void add_avatars(const char* value);
  inline void add_avatars(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& avatars() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_avatars();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_avatar_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> avatars_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_avatar_ans* default_instance_;
};
// -------------------------------------------------------------------

class income_source : public ::google::protobuf::Message {
 public:
  income_source();
  virtual ~income_source();

  income_source(const income_source& from);

  inline income_source& operator=(const income_source& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const income_source& default_instance();

  void Swap(income_source* other);

  // implements Message ----------------------------------------------

  income_source* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const income_source& from);
  void MergeFrom(const income_source& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sourceType = 1;
  inline bool has_sourcetype() const;
  inline void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 1;
  inline ::google::protobuf::int32 sourcetype() const;
  inline void set_sourcetype(::google::protobuf::int32 value);

  // optional int32 monthAvg = 2;
  inline bool has_monthavg() const;
  inline void clear_monthavg();
  static const int kMonthAvgFieldNumber = 2;
  inline ::google::protobuf::int32 monthavg() const;
  inline void set_monthavg(::google::protobuf::int32 value);

  // optional bytes LastUpdateTime = 3;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastUpdateTimeFieldNumber = 3;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  inline ::std::string* release_lastupdatetime();
  inline void set_allocated_lastupdatetime(::std::string* lastupdatetime);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.income_source)
 private:
  inline void set_has_sourcetype();
  inline void clear_has_sourcetype();
  inline void set_has_monthavg();
  inline void clear_has_monthavg();
  inline void set_has_lastupdatetime();
  inline void clear_has_lastupdatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sourcetype_;
  ::google::protobuf::int32 monthavg_;
  ::std::string* lastupdatetime_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static income_source* default_instance_;
};
// -------------------------------------------------------------------

class user_house_info : public ::google::protobuf::Message {
 public:
  user_house_info();
  virtual ~user_house_info();

  user_house_info(const user_house_info& from);

  inline user_house_info& operator=(const user_house_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_house_info& default_instance();

  void Swap(user_house_info* other);

  // implements Message ----------------------------------------------

  user_house_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_house_info& from);
  void MergeFrom(const user_house_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HouseType = 1;
  inline bool has_housetype() const;
  inline void clear_housetype();
  static const int kHouseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 housetype() const;
  inline void set_housetype(::google::protobuf::int32 value);

  // optional int32 Mortgage = 2;
  inline bool has_mortgage() const;
  inline void clear_mortgage();
  static const int kMortgageFieldNumber = 2;
  inline ::google::protobuf::int32 mortgage() const;
  inline void set_mortgage(::google::protobuf::int32 value);

  // optional double HouseAmount = 3;
  inline bool has_houseamount() const;
  inline void clear_houseamount();
  static const int kHouseAmountFieldNumber = 3;
  inline double houseamount() const;
  inline void set_houseamount(double value);

  // optional double HouseSize = 4;
  inline bool has_housesize() const;
  inline void clear_housesize();
  static const int kHouseSizeFieldNumber = 4;
  inline double housesize() const;
  inline void set_housesize(double value);

  // optional double MortgageAmount = 5;
  inline bool has_mortgageamount() const;
  inline void clear_mortgageamount();
  static const int kMortgageAmountFieldNumber = 5;
  inline double mortgageamount() const;
  inline void set_mortgageamount(double value);

  // optional int32 Mortgageterm = 6;
  inline bool has_mortgageterm() const;
  inline void clear_mortgageterm();
  static const int kMortgagetermFieldNumber = 6;
  inline ::google::protobuf::int32 mortgageterm() const;
  inline void set_mortgageterm(::google::protobuf::int32 value);

  // optional int32 HouseLoan = 7;
  inline bool has_houseloan() const;
  inline void clear_houseloan();
  static const int kHouseLoanFieldNumber = 7;
  inline ::google::protobuf::int32 houseloan() const;
  inline void set_houseloan(::google::protobuf::int32 value);

  // optional bytes HouseProvince = 8;
  inline bool has_houseprovince() const;
  inline void clear_houseprovince();
  static const int kHouseProvinceFieldNumber = 8;
  inline const ::std::string& houseprovince() const;
  inline void set_houseprovince(const ::std::string& value);
  inline void set_houseprovince(const char* value);
  inline void set_houseprovince(const void* value, size_t size);
  inline ::std::string* mutable_houseprovince();
  inline ::std::string* release_houseprovince();
  inline void set_allocated_houseprovince(::std::string* houseprovince);

  // optional bytes HouseCity = 9;
  inline bool has_housecity() const;
  inline void clear_housecity();
  static const int kHouseCityFieldNumber = 9;
  inline const ::std::string& housecity() const;
  inline void set_housecity(const ::std::string& value);
  inline void set_housecity(const char* value);
  inline void set_housecity(const void* value, size_t size);
  inline ::std::string* mutable_housecity();
  inline ::std::string* release_housecity();
  inline void set_allocated_housecity(::std::string* housecity);

  // optional bytes HouseArea = 10;
  inline bool has_housearea() const;
  inline void clear_housearea();
  static const int kHouseAreaFieldNumber = 10;
  inline const ::std::string& housearea() const;
  inline void set_housearea(const ::std::string& value);
  inline void set_housearea(const char* value);
  inline void set_housearea(const void* value, size_t size);
  inline ::std::string* mutable_housearea();
  inline ::std::string* release_housearea();
  inline void set_allocated_housearea(::std::string* housearea);

  // optional bytes HouseAddress = 11;
  inline bool has_houseaddress() const;
  inline void clear_houseaddress();
  static const int kHouseAddressFieldNumber = 11;
  inline const ::std::string& houseaddress() const;
  inline void set_houseaddress(const ::std::string& value);
  inline void set_houseaddress(const char* value);
  inline void set_houseaddress(const void* value, size_t size);
  inline ::std::string* mutable_houseaddress();
  inline ::std::string* release_houseaddress();
  inline void set_allocated_houseaddress(::std::string* houseaddress);

  // optional bytes LastUpdateTime = 12;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastUpdateTimeFieldNumber = 12;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  inline ::std::string* release_lastupdatetime();
  inline void set_allocated_lastupdatetime(::std::string* lastupdatetime);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_house_info)
 private:
  inline void set_has_housetype();
  inline void clear_has_housetype();
  inline void set_has_mortgage();
  inline void clear_has_mortgage();
  inline void set_has_houseamount();
  inline void clear_has_houseamount();
  inline void set_has_housesize();
  inline void clear_has_housesize();
  inline void set_has_mortgageamount();
  inline void clear_has_mortgageamount();
  inline void set_has_mortgageterm();
  inline void clear_has_mortgageterm();
  inline void set_has_houseloan();
  inline void clear_has_houseloan();
  inline void set_has_houseprovince();
  inline void clear_has_houseprovince();
  inline void set_has_housecity();
  inline void clear_has_housecity();
  inline void set_has_housearea();
  inline void clear_has_housearea();
  inline void set_has_houseaddress();
  inline void clear_has_houseaddress();
  inline void set_has_lastupdatetime();
  inline void clear_has_lastupdatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 housetype_;
  ::google::protobuf::int32 mortgage_;
  double houseamount_;
  double housesize_;
  double mortgageamount_;
  ::google::protobuf::int32 mortgageterm_;
  ::google::protobuf::int32 houseloan_;
  ::std::string* houseprovince_;
  ::std::string* housecity_;
  ::std::string* housearea_;
  ::std::string* houseaddress_;
  ::std::string* lastupdatetime_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_house_info* default_instance_;
};
// -------------------------------------------------------------------

class user_car_info : public ::google::protobuf::Message {
 public:
  user_car_info();
  virtual ~user_car_info();

  user_car_info(const user_car_info& from);

  inline user_car_info& operator=(const user_car_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_car_info& default_instance();

  void Swap(user_car_info* other);

  // implements Message ----------------------------------------------

  user_car_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_car_info& from);
  void MergeFrom(const user_car_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes CarPlate = 1;
  inline bool has_carplate() const;
  inline void clear_carplate();
  static const int kCarPlateFieldNumber = 1;
  inline const ::std::string& carplate() const;
  inline void set_carplate(const ::std::string& value);
  inline void set_carplate(const char* value);
  inline void set_carplate(const void* value, size_t size);
  inline ::std::string* mutable_carplate();
  inline ::std::string* release_carplate();
  inline void set_allocated_carplate(::std::string* carplate);

  // optional int32 Carloans = 2;
  inline bool has_carloans() const;
  inline void clear_carloans();
  static const int kCarloansFieldNumber = 2;
  inline ::google::protobuf::int32 carloans() const;
  inline void set_carloans(::google::protobuf::int32 value);

  // optional bytes CarBrand = 3;
  inline bool has_carbrand() const;
  inline void clear_carbrand();
  static const int kCarBrandFieldNumber = 3;
  inline const ::std::string& carbrand() const;
  inline void set_carbrand(const ::std::string& value);
  inline void set_carbrand(const char* value);
  inline void set_carbrand(const void* value, size_t size);
  inline ::std::string* mutable_carbrand();
  inline ::std::string* release_carbrand();
  inline void set_allocated_carbrand(::std::string* carbrand);

  // optional int32 CarAge = 4;
  inline bool has_carage() const;
  inline void clear_carage();
  static const int kCarAgeFieldNumber = 4;
  inline ::google::protobuf::int32 carage() const;
  inline void set_carage(::google::protobuf::int32 value);

  // optional double CarAmount = 5;
  inline bool has_caramount() const;
  inline void clear_caramount();
  static const int kCarAmountFieldNumber = 5;
  inline double caramount() const;
  inline void set_caramount(double value);

  // optional double CarloansAmount = 6;
  inline bool has_carloansamount() const;
  inline void clear_carloansamount();
  static const int kCarloansAmountFieldNumber = 6;
  inline double carloansamount() const;
  inline void set_carloansamount(double value);

  // optional int32 Carloansterm = 7;
  inline bool has_carloansterm() const;
  inline void clear_carloansterm();
  static const int kCarloanstermFieldNumber = 7;
  inline ::google::protobuf::int32 carloansterm() const;
  inline void set_carloansterm(::google::protobuf::int32 value);

  // optional bytes LastUpdateTime = 9;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastUpdateTimeFieldNumber = 9;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  inline ::std::string* release_lastupdatetime();
  inline void set_allocated_lastupdatetime(::std::string* lastupdatetime);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_car_info)
 private:
  inline void set_has_carplate();
  inline void clear_has_carplate();
  inline void set_has_carloans();
  inline void clear_has_carloans();
  inline void set_has_carbrand();
  inline void clear_has_carbrand();
  inline void set_has_carage();
  inline void clear_has_carage();
  inline void set_has_caramount();
  inline void clear_has_caramount();
  inline void set_has_carloansamount();
  inline void clear_has_carloansamount();
  inline void set_has_carloansterm();
  inline void clear_has_carloansterm();
  inline void set_has_lastupdatetime();
  inline void clear_has_lastupdatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* carplate_;
  ::std::string* carbrand_;
  ::google::protobuf::int32 carloans_;
  ::google::protobuf::int32 carage_;
  double caramount_;
  double carloansamount_;
  ::std::string* lastupdatetime_;
  ::google::protobuf::int32 carloansterm_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_car_info* default_instance_;
};
// -------------------------------------------------------------------

class user_basic_info_ask : public ::google::protobuf::Message {
 public:
  user_basic_info_ask();
  virtual ~user_basic_info_ask();

  user_basic_info_ask(const user_basic_info_ask& from);

  inline user_basic_info_ask& operator=(const user_basic_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info_ask& default_instance();

  void Swap(user_basic_info_ask* other);

  // implements Message ----------------------------------------------

  user_basic_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info_ask& from);
  void MergeFrom(const user_basic_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes id_card = 2;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 2;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_basic_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* id_card_;
  ::std::string* mobile_phone_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_basic_info_ans : public ::google::protobuf::Message {
 public:
  user_basic_info_ans();
  virtual ~user_basic_info_ans();

  user_basic_info_ans(const user_basic_info_ans& from);

  inline user_basic_info_ans& operator=(const user_basic_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_basic_info_ans& default_instance();

  void Swap(user_basic_info_ans* other);

  // implements Message ----------------------------------------------

  user_basic_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_basic_info_ans& from);
  void MergeFrom(const user_basic_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes UserId = 99;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 99;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const void* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional bytes usernickname = 1;
  inline bool has_usernickname() const;
  inline void clear_usernickname();
  static const int kUsernicknameFieldNumber = 1;
  inline const ::std::string& usernickname() const;
  inline void set_usernickname(const ::std::string& value);
  inline void set_usernickname(const char* value);
  inline void set_usernickname(const void* value, size_t size);
  inline ::std::string* mutable_usernickname();
  inline ::std::string* release_usernickname();
  inline void set_allocated_usernickname(::std::string* usernickname);

  // optional bytes UserRealName = 2;
  inline bool has_userrealname() const;
  inline void clear_userrealname();
  static const int kUserRealNameFieldNumber = 2;
  inline const ::std::string& userrealname() const;
  inline void set_userrealname(const ::std::string& value);
  inline void set_userrealname(const char* value);
  inline void set_userrealname(const void* value, size_t size);
  inline ::std::string* mutable_userrealname();
  inline ::std::string* release_userrealname();
  inline void set_allocated_userrealname(::std::string* userrealname);

  // optional bytes Avatar = 60;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 60;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 UserStatus = 66;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserStatusFieldNumber = 66;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // optional double lateCharge = 61;
  inline bool has_latecharge() const;
  inline void clear_latecharge();
  static const int kLateChargeFieldNumber = 61;
  inline double latecharge() const;
  inline void set_latecharge(double value);

  // optional double advanceAmount = 62;
  inline bool has_advanceamount() const;
  inline void clear_advanceamount();
  static const int kAdvanceAmountFieldNumber = 62;
  inline double advanceamount() const;
  inline void set_advanceamount(double value);

  // optional int32 lateCnt = 63;
  inline bool has_latecnt() const;
  inline void clear_latecnt();
  static const int kLateCntFieldNumber = 63;
  inline ::google::protobuf::int32 latecnt() const;
  inline void set_latecnt(::google::protobuf::int32 value);

  // optional int32 advanceAmountCnt = 64;
  inline bool has_advanceamountcnt() const;
  inline void clear_advanceamountcnt();
  static const int kAdvanceAmountCntFieldNumber = 64;
  inline ::google::protobuf::int32 advanceamountcnt() const;
  inline void set_advanceamountcnt(::google::protobuf::int32 value);

  // optional bytes MobilePhone = 8;
  inline bool has_mobilephone() const;
  inline void clear_mobilephone();
  static const int kMobilePhoneFieldNumber = 8;
  inline const ::std::string& mobilephone() const;
  inline void set_mobilephone(const ::std::string& value);
  inline void set_mobilephone(const char* value);
  inline void set_mobilephone(const void* value, size_t size);
  inline ::std::string* mutable_mobilephone();
  inline ::std::string* release_mobilephone();
  inline void set_allocated_mobilephone(::std::string* mobilephone);

  // optional bytes UserIDCard = 9;
  inline bool has_useridcard() const;
  inline void clear_useridcard();
  static const int kUserIDCardFieldNumber = 9;
  inline const ::std::string& useridcard() const;
  inline void set_useridcard(const ::std::string& value);
  inline void set_useridcard(const char* value);
  inline void set_useridcard(const void* value, size_t size);
  inline ::std::string* mutable_useridcard();
  inline ::std::string* release_useridcard();
  inline void set_allocated_useridcard(::std::string* useridcard);

  // optional bytes phonePlace = 10;
  inline bool has_phoneplace() const;
  inline void clear_phoneplace();
  static const int kPhonePlaceFieldNumber = 10;
  inline const ::std::string& phoneplace() const;
  inline void set_phoneplace(const ::std::string& value);
  inline void set_phoneplace(const char* value);
  inline void set_phoneplace(const void* value, size_t size);
  inline ::std::string* mutable_phoneplace();
  inline ::std::string* release_phoneplace();
  inline void set_allocated_phoneplace(::std::string* phoneplace);

  // optional int32 AddressType = 11;
  inline bool has_addresstype() const;
  inline void clear_addresstype();
  static const int kAddressTypeFieldNumber = 11;
  inline ::google::protobuf::int32 addresstype() const;
  inline void set_addresstype(::google::protobuf::int32 value);

  // optional bytes Hometown = 12;
  inline bool has_hometown() const;
  inline void clear_hometown();
  static const int kHometownFieldNumber = 12;
  inline const ::std::string& hometown() const;
  inline void set_hometown(const ::std::string& value);
  inline void set_hometown(const char* value);
  inline void set_hometown(const void* value, size_t size);
  inline ::std::string* mutable_hometown();
  inline ::std::string* release_hometown();
  inline void set_allocated_hometown(::std::string* hometown);

  // optional int32 CardType = 13;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 13;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // optional int32 MaritalStatus = 15;
  inline bool has_maritalstatus() const;
  inline void clear_maritalstatus();
  static const int kMaritalStatusFieldNumber = 15;
  inline ::google::protobuf::int32 maritalstatus() const;
  inline void set_maritalstatus(::google::protobuf::int32 value);

  // optional bytes CardAddress = 16;
  inline bool has_cardaddress() const;
  inline void clear_cardaddress();
  static const int kCardAddressFieldNumber = 16;
  inline const ::std::string& cardaddress() const;
  inline void set_cardaddress(const ::std::string& value);
  inline void set_cardaddress(const char* value);
  inline void set_cardaddress(const void* value, size_t size);
  inline ::std::string* mutable_cardaddress();
  inline ::std::string* release_cardaddress();
  inline void set_allocated_cardaddress(::std::string* cardaddress);

  // optional int32 ChildrenStatus = 17;
  inline bool has_childrenstatus() const;
  inline void clear_childrenstatus();
  static const int kChildrenStatusFieldNumber = 17;
  inline ::google::protobuf::int32 childrenstatus() const;
  inline void set_childrenstatus(::google::protobuf::int32 value);

  // optional bytes LivingAddress = 18;
  inline bool has_livingaddress() const;
  inline void clear_livingaddress();
  static const int kLivingAddressFieldNumber = 18;
  inline const ::std::string& livingaddress() const;
  inline void set_livingaddress(const ::std::string& value);
  inline void set_livingaddress(const char* value);
  inline void set_livingaddress(const void* value, size_t size);
  inline ::std::string* mutable_livingaddress();
  inline ::std::string* release_livingaddress();
  inline void set_allocated_livingaddress(::std::string* livingaddress);

  // optional bytes EduSchool = 21;
  inline bool has_eduschool() const;
  inline void clear_eduschool();
  static const int kEduSchoolFieldNumber = 21;
  inline const ::std::string& eduschool() const;
  inline void set_eduschool(const ::std::string& value);
  inline void set_eduschool(const char* value);
  inline void set_eduschool(const void* value, size_t size);
  inline ::std::string* mutable_eduschool();
  inline ::std::string* release_eduschool();
  inline void set_allocated_eduschool(::std::string* eduschool);

  // optional bytes AttendingCollege = 22;
  inline bool has_attendingcollege() const;
  inline void clear_attendingcollege();
  static const int kAttendingCollegeFieldNumber = 22;
  inline const ::std::string& attendingcollege() const;
  inline void set_attendingcollege(const ::std::string& value);
  inline void set_attendingcollege(const char* value);
  inline void set_attendingcollege(const void* value, size_t size);
  inline ::std::string* mutable_attendingcollege();
  inline ::std::string* release_attendingcollege();
  inline void set_allocated_attendingcollege(::std::string* attendingcollege);

  // optional bytes AttendingGrade = 23;
  inline bool has_attendinggrade() const;
  inline void clear_attendinggrade();
  static const int kAttendingGradeFieldNumber = 23;
  inline const ::std::string& attendinggrade() const;
  inline void set_attendinggrade(const ::std::string& value);
  inline void set_attendinggrade(const char* value);
  inline void set_attendinggrade(const void* value, size_t size);
  inline ::std::string* mutable_attendinggrade();
  inline ::std::string* release_attendinggrade();
  inline void set_allocated_attendinggrade(::std::string* attendinggrade);

  // optional bytes SchoolAddress = 24;
  inline bool has_schooladdress() const;
  inline void clear_schooladdress();
  static const int kSchoolAddressFieldNumber = 24;
  inline const ::std::string& schooladdress() const;
  inline void set_schooladdress(const ::std::string& value);
  inline void set_schooladdress(const char* value);
  inline void set_schooladdress(const void* value, size_t size);
  inline ::std::string* mutable_schooladdress();
  inline ::std::string* release_schooladdress();
  inline void set_allocated_schooladdress(::std::string* schooladdress);

  // optional bytes StudentProfessional = 25;
  inline bool has_studentprofessional() const;
  inline void clear_studentprofessional();
  static const int kStudentProfessionalFieldNumber = 25;
  inline const ::std::string& studentprofessional() const;
  inline void set_studentprofessional(const ::std::string& value);
  inline void set_studentprofessional(const char* value);
  inline void set_studentprofessional(const void* value, size_t size);
  inline ::std::string* mutable_studentprofessional();
  inline ::std::string* release_studentprofessional();
  inline void set_allocated_studentprofessional(::std::string* studentprofessional);

  // optional bytes AttendingClass = 26;
  inline bool has_attendingclass() const;
  inline void clear_attendingclass();
  static const int kAttendingClassFieldNumber = 26;
  inline const ::std::string& attendingclass() const;
  inline void set_attendingclass(const ::std::string& value);
  inline void set_attendingclass(const char* value);
  inline void set_attendingclass(const void* value, size_t size);
  inline ::std::string* mutable_attendingclass();
  inline ::std::string* release_attendingclass();
  inline void set_allocated_attendingclass(::std::string* attendingclass);

  // optional int32 EducationApplyType = 27;
  inline bool has_educationapplytype() const;
  inline void clear_educationapplytype();
  static const int kEducationApplyTypeFieldNumber = 27;
  inline ::google::protobuf::int32 educationapplytype() const;
  inline void set_educationapplytype(::google::protobuf::int32 value);

  // optional int32 IsVerify = 28;
  inline bool has_isverify() const;
  inline void clear_isverify();
  static const int kIsVerifyFieldNumber = 28;
  inline ::google::protobuf::int32 isverify() const;
  inline void set_isverify(::google::protobuf::int32 value);

  // optional bytes Major = 29;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 29;
  inline const ::std::string& major() const;
  inline void set_major(const ::std::string& value);
  inline void set_major(const char* value);
  inline void set_major(const void* value, size_t size);
  inline ::std::string* mutable_major();
  inline ::std::string* release_major();
  inline void set_allocated_major(::std::string* major);

  // optional bytes EducationApplyTime = 30;
  inline bool has_educationapplytime() const;
  inline void clear_educationapplytime();
  static const int kEducationApplyTimeFieldNumber = 30;
  inline const ::std::string& educationapplytime() const;
  inline void set_educationapplytime(const ::std::string& value);
  inline void set_educationapplytime(const char* value);
  inline void set_educationapplytime(const void* value, size_t size);
  inline ::std::string* mutable_educationapplytime();
  inline ::std::string* release_educationapplytime();
  inline void set_allocated_educationapplytime(::std::string* educationapplytime);

  // optional bytes GraduateSchool = 31;
  inline bool has_graduateschool() const;
  inline void clear_graduateschool();
  static const int kGraduateSchoolFieldNumber = 31;
  inline const ::std::string& graduateschool() const;
  inline void set_graduateschool(const ::std::string& value);
  inline void set_graduateschool(const char* value);
  inline void set_graduateschool(const void* value, size_t size);
  inline ::std::string* mutable_graduateschool();
  inline ::std::string* release_graduateschool();
  inline void set_allocated_graduateschool(::std::string* graduateschool);

  // optional int32 DegreeType = 32;
  inline bool has_degreetype() const;
  inline void clear_degreetype();
  static const int kDegreeTypeFieldNumber = 32;
  inline ::google::protobuf::int32 degreetype() const;
  inline void set_degreetype(::google::protobuf::int32 value);

  // optional bytes EntranceDate = 33;
  inline bool has_entrancedate() const;
  inline void clear_entrancedate();
  static const int kEntranceDateFieldNumber = 33;
  inline const ::std::string& entrancedate() const;
  inline void set_entrancedate(const ::std::string& value);
  inline void set_entrancedate(const char* value);
  inline void set_entrancedate(const void* value, size_t size);
  inline ::std::string* mutable_entrancedate();
  inline ::std::string* release_entrancedate();
  inline void set_allocated_entrancedate(::std::string* entrancedate);

  // optional bytes GraduateDate = 34;
  inline bool has_graduatedate() const;
  inline void clear_graduatedate();
  static const int kGraduateDateFieldNumber = 34;
  inline const ::std::string& graduatedate() const;
  inline void set_graduatedate(const ::std::string& value);
  inline void set_graduatedate(const char* value);
  inline void set_graduatedate(const void* value, size_t size);
  inline ::std::string* mutable_graduatedate();
  inline ::std::string* release_graduatedate();
  inline void set_allocated_graduatedate(::std::string* graduatedate);

  // optional bytes EduConclusion = 35;
  inline bool has_educonclusion() const;
  inline void clear_educonclusion();
  static const int kEduConclusionFieldNumber = 35;
  inline const ::std::string& educonclusion() const;
  inline void set_educonclusion(const ::std::string& value);
  inline void set_educonclusion(const char* value);
  inline void set_educonclusion(const void* value, size_t size);
  inline ::std::string* mutable_educonclusion();
  inline ::std::string* release_educonclusion();
  inline void set_allocated_educonclusion(::std::string* educonclusion);

  // optional bytes EduForm = 36;
  inline bool has_eduform() const;
  inline void clear_eduform();
  static const int kEduFormFieldNumber = 36;
  inline const ::std::string& eduform() const;
  inline void set_eduform(const ::std::string& value);
  inline void set_eduform(const char* value);
  inline void set_eduform(const void* value, size_t size);
  inline ::std::string* mutable_eduform();
  inline ::std::string* release_eduform();
  inline void set_allocated_eduform(::std::string* eduform);

  // optional bytes CompanyName = 37;
  inline bool has_companyname() const;
  inline void clear_companyname();
  static const int kCompanyNameFieldNumber = 37;
  inline const ::std::string& companyname() const;
  inline void set_companyname(const ::std::string& value);
  inline void set_companyname(const char* value);
  inline void set_companyname(const void* value, size_t size);
  inline ::std::string* mutable_companyname();
  inline ::std::string* release_companyname();
  inline void set_allocated_companyname(::std::string* companyname);

  // optional bytes Position = 38;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 38;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const void* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional bytes JobProvince = 39;
  inline bool has_jobprovince() const;
  inline void clear_jobprovince();
  static const int kJobProvinceFieldNumber = 39;
  inline const ::std::string& jobprovince() const;
  inline void set_jobprovince(const ::std::string& value);
  inline void set_jobprovince(const char* value);
  inline void set_jobprovince(const void* value, size_t size);
  inline ::std::string* mutable_jobprovince();
  inline ::std::string* release_jobprovince();
  inline void set_allocated_jobprovince(::std::string* jobprovince);

  // optional bytes Deparment = 40;
  inline bool has_deparment() const;
  inline void clear_deparment();
  static const int kDeparmentFieldNumber = 40;
  inline const ::std::string& deparment() const;
  inline void set_deparment(const ::std::string& value);
  inline void set_deparment(const char* value);
  inline void set_deparment(const void* value, size_t size);
  inline ::std::string* mutable_deparment();
  inline ::std::string* release_deparment();
  inline void set_allocated_deparment(::std::string* deparment);

  // optional bytes CompanyAddress = 41;
  inline bool has_companyaddress() const;
  inline void clear_companyaddress();
  static const int kCompanyAddressFieldNumber = 41;
  inline const ::std::string& companyaddress() const;
  inline void set_companyaddress(const ::std::string& value);
  inline void set_companyaddress(const char* value);
  inline void set_companyaddress(const void* value, size_t size);
  inline ::std::string* mutable_companyaddress();
  inline ::std::string* release_companyaddress();
  inline void set_allocated_companyaddress(::std::string* companyaddress);

  // optional bytes JobCity = 42;
  inline bool has_jobcity() const;
  inline void clear_jobcity();
  static const int kJobCityFieldNumber = 42;
  inline const ::std::string& jobcity() const;
  inline void set_jobcity(const ::std::string& value);
  inline void set_jobcity(const char* value);
  inline void set_jobcity(const void* value, size_t size);
  inline ::std::string* mutable_jobcity();
  inline ::std::string* release_jobcity();
  inline void set_allocated_jobcity(::std::string* jobcity);

  // optional bytes JobArea = 43;
  inline bool has_jobarea() const;
  inline void clear_jobarea();
  static const int kJobAreaFieldNumber = 43;
  inline const ::std::string& jobarea() const;
  inline void set_jobarea(const ::std::string& value);
  inline void set_jobarea(const char* value);
  inline void set_jobarea(const void* value, size_t size);
  inline ::std::string* mutable_jobarea();
  inline ::std::string* release_jobarea();
  inline void set_allocated_jobarea(::std::string* jobarea);

  // optional int32 Industry = 44;
  inline bool has_industry() const;
  inline void clear_industry();
  static const int kIndustryFieldNumber = 44;
  inline ::google::protobuf::int32 industry() const;
  inline void set_industry(::google::protobuf::int32 value);

  // optional int32 Years = 46;
  inline bool has_years() const;
  inline void clear_years();
  static const int kYearsFieldNumber = 46;
  inline ::google::protobuf::int32 years() const;
  inline void set_years(::google::protobuf::int32 value);

  // optional int32 KnowWorkYears = 47;
  inline bool has_knowworkyears() const;
  inline void clear_knowworkyears();
  static const int kKnowWorkYearsFieldNumber = 47;
  inline ::google::protobuf::int32 knowworkyears() const;
  inline void set_knowworkyears(::google::protobuf::int32 value);

  // optional bytes Email = 48;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 48;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional bytes workPics = 49;
  inline bool has_workpics() const;
  inline void clear_workpics();
  static const int kWorkPicsFieldNumber = 49;
  inline const ::std::string& workpics() const;
  inline void set_workpics(const ::std::string& value);
  inline void set_workpics(const char* value);
  inline void set_workpics(const void* value, size_t size);
  inline ::std::string* mutable_workpics();
  inline ::std::string* release_workpics();
  inline void set_allocated_workpics(::std::string* workpics);

  // optional int32 IsEnterprisLegalPerson = 50;
  inline bool has_isenterprislegalperson() const;
  inline void clear_isenterprislegalperson();
  static const int kIsEnterprisLegalPersonFieldNumber = 50;
  inline ::google::protobuf::int32 isenterprislegalperson() const;
  inline void set_isenterprislegalperson(::google::protobuf::int32 value);

  // optional bytes EnterpRegistrTime = 51;
  inline bool has_enterpregistrtime() const;
  inline void clear_enterpregistrtime();
  static const int kEnterpRegistrTimeFieldNumber = 51;
  inline const ::std::string& enterpregistrtime() const;
  inline void set_enterpregistrtime(const ::std::string& value);
  inline void set_enterpregistrtime(const char* value);
  inline void set_enterpregistrtime(const void* value, size_t size);
  inline ::std::string* mutable_enterpregistrtime();
  inline ::std::string* release_enterpregistrtime();
  inline void set_allocated_enterpregistrtime(::std::string* enterpregistrtime);

  // optional bytes EnterpRegistrCapital = 52;
  inline bool has_enterpregistrcapital() const;
  inline void clear_enterpregistrcapital();
  static const int kEnterpRegistrCapitalFieldNumber = 52;
  inline const ::std::string& enterpregistrcapital() const;
  inline void set_enterpregistrcapital(const ::std::string& value);
  inline void set_enterpregistrcapital(const char* value);
  inline void set_enterpregistrcapital(const void* value, size_t size);
  inline ::std::string* mutable_enterpregistrcapital();
  inline ::std::string* release_enterpregistrcapital();
  inline void set_allocated_enterpregistrcapital(::std::string* enterpregistrcapital);

  // optional bytes EnterpRegistrState = 53;
  inline bool has_enterpregistrstate() const;
  inline void clear_enterpregistrstate();
  static const int kEnterpRegistrStateFieldNumber = 53;
  inline const ::std::string& enterpregistrstate() const;
  inline void set_enterpregistrstate(const ::std::string& value);
  inline void set_enterpregistrstate(const char* value);
  inline void set_enterpregistrstate(const void* value, size_t size);
  inline ::std::string* mutable_enterpregistrstate();
  inline ::std::string* release_enterpregistrstate();
  inline void set_allocated_enterpregistrstate(::std::string* enterpregistrstate);

  // repeated .UPS_niiwoo.income_source IncomeSource = 55;
  inline int incomesource_size() const;
  inline void clear_incomesource();
  static const int kIncomeSourceFieldNumber = 55;
  inline const ::UPS_niiwoo::income_source& incomesource(int index) const;
  inline ::UPS_niiwoo::income_source* mutable_incomesource(int index);
  inline ::UPS_niiwoo::income_source* add_incomesource();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::income_source >&
      incomesource() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::income_source >*
      mutable_incomesource();

  // repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
  inline int userhousepropertyinfo_size() const;
  inline void clear_userhousepropertyinfo();
  static const int kUserHousePropertyInfoFieldNumber = 56;
  inline const ::UPS_niiwoo::user_house_info& userhousepropertyinfo(int index) const;
  inline ::UPS_niiwoo::user_house_info* mutable_userhousepropertyinfo(int index);
  inline ::UPS_niiwoo::user_house_info* add_userhousepropertyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_house_info >&
      userhousepropertyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_house_info >*
      mutable_userhousepropertyinfo();

  // repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
  inline int usercarpropertyinfo_size() const;
  inline void clear_usercarpropertyinfo();
  static const int kUserCarPropertyInfoFieldNumber = 57;
  inline const ::UPS_niiwoo::user_car_info& usercarpropertyinfo(int index) const;
  inline ::UPS_niiwoo::user_car_info* mutable_usercarpropertyinfo(int index);
  inline ::UPS_niiwoo::user_car_info* add_usercarpropertyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_car_info >&
      usercarpropertyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_car_info >*
      mutable_usercarpropertyinfo();

  // optional .common.result_info result = 100;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 100;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_basic_info_ans)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_usernickname();
  inline void clear_has_usernickname();
  inline void set_has_userrealname();
  inline void clear_has_userrealname();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_latecharge();
  inline void clear_has_latecharge();
  inline void set_has_advanceamount();
  inline void clear_has_advanceamount();
  inline void set_has_latecnt();
  inline void clear_has_latecnt();
  inline void set_has_advanceamountcnt();
  inline void clear_has_advanceamountcnt();
  inline void set_has_mobilephone();
  inline void clear_has_mobilephone();
  inline void set_has_useridcard();
  inline void clear_has_useridcard();
  inline void set_has_phoneplace();
  inline void clear_has_phoneplace();
  inline void set_has_addresstype();
  inline void clear_has_addresstype();
  inline void set_has_hometown();
  inline void clear_has_hometown();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_maritalstatus();
  inline void clear_has_maritalstatus();
  inline void set_has_cardaddress();
  inline void clear_has_cardaddress();
  inline void set_has_childrenstatus();
  inline void clear_has_childrenstatus();
  inline void set_has_livingaddress();
  inline void clear_has_livingaddress();
  inline void set_has_eduschool();
  inline void clear_has_eduschool();
  inline void set_has_attendingcollege();
  inline void clear_has_attendingcollege();
  inline void set_has_attendinggrade();
  inline void clear_has_attendinggrade();
  inline void set_has_schooladdress();
  inline void clear_has_schooladdress();
  inline void set_has_studentprofessional();
  inline void clear_has_studentprofessional();
  inline void set_has_attendingclass();
  inline void clear_has_attendingclass();
  inline void set_has_educationapplytype();
  inline void clear_has_educationapplytype();
  inline void set_has_isverify();
  inline void clear_has_isverify();
  inline void set_has_major();
  inline void clear_has_major();
  inline void set_has_educationapplytime();
  inline void clear_has_educationapplytime();
  inline void set_has_graduateschool();
  inline void clear_has_graduateschool();
  inline void set_has_degreetype();
  inline void clear_has_degreetype();
  inline void set_has_entrancedate();
  inline void clear_has_entrancedate();
  inline void set_has_graduatedate();
  inline void clear_has_graduatedate();
  inline void set_has_educonclusion();
  inline void clear_has_educonclusion();
  inline void set_has_eduform();
  inline void clear_has_eduform();
  inline void set_has_companyname();
  inline void clear_has_companyname();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_jobprovince();
  inline void clear_has_jobprovince();
  inline void set_has_deparment();
  inline void clear_has_deparment();
  inline void set_has_companyaddress();
  inline void clear_has_companyaddress();
  inline void set_has_jobcity();
  inline void clear_has_jobcity();
  inline void set_has_jobarea();
  inline void clear_has_jobarea();
  inline void set_has_industry();
  inline void clear_has_industry();
  inline void set_has_years();
  inline void clear_has_years();
  inline void set_has_knowworkyears();
  inline void clear_has_knowworkyears();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_workpics();
  inline void clear_has_workpics();
  inline void set_has_isenterprislegalperson();
  inline void clear_has_isenterprislegalperson();
  inline void set_has_enterpregistrtime();
  inline void clear_has_enterpregistrtime();
  inline void set_has_enterpregistrcapital();
  inline void clear_has_enterpregistrcapital();
  inline void set_has_enterpregistrstate();
  inline void clear_has_enterpregistrstate();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* userid_;
  ::std::string* usernickname_;
  ::std::string* userrealname_;
  ::std::string* avatar_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 sex_;
  double latecharge_;
  ::google::protobuf::int32 userstatus_;
  ::google::protobuf::int32 latecnt_;
  double advanceamount_;
  ::std::string* mobilephone_;
  ::std::string* useridcard_;
  ::google::protobuf::int32 advanceamountcnt_;
  ::google::protobuf::int32 addresstype_;
  ::std::string* phoneplace_;
  ::std::string* hometown_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 maritalstatus_;
  ::std::string* cardaddress_;
  ::std::string* livingaddress_;
  ::std::string* eduschool_;
  ::std::string* attendingcollege_;
  ::std::string* attendinggrade_;
  ::google::protobuf::int32 childrenstatus_;
  ::google::protobuf::int32 educationapplytype_;
  ::std::string* schooladdress_;
  ::std::string* studentprofessional_;
  ::std::string* attendingclass_;
  ::std::string* major_;
  ::std::string* educationapplytime_;
  ::google::protobuf::int32 isverify_;
  ::google::protobuf::int32 degreetype_;
  ::std::string* graduateschool_;
  ::std::string* entrancedate_;
  ::std::string* graduatedate_;
  ::std::string* educonclusion_;
  ::std::string* eduform_;
  ::std::string* companyname_;
  ::std::string* position_;
  ::std::string* jobprovince_;
  ::std::string* deparment_;
  ::std::string* companyaddress_;
  ::std::string* jobcity_;
  ::std::string* jobarea_;
  ::google::protobuf::int32 industry_;
  ::google::protobuf::int32 years_;
  ::std::string* email_;
  ::google::protobuf::int32 knowworkyears_;
  ::google::protobuf::int32 isenterprislegalperson_;
  ::std::string* workpics_;
  ::std::string* enterpregistrtime_;
  ::std::string* enterpregistrcapital_;
  ::std::string* enterpregistrstate_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::income_source > incomesource_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_house_info > userhousepropertyinfo_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_car_info > usercarpropertyinfo_;
  ::common::result_info* result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_basic_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_common_ask : public ::google::protobuf::Message {
 public:
  user_common_ask();
  virtual ~user_common_ask();

  user_common_ask(const user_common_ask& from);

  inline user_common_ask& operator=(const user_common_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_common_ask& default_instance();

  void Swap(user_common_ask* other);

  // implements Message ----------------------------------------------

  user_common_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_common_ask& from);
  void MergeFrom(const user_common_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes id_card = 2;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 2;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_common_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* id_card_;
  ::std::string* mobile_phone_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_common_ask* default_instance_;
};
// -------------------------------------------------------------------

class user_common_ans : public ::google::protobuf::Message {
 public:
  user_common_ans();
  virtual ~user_common_ans();

  user_common_ans(const user_common_ans& from);

  inline user_common_ans& operator=(const user_common_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_common_ans& default_instance();

  void Swap(user_common_ans* other);

  // implements Message ----------------------------------------------

  user_common_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_common_ans& from);
  void MergeFrom(const user_common_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.result_info result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // optional bytes result_json = 2;
  inline bool has_result_json() const;
  inline void clear_result_json();
  static const int kResultJsonFieldNumber = 2;
  inline const ::std::string& result_json() const;
  inline void set_result_json(const ::std::string& value);
  inline void set_result_json(const char* value);
  inline void set_result_json(const void* value, size_t size);
  inline ::std::string* mutable_result_json();
  inline ::std::string* release_result_json();
  inline void set_allocated_result_json(::std::string* result_json);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_common_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_result_json();
  inline void clear_has_result_json();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  ::std::string* result_json_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_common_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_labels_by_type_ask : public ::google::protobuf::Message {
 public:
  user_labels_by_type_ask();
  virtual ~user_labels_by_type_ask();

  user_labels_by_type_ask(const user_labels_by_type_ask& from);

  inline user_labels_by_type_ask& operator=(const user_labels_by_type_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_labels_by_type_ask& default_instance();

  void Swap(user_labels_by_type_ask* other);

  // implements Message ----------------------------------------------

  user_labels_by_type_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_labels_by_type_ask& from);
  void MergeFrom(const user_labels_by_type_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes id_card = 2;
  inline bool has_id_card() const;
  inline void clear_id_card();
  static const int kIdCardFieldNumber = 2;
  inline const ::std::string& id_card() const;
  inline void set_id_card(const ::std::string& value);
  inline void set_id_card(const char* value);
  inline void set_id_card(const void* value, size_t size);
  inline ::std::string* mutable_id_card();
  inline ::std::string* release_id_card();
  inline void set_allocated_id_card(::std::string* id_card);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // repeated int32 label_type_ids = 4;
  inline int label_type_ids_size() const;
  inline void clear_label_type_ids();
  static const int kLabelTypeIdsFieldNumber = 4;
  inline ::google::protobuf::int32 label_type_ids(int index) const;
  inline void set_label_type_ids(int index, ::google::protobuf::int32 value);
  inline void add_label_type_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      label_type_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_label_type_ids();

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_labels_by_type_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_id_card();
  inline void clear_has_id_card();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* id_card_;
  ::std::string* mobile_phone_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > label_type_ids_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_labels_by_type_ask* default_instance_;
};
// -------------------------------------------------------------------

class label_set : public ::google::protobuf::Message {
 public:
  label_set();
  virtual ~label_set();

  label_set(const label_set& from);

  inline label_set& operator=(const label_set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const label_set& default_instance();

  void Swap(label_set* other);

  // implements Message ----------------------------------------------

  label_set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const label_set& from);
  void MergeFrom(const label_set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 label_type_id = 1;
  inline bool has_label_type_id() const;
  inline void clear_label_type_id();
  static const int kLabelTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 label_type_id() const;
  inline void set_label_type_id(::google::protobuf::int32 value);

  // optional bytes label_type = 2;
  inline bool has_label_type() const;
  inline void clear_label_type();
  static const int kLabelTypeFieldNumber = 2;
  inline const ::std::string& label_type() const;
  inline void set_label_type(const ::std::string& value);
  inline void set_label_type(const char* value);
  inline void set_label_type(const void* value, size_t size);
  inline ::std::string* mutable_label_type();
  inline ::std::string* release_label_type();
  inline void set_allocated_label_type(::std::string* label_type);

  // repeated bytes labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const void* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.label_set)
 private:
  inline void set_has_label_type_id();
  inline void clear_has_label_type_id();
  inline void set_has_label_type();
  inline void clear_has_label_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* label_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::int32 label_type_id_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static label_set* default_instance_;
};
// -------------------------------------------------------------------

class user_labels_by_type_ans : public ::google::protobuf::Message {
 public:
  user_labels_by_type_ans();
  virtual ~user_labels_by_type_ans();

  user_labels_by_type_ans(const user_labels_by_type_ans& from);

  inline user_labels_by_type_ans& operator=(const user_labels_by_type_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_labels_by_type_ans& default_instance();

  void Swap(user_labels_by_type_ans* other);

  // implements Message ----------------------------------------------

  user_labels_by_type_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_labels_by_type_ans& from);
  void MergeFrom(const user_labels_by_type_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UPS_niiwoo.label_set labels = 1;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 1;
  inline const ::UPS_niiwoo::label_set& labels(int index) const;
  inline ::UPS_niiwoo::label_set* mutable_labels(int index);
  inline ::UPS_niiwoo::label_set* add_labels();
  inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_set >&
      labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_set >*
      mutable_labels();

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UPS_niiwoo.user_labels_by_type_ans)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_set > labels_;
  ::common::result_info* result_;
  friend void  protobuf_AddDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UPS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UPS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_labels_by_type_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// label_type

// optional int32 type_id = 1;
inline bool label_type::has_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type::set_has_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_type::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.type_id)
  return type_id_;
}
inline void label_type::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.type_id)
}

// optional bytes type_name = 2;
inline bool label_type::has_type_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type::set_has_type_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type::clear_type_name() {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_->clear();
  }
  clear_has_type_name();
}
inline const ::std::string& label_type::type_name() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.type_name)
  return *type_name_;
}
inline void label_type::set_type_name(const ::std::string& value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.type_name)
}
inline void label_type::set_type_name(const char* value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_type.type_name)
}
inline void label_type::set_type_name(const void* value, size_t size) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_type.type_name)
}
inline ::std::string* label_type::mutable_type_name() {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type.type_name)
  return type_name_;
}
inline ::std::string* label_type::release_type_name() {
  clear_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_name_;
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_type::set_allocated_type_name(::std::string* type_name) {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (type_name) {
    set_has_type_name();
    type_name_ = type_name;
  } else {
    clear_has_type_name();
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type.type_name)
}

// optional int32 parent_id = 3;
inline bool label_type::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_type::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_type::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_type::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 label_type::parent_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.parent_id)
  return parent_id_;
}
inline void label_type::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.parent_id)
}

// optional int32 type_prefix = 4;
inline bool label_type::has_type_prefix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label_type::set_has_type_prefix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label_type::clear_has_type_prefix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label_type::clear_type_prefix() {
  type_prefix_ = 0;
  clear_has_type_prefix();
}
inline ::google::protobuf::int32 label_type::type_prefix() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.type_prefix)
  return type_prefix_;
}
inline void label_type::set_type_prefix(::google::protobuf::int32 value) {
  set_has_type_prefix();
  type_prefix_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.type_prefix)
}

// optional bytes type_note = 5;
inline bool label_type::has_type_note() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void label_type::set_has_type_note() {
  _has_bits_[0] |= 0x00000010u;
}
inline void label_type::clear_has_type_note() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void label_type::clear_type_note() {
  if (type_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_note_->clear();
  }
  clear_has_type_note();
}
inline const ::std::string& label_type::type_note() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.type_note)
  return *type_note_;
}
inline void label_type::set_type_note(const ::std::string& value) {
  set_has_type_note();
  if (type_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_note_ = new ::std::string;
  }
  type_note_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.type_note)
}
inline void label_type::set_type_note(const char* value) {
  set_has_type_note();
  if (type_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_note_ = new ::std::string;
  }
  type_note_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_type.type_note)
}
inline void label_type::set_type_note(const void* value, size_t size) {
  set_has_type_note();
  if (type_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_note_ = new ::std::string;
  }
  type_note_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_type.type_note)
}
inline ::std::string* label_type::mutable_type_note() {
  set_has_type_note();
  if (type_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_note_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type.type_note)
  return type_note_;
}
inline ::std::string* label_type::release_type_note() {
  clear_has_type_note();
  if (type_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_note_;
    type_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_type::set_allocated_type_note(::std::string* type_note) {
  if (type_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_note_;
  }
  if (type_note) {
    set_has_type_note();
    type_note_ = type_note;
  } else {
    clear_has_type_note();
    type_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type.type_note)
}

// optional bytes add_time = 6;
inline bool label_type::has_add_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void label_type::set_has_add_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void label_type::clear_has_add_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void label_type::clear_add_time() {
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_->clear();
  }
  clear_has_add_time();
}
inline const ::std::string& label_type::add_time() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.add_time)
  return *add_time_;
}
inline void label_type::set_add_time(const ::std::string& value) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.add_time)
}
inline void label_type::set_add_time(const char* value) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_type.add_time)
}
inline void label_type::set_add_time(const void* value, size_t size) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_type.add_time)
}
inline ::std::string* label_type::mutable_add_time() {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type.add_time)
  return add_time_;
}
inline ::std::string* label_type::release_add_time() {
  clear_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = add_time_;
    add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_type::set_allocated_add_time(::std::string* add_time) {
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete add_time_;
  }
  if (add_time) {
    set_has_add_time();
    add_time_ = add_time;
  } else {
    clear_has_add_time();
    add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type.add_time)
}

// optional bytes update_time = 7;
inline bool label_type::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void label_type::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void label_type::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void label_type::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& label_type::update_time() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type.update_time)
  return *update_time_;
}
inline void label_type::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type.update_time)
}
inline void label_type::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_type.update_time)
}
inline void label_type::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_type.update_time)
}
inline ::std::string* label_type::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type.update_time)
  return update_time_;
}
inline ::std::string* label_type::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_type::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type.update_time)
}

// -------------------------------------------------------------------

// label

// optional int32 label_id = 1;
inline bool label::has_label_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label::set_has_label_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 label::label_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.label_id)
  return label_id_;
}
inline void label::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.label_id)
}

// optional int32 type_id = 2;
inline bool label::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.type_id)
  return type_id_;
}
inline void label::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.type_id)
}

// optional bytes label_name = 3;
inline bool label::has_label_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label::set_has_label_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label::clear_has_label_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label::clear_label_name() {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_->clear();
  }
  clear_has_label_name();
}
inline const ::std::string& label::label_name() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.label_name)
  return *label_name_;
}
inline void label::set_label_name(const ::std::string& value) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.label_name)
}
inline void label::set_label_name(const char* value) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label.label_name)
}
inline void label::set_label_name(const void* value, size_t size) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label.label_name)
}
inline ::std::string* label::mutable_label_name() {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label.label_name)
  return label_name_;
}
inline ::std::string* label::release_label_name() {
  clear_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_name_;
    label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label::set_allocated_label_name(::std::string* label_name) {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_name_;
  }
  if (label_name) {
    set_has_label_name();
    label_name_ = label_name;
  } else {
    clear_has_label_name();
    label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label.label_name)
}

// optional int32 parent_id = 4;
inline bool label::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 label::parent_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.parent_id)
  return parent_id_;
}
inline void label::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.parent_id)
}

// optional bytes label_note = 5;
inline bool label::has_label_note() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void label::set_has_label_note() {
  _has_bits_[0] |= 0x00000010u;
}
inline void label::clear_has_label_note() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void label::clear_label_note() {
  if (label_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_note_->clear();
  }
  clear_has_label_note();
}
inline const ::std::string& label::label_note() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.label_note)
  return *label_note_;
}
inline void label::set_label_note(const ::std::string& value) {
  set_has_label_note();
  if (label_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_note_ = new ::std::string;
  }
  label_note_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.label_note)
}
inline void label::set_label_note(const char* value) {
  set_has_label_note();
  if (label_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_note_ = new ::std::string;
  }
  label_note_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label.label_note)
}
inline void label::set_label_note(const void* value, size_t size) {
  set_has_label_note();
  if (label_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_note_ = new ::std::string;
  }
  label_note_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label.label_note)
}
inline ::std::string* label::mutable_label_note() {
  set_has_label_note();
  if (label_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_note_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label.label_note)
  return label_note_;
}
inline ::std::string* label::release_label_note() {
  clear_has_label_note();
  if (label_note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_note_;
    label_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label::set_allocated_label_note(::std::string* label_note) {
  if (label_note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_note_;
  }
  if (label_note) {
    set_has_label_note();
    label_note_ = label_note;
  } else {
    clear_has_label_note();
    label_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label.label_note)
}

// optional bytes add_time = 6;
inline bool label::has_add_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void label::set_has_add_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void label::clear_has_add_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void label::clear_add_time() {
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_->clear();
  }
  clear_has_add_time();
}
inline const ::std::string& label::add_time() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.add_time)
  return *add_time_;
}
inline void label::set_add_time(const ::std::string& value) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.add_time)
}
inline void label::set_add_time(const char* value) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label.add_time)
}
inline void label::set_add_time(const void* value, size_t size) {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  add_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label.add_time)
}
inline ::std::string* label::mutable_add_time() {
  set_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    add_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label.add_time)
  return add_time_;
}
inline ::std::string* label::release_add_time() {
  clear_has_add_time();
  if (add_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = add_time_;
    add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label::set_allocated_add_time(::std::string* add_time) {
  if (add_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete add_time_;
  }
  if (add_time) {
    set_has_add_time();
    add_time_ = add_time;
  } else {
    clear_has_add_time();
    add_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label.add_time)
}

// optional bytes update_time = 7;
inline bool label::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void label::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void label::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void label::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& label::update_time() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label.update_time)
  return *update_time_;
}
inline void label::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label.update_time)
}
inline void label::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label.update_time)
}
inline void label::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label.update_time)
}
inline ::std::string* label::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    update_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label.update_time)
  return update_time_;
}
inline ::std::string* label::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label.update_time)
}

// -------------------------------------------------------------------

// label_type_list_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_type_list_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_list_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_list_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_list_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_type_list_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_type_list_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_list_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_type_list_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_type_list_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_list_ask.ask_header)
}

// optional int32 type_id = 2;
inline bool label_type_list_ask::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_list_ask::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_list_ask::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_list_ask::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_type_list_ask::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ask.type_id)
  return type_id_;
}
inline void label_type_list_ask::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_list_ask.type_id)
}

// optional bytes type_name = 3;
inline bool label_type_list_ask::has_type_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_type_list_ask::set_has_type_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_type_list_ask::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_type_list_ask::clear_type_name() {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_->clear();
  }
  clear_has_type_name();
}
inline const ::std::string& label_type_list_ask::type_name() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ask.type_name)
  return *type_name_;
}
inline void label_type_list_ask::set_type_name(const ::std::string& value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_list_ask.type_name)
}
inline void label_type_list_ask::set_type_name(const char* value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_type_list_ask.type_name)
}
inline void label_type_list_ask::set_type_name(const void* value, size_t size) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_type_list_ask.type_name)
}
inline ::std::string* label_type_list_ask::mutable_type_name() {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_list_ask.type_name)
  return type_name_;
}
inline ::std::string* label_type_list_ask::release_type_name() {
  clear_has_type_name();
  if (type_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_name_;
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_type_list_ask::set_allocated_type_name(::std::string* type_name) {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (type_name) {
    set_has_type_name();
    type_name_ = type_name;
  } else {
    clear_has_type_name();
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_list_ask.type_name)
}

// optional int32 page_num = 4;
inline bool label_type_list_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label_type_list_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label_type_list_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label_type_list_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 label_type_list_ask::page_num() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ask.page_num)
  return page_num_;
}
inline void label_type_list_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_list_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool label_type_list_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void label_type_list_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void label_type_list_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void label_type_list_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 label_type_list_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ask.cur_page)
  return cur_page_;
}
inline void label_type_list_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_list_ask.cur_page)
}

// -------------------------------------------------------------------

// label_type_list_ans

// repeated .UPS_niiwoo.label_type list = 1;
inline int label_type_list_ans::list_size() const {
  return list_.size();
}
inline void label_type_list_ans::clear_list() {
  list_.Clear();
}
inline const ::UPS_niiwoo::label_type& label_type_list_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ans.list)
  return list_.Get(index);
}
inline ::UPS_niiwoo::label_type* label_type_list_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_list_ans.list)
  return list_.Mutable(index);
}
inline ::UPS_niiwoo::label_type* label_type_list_ans::add_list() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_type_list_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >&
label_type_list_ans::list() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_type_list_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >*
label_type_list_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_type_list_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool label_type_list_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_list_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_list_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_list_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 label_type_list_ans::total_number() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ans.total_number)
  return total_number_;
}
inline void label_type_list_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_list_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool label_type_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_type_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_type_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_type_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_type_list_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_type_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_list_ans.error)
  return error_;
}
inline ::common::errorinfo* label_type_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_type_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_list_ans.error)
}

// -------------------------------------------------------------------

// label_type_detail_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_type_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_type_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_type_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_type_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_type_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_detail_ask.ask_header)
}

// optional int32 type_id = 2;
inline bool label_type_detail_ask::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_detail_ask::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_detail_ask::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_detail_ask::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_type_detail_ask::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_detail_ask.type_id)
  return type_id_;
}
inline void label_type_detail_ask::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_detail_ask.type_id)
}

// -------------------------------------------------------------------

// label_type_detail_ans

// optional .UPS_niiwoo.label_type info = 1;
inline bool label_type_detail_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_detail_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_detail_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_detail_ans::clear_info() {
  if (info_ != NULL) info_->::UPS_niiwoo::label_type::Clear();
  clear_has_info();
}
inline const ::UPS_niiwoo::label_type& label_type_detail_ans::info() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_detail_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UPS_niiwoo::label_type* label_type_detail_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UPS_niiwoo::label_type;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_detail_ans.info)
  return info_;
}
inline ::UPS_niiwoo::label_type* label_type_detail_ans::release_info() {
  clear_has_info();
  ::UPS_niiwoo::label_type* temp = info_;
  info_ = NULL;
  return temp;
}
inline void label_type_detail_ans::set_allocated_info(::UPS_niiwoo::label_type* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_detail_ans.info)
}

// optional .common.errorinfo error = 2;
inline bool label_type_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_type_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_type_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* label_type_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_type_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_detail_ans.error)
}

// -------------------------------------------------------------------

// label_type_save_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_type_save_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_save_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_save_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_save_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_type_save_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_save_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_type_save_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_save_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_type_save_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_type_save_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_save_ask.ask_header)
}

// optional .UPS_niiwoo.label_type info = 2;
inline bool label_type_save_ask::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_save_ask::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_save_ask::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_save_ask::clear_info() {
  if (info_ != NULL) info_->::UPS_niiwoo::label_type::Clear();
  clear_has_info();
}
inline const ::UPS_niiwoo::label_type& label_type_save_ask::info() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_save_ask.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UPS_niiwoo::label_type* label_type_save_ask::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UPS_niiwoo::label_type;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_save_ask.info)
  return info_;
}
inline ::UPS_niiwoo::label_type* label_type_save_ask::release_info() {
  clear_has_info();
  ::UPS_niiwoo::label_type* temp = info_;
  info_ = NULL;
  return temp;
}
inline void label_type_save_ask::set_allocated_info(::UPS_niiwoo::label_type* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_save_ask.info)
}

// -------------------------------------------------------------------

// label_type_save_ans

// optional .common.errorinfo error = 1;
inline bool label_type_save_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_save_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_save_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_save_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_type_save_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_save_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_type_save_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_save_ans.error)
  return error_;
}
inline ::common::errorinfo* label_type_save_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_type_save_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_save_ans.error)
}

// -------------------------------------------------------------------

// label_type_remove_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_type_remove_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_remove_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_remove_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_remove_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_type_remove_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_remove_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_type_remove_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_remove_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_type_remove_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_type_remove_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_remove_ask.ask_header)
}

// optional int32 type_id = 2;
inline bool label_type_remove_ask::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_remove_ask::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_remove_ask::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_remove_ask::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_type_remove_ask::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_remove_ask.type_id)
  return type_id_;
}
inline void label_type_remove_ask::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_remove_ask.type_id)
}

// -------------------------------------------------------------------

// label_type_remove_ans

// optional .common.errorinfo error = 1;
inline bool label_type_remove_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_remove_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_remove_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_remove_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_type_remove_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_remove_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_type_remove_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_remove_ans.error)
  return error_;
}
inline ::common::errorinfo* label_type_remove_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_type_remove_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_remove_ans.error)
}

// -------------------------------------------------------------------

// label_type_tree_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_type_tree_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_type_tree_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_type_tree_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_type_tree_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_type_tree_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_tree_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_type_tree_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_tree_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_type_tree_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_type_tree_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_tree_ask.ask_header)
}

// optional int32 type_id = 2;
inline bool label_type_tree_ask::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_tree_ask::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_tree_ask::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_tree_ask::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_type_tree_ask::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_tree_ask.type_id)
  return type_id_;
}
inline void label_type_tree_ask::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_type_tree_ask.type_id)
}

// -------------------------------------------------------------------

// label_type_tree_ans

// repeated .UPS_niiwoo.label_type list = 1;
inline int label_type_tree_ans::list_size() const {
  return list_.size();
}
inline void label_type_tree_ans::clear_list() {
  list_.Clear();
}
inline const ::UPS_niiwoo::label_type& label_type_tree_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_tree_ans.list)
  return list_.Get(index);
}
inline ::UPS_niiwoo::label_type* label_type_tree_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_tree_ans.list)
  return list_.Mutable(index);
}
inline ::UPS_niiwoo::label_type* label_type_tree_ans::add_list() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_type_tree_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >&
label_type_tree_ans::list() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_type_tree_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_type >*
label_type_tree_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_type_tree_ans.list)
  return &list_;
}

// optional .common.errorinfo error = 2;
inline bool label_type_tree_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_type_tree_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_type_tree_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_type_tree_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_type_tree_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_type_tree_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_type_tree_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_type_tree_ans.error)
  return error_;
}
inline ::common::errorinfo* label_type_tree_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_type_tree_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_type_tree_ans.error)
}

// -------------------------------------------------------------------

// label_list_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_list_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_list_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_list_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_list_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_list_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_list_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_list_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_list_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_list_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_list_ask.ask_header)
}

// optional int32 type_id = 2;
inline bool label_list_ask::has_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_list_ask::set_has_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_list_ask::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_list_ask::clear_type_id() {
  type_id_ = 0;
  clear_has_type_id();
}
inline ::google::protobuf::int32 label_list_ask::type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ask.type_id)
  return type_id_;
}
inline void label_list_ask::set_type_id(::google::protobuf::int32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_list_ask.type_id)
}

// optional bytes label_name = 3;
inline bool label_list_ask::has_label_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_list_ask::set_has_label_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_list_ask::clear_has_label_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_list_ask::clear_label_name() {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_->clear();
  }
  clear_has_label_name();
}
inline const ::std::string& label_list_ask::label_name() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ask.label_name)
  return *label_name_;
}
inline void label_list_ask::set_label_name(const ::std::string& value) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_list_ask.label_name)
}
inline void label_list_ask::set_label_name(const char* value) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_list_ask.label_name)
}
inline void label_list_ask::set_label_name(const void* value, size_t size) {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  label_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_list_ask.label_name)
}
inline ::std::string* label_list_ask::mutable_label_name() {
  set_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_list_ask.label_name)
  return label_name_;
}
inline ::std::string* label_list_ask::release_label_name() {
  clear_has_label_name();
  if (label_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_name_;
    label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_list_ask::set_allocated_label_name(::std::string* label_name) {
  if (label_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_name_;
  }
  if (label_name) {
    set_has_label_name();
    label_name_ = label_name;
  } else {
    clear_has_label_name();
    label_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_list_ask.label_name)
}

// optional int32 page_num = 4;
inline bool label_list_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label_list_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label_list_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label_list_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 label_list_ask::page_num() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ask.page_num)
  return page_num_;
}
inline void label_list_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_list_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool label_list_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void label_list_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void label_list_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void label_list_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 label_list_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ask.cur_page)
  return cur_page_;
}
inline void label_list_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_list_ask.cur_page)
}

// -------------------------------------------------------------------

// label_list_ans

// repeated .UPS_niiwoo.label list = 1;
inline int label_list_ans::list_size() const {
  return list_.size();
}
inline void label_list_ans::clear_list() {
  list_.Clear();
}
inline const ::UPS_niiwoo::label& label_list_ans::list(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ans.list)
  return list_.Get(index);
}
inline ::UPS_niiwoo::label* label_list_ans::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_list_ans.list)
  return list_.Mutable(index);
}
inline ::UPS_niiwoo::label* label_list_ans::add_list() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_list_ans.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label >&
label_list_ans::list() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_list_ans.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label >*
label_list_ans::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_list_ans.list)
  return &list_;
}

// optional int32 total_number = 2;
inline bool label_list_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_list_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_list_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_list_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 label_list_ans::total_number() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ans.total_number)
  return total_number_;
}
inline void label_list_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_list_ans.total_number)
}

// optional .common.errorinfo error = 3;
inline bool label_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_list_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_list_ans.error)
  return error_;
}
inline ::common::errorinfo* label_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_list_ans.error)
}

// -------------------------------------------------------------------

// label_detail_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_detail_ask.ask_header)
}

// optional int32 label_id = 2;
inline bool label_detail_ask::has_label_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_detail_ask::set_has_label_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_detail_ask::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_detail_ask::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 label_detail_ask::label_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_detail_ask.label_id)
  return label_id_;
}
inline void label_detail_ask::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_detail_ask.label_id)
}

// -------------------------------------------------------------------

// label_detail_ans

// optional .UPS_niiwoo.label info = 1;
inline bool label_detail_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_detail_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_detail_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_detail_ans::clear_info() {
  if (info_ != NULL) info_->::UPS_niiwoo::label::Clear();
  clear_has_info();
}
inline const ::UPS_niiwoo::label& label_detail_ans::info() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_detail_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UPS_niiwoo::label* label_detail_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UPS_niiwoo::label;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_detail_ans.info)
  return info_;
}
inline ::UPS_niiwoo::label* label_detail_ans::release_info() {
  clear_has_info();
  ::UPS_niiwoo::label* temp = info_;
  info_ = NULL;
  return temp;
}
inline void label_detail_ans::set_allocated_info(::UPS_niiwoo::label* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_detail_ans.info)
}

// optional .common.errorinfo error = 2;
inline bool label_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* label_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_detail_ans.error)
}

// -------------------------------------------------------------------

// label_save_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_save_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_save_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_save_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_save_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_save_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_save_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_save_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_save_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_save_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_save_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_save_ask.ask_header)
}

// optional .UPS_niiwoo.label info = 2;
inline bool label_save_ask::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_save_ask::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_save_ask::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_save_ask::clear_info() {
  if (info_ != NULL) info_->::UPS_niiwoo::label::Clear();
  clear_has_info();
}
inline const ::UPS_niiwoo::label& label_save_ask::info() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_save_ask.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UPS_niiwoo::label* label_save_ask::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UPS_niiwoo::label;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_save_ask.info)
  return info_;
}
inline ::UPS_niiwoo::label* label_save_ask::release_info() {
  clear_has_info();
  ::UPS_niiwoo::label* temp = info_;
  info_ = NULL;
  return temp;
}
inline void label_save_ask::set_allocated_info(::UPS_niiwoo::label* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_save_ask.info)
}

// -------------------------------------------------------------------

// label_save_ans

// optional .common.errorinfo error = 1;
inline bool label_save_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_save_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_save_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_save_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_save_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_save_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_save_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_save_ans.error)
  return error_;
}
inline ::common::errorinfo* label_save_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_save_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_save_ans.error)
}

// -------------------------------------------------------------------

// label_remove_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_remove_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_remove_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_remove_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_remove_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_remove_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_remove_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_remove_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_remove_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_remove_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_remove_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_remove_ask.ask_header)
}

// optional int32 label_id = 2;
inline bool label_remove_ask::has_label_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_remove_ask::set_has_label_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_remove_ask::clear_has_label_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_remove_ask::clear_label_id() {
  label_id_ = 0;
  clear_has_label_id();
}
inline ::google::protobuf::int32 label_remove_ask::label_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_remove_ask.label_id)
  return label_id_;
}
inline void label_remove_ask::set_label_id(::google::protobuf::int32 value) {
  set_has_label_id();
  label_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_remove_ask.label_id)
}

// -------------------------------------------------------------------

// label_remove_ans

// optional .common.errorinfo error = 1;
inline bool label_remove_ans::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_remove_ans::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_remove_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_remove_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& label_remove_ans::error() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_remove_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* label_remove_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_remove_ans.error)
  return error_;
}
inline ::common::errorinfo* label_remove_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void label_remove_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_remove_ans.error)
}

// -------------------------------------------------------------------

// user_labels_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_labels_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_labels_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_labels_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_labels_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_labels_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_labels_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_labels_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_labels_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_ask.ask_header)
}

// optional bytes id_card = 2;
inline bool user_labels_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_labels_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_labels_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_labels_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& user_labels_ask::id_card() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_ask.id_card)
  return *id_card_;
}
inline void user_labels_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_ask.id_card)
}
inline void user_labels_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_labels_ask.id_card)
}
inline void user_labels_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_labels_ask.id_card)
}
inline ::std::string* user_labels_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_ask.id_card)
  return id_card_;
}
inline ::std::string* user_labels_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_labels_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_ask.id_card)
}

// optional bytes mobile_phone = 3;
inline bool user_labels_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_labels_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_labels_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_labels_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_labels_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_labels_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_ask.mobile_phone)
}
inline void user_labels_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_labels_ask.mobile_phone)
}
inline void user_labels_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_labels_ask.mobile_phone)
}
inline ::std::string* user_labels_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_labels_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_labels_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_ask.mobile_phone)
}

// -------------------------------------------------------------------

// user_labels_ans

// repeated bytes labels = 1;
inline int user_labels_ans::labels_size() const {
  return labels_.size();
}
inline void user_labels_ans::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& user_labels_ans::labels(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_ans.labels)
  return labels_.Get(index);
}
inline ::std::string* user_labels_ans::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_ans.labels)
  return labels_.Mutable(index);
}
inline void user_labels_ans::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_ans.labels)
  labels_.Mutable(index)->assign(value);
}
inline void user_labels_ans::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_labels_ans.labels)
}
inline void user_labels_ans::set_labels(int index, const void* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_labels_ans.labels)
}
inline ::std::string* user_labels_ans::add_labels() {
  return labels_.Add();
}
inline void user_labels_ans::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_labels_ans.labels)
}
inline void user_labels_ans::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UPS_niiwoo.user_labels_ans.labels)
}
inline void user_labels_ans::add_labels(const void* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UPS_niiwoo.user_labels_ans.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
user_labels_ans::labels() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_labels_ans.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
user_labels_ans::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_labels_ans.labels)
  return &labels_;
}

// optional .common.result_info result = 2;
inline bool user_labels_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_labels_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_labels_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_labels_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_labels_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_labels_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_ans.result)
  return result_;
}
inline ::common::result_info* user_labels_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_labels_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_ans.result)
}

// -------------------------------------------------------------------

// label_users_ask

// optional .common.common_ask_header ask_header = 1;
inline bool label_users_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_users_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_users_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_users_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& label_users_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* label_users_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_users_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* label_users_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void label_users_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_users_ask.ask_header)
}

// repeated int32 label_ids = 2;
inline int label_users_ask::label_ids_size() const {
  return label_ids_.size();
}
inline void label_users_ask::clear_label_ids() {
  label_ids_.Clear();
}
inline ::google::protobuf::int32 label_users_ask::label_ids(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ask.label_ids)
  return label_ids_.Get(index);
}
inline void label_users_ask::set_label_ids(int index, ::google::protobuf::int32 value) {
  label_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_users_ask.label_ids)
}
inline void label_users_ask::add_label_ids(::google::protobuf::int32 value) {
  label_ids_.Add(value);
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_users_ask.label_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
label_users_ask::label_ids() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_users_ask.label_ids)
  return label_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
label_users_ask::mutable_label_ids() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_users_ask.label_ids)
  return &label_ids_;
}

// optional int32 all_in = 3 [default = 2];
inline bool label_users_ask::has_all_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_users_ask::set_has_all_in() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_users_ask::clear_has_all_in() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_users_ask::clear_all_in() {
  all_in_ = 2;
  clear_has_all_in();
}
inline ::google::protobuf::int32 label_users_ask::all_in() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ask.all_in)
  return all_in_;
}
inline void label_users_ask::set_all_in(::google::protobuf::int32 value) {
  set_has_all_in();
  all_in_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_users_ask.all_in)
}

// optional int32 page_num = 4;
inline bool label_users_ask::has_page_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void label_users_ask::set_has_page_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void label_users_ask::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void label_users_ask::clear_page_num() {
  page_num_ = 0;
  clear_has_page_num();
}
inline ::google::protobuf::int32 label_users_ask::page_num() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ask.page_num)
  return page_num_;
}
inline void label_users_ask::set_page_num(::google::protobuf::int32 value) {
  set_has_page_num();
  page_num_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_users_ask.page_num)
}

// optional int32 cur_page = 5;
inline bool label_users_ask::has_cur_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void label_users_ask::set_has_cur_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void label_users_ask::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void label_users_ask::clear_cur_page() {
  cur_page_ = 0;
  clear_has_cur_page();
}
inline ::google::protobuf::int32 label_users_ask::cur_page() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ask.cur_page)
  return cur_page_;
}
inline void label_users_ask::set_cur_page(::google::protobuf::int32 value) {
  set_has_cur_page();
  cur_page_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_users_ask.cur_page)
}

// -------------------------------------------------------------------

// user_basic_info

// optional bytes user_name = 1;
inline bool user_basic_info::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& user_basic_info::user_name() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.user_name)
  return *user_name_;
}
inline void user_basic_info::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.user_name)
}
inline void user_basic_info::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.user_name)
}
inline void user_basic_info::set_user_name(const void* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.user_name)
}
inline ::std::string* user_basic_info::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.user_name)
  return user_name_;
}
inline ::std::string* user_basic_info::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.user_name)
}

// optional bytes mobile_phone = 2;
inline bool user_basic_info::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_basic_info::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.mobile_phone)
  return *mobile_phone_;
}
inline void user_basic_info::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.mobile_phone)
}
inline void user_basic_info::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.mobile_phone)
}
inline void user_basic_info::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.mobile_phone)
}
inline ::std::string* user_basic_info::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_basic_info::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.mobile_phone)
}

// optional bytes id_card_no = 3;
inline bool user_basic_info::has_id_card_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_basic_info::set_has_id_card_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_basic_info::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_basic_info::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& user_basic_info::id_card_no() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.id_card_no)
  return *id_card_no_;
}
inline void user_basic_info::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.id_card_no)
}
inline void user_basic_info::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.id_card_no)
}
inline void user_basic_info::set_id_card_no(const void* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.id_card_no)
}
inline ::std::string* user_basic_info::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.id_card_no)
  return id_card_no_;
}
inline ::std::string* user_basic_info::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_id_card_no(::std::string* id_card_no) {
  if (id_card_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_no_;
  }
  if (id_card_no) {
    set_has_id_card_no();
    id_card_no_ = id_card_no;
  } else {
    clear_has_id_card_no();
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.id_card_no)
}

// optional bytes position = 4;
inline bool user_basic_info::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_basic_info::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_basic_info::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_basic_info::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& user_basic_info::position() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.position)
  return *position_;
}
inline void user_basic_info::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.position)
}
inline void user_basic_info::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.position)
}
inline void user_basic_info::set_position(const void* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.position)
}
inline ::std::string* user_basic_info::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.position)
  return position_;
}
inline ::std::string* user_basic_info::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.position)
}

// optional bytes living_loc_info = 5;
inline bool user_basic_info::has_living_loc_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_basic_info::set_has_living_loc_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_basic_info::clear_has_living_loc_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_basic_info::clear_living_loc_info() {
  if (living_loc_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_loc_info_->clear();
  }
  clear_has_living_loc_info();
}
inline const ::std::string& user_basic_info::living_loc_info() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.living_loc_info)
  return *living_loc_info_;
}
inline void user_basic_info::set_living_loc_info(const ::std::string& value) {
  set_has_living_loc_info();
  if (living_loc_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_loc_info_ = new ::std::string;
  }
  living_loc_info_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.living_loc_info)
}
inline void user_basic_info::set_living_loc_info(const char* value) {
  set_has_living_loc_info();
  if (living_loc_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_loc_info_ = new ::std::string;
  }
  living_loc_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.living_loc_info)
}
inline void user_basic_info::set_living_loc_info(const void* value, size_t size) {
  set_has_living_loc_info();
  if (living_loc_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_loc_info_ = new ::std::string;
  }
  living_loc_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.living_loc_info)
}
inline ::std::string* user_basic_info::mutable_living_loc_info() {
  set_has_living_loc_info();
  if (living_loc_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_loc_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.living_loc_info)
  return living_loc_info_;
}
inline ::std::string* user_basic_info::release_living_loc_info() {
  clear_has_living_loc_info();
  if (living_loc_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = living_loc_info_;
    living_loc_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_living_loc_info(::std::string* living_loc_info) {
  if (living_loc_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_loc_info_;
  }
  if (living_loc_info) {
    set_has_living_loc_info();
    living_loc_info_ = living_loc_info;
  } else {
    clear_has_living_loc_info();
    living_loc_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.living_loc_info)
}

// optional bytes id_card_address = 6;
inline bool user_basic_info::has_id_card_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_basic_info::set_has_id_card_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_basic_info::clear_has_id_card_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_basic_info::clear_id_card_address() {
  if (id_card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_address_->clear();
  }
  clear_has_id_card_address();
}
inline const ::std::string& user_basic_info::id_card_address() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.id_card_address)
  return *id_card_address_;
}
inline void user_basic_info::set_id_card_address(const ::std::string& value) {
  set_has_id_card_address();
  if (id_card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_address_ = new ::std::string;
  }
  id_card_address_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.id_card_address)
}
inline void user_basic_info::set_id_card_address(const char* value) {
  set_has_id_card_address();
  if (id_card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_address_ = new ::std::string;
  }
  id_card_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.id_card_address)
}
inline void user_basic_info::set_id_card_address(const void* value, size_t size) {
  set_has_id_card_address();
  if (id_card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_address_ = new ::std::string;
  }
  id_card_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.id_card_address)
}
inline ::std::string* user_basic_info::mutable_id_card_address() {
  set_has_id_card_address();
  if (id_card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.id_card_address)
  return id_card_address_;
}
inline ::std::string* user_basic_info::release_id_card_address() {
  clear_has_id_card_address();
  if (id_card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_address_;
    id_card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_id_card_address(::std::string* id_card_address) {
  if (id_card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_address_;
  }
  if (id_card_address) {
    set_has_id_card_address();
    id_card_address_ = id_card_address;
  } else {
    clear_has_id_card_address();
    id_card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.id_card_address)
}

// optional bytes living_province = 7;
inline bool user_basic_info::has_living_province() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_basic_info::set_has_living_province() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_basic_info::clear_has_living_province() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_basic_info::clear_living_province() {
  if (living_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_province_->clear();
  }
  clear_has_living_province();
}
inline const ::std::string& user_basic_info::living_province() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.living_province)
  return *living_province_;
}
inline void user_basic_info::set_living_province(const ::std::string& value) {
  set_has_living_province();
  if (living_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_province_ = new ::std::string;
  }
  living_province_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.living_province)
}
inline void user_basic_info::set_living_province(const char* value) {
  set_has_living_province();
  if (living_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_province_ = new ::std::string;
  }
  living_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.living_province)
}
inline void user_basic_info::set_living_province(const void* value, size_t size) {
  set_has_living_province();
  if (living_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_province_ = new ::std::string;
  }
  living_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.living_province)
}
inline ::std::string* user_basic_info::mutable_living_province() {
  set_has_living_province();
  if (living_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.living_province)
  return living_province_;
}
inline ::std::string* user_basic_info::release_living_province() {
  clear_has_living_province();
  if (living_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = living_province_;
    living_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_living_province(::std::string* living_province) {
  if (living_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_province_;
  }
  if (living_province) {
    set_has_living_province();
    living_province_ = living_province;
  } else {
    clear_has_living_province();
    living_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.living_province)
}

// optional bytes living_city = 8;
inline bool user_basic_info::has_living_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_basic_info::set_has_living_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_basic_info::clear_has_living_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_basic_info::clear_living_city() {
  if (living_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_city_->clear();
  }
  clear_has_living_city();
}
inline const ::std::string& user_basic_info::living_city() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.living_city)
  return *living_city_;
}
inline void user_basic_info::set_living_city(const ::std::string& value) {
  set_has_living_city();
  if (living_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_city_ = new ::std::string;
  }
  living_city_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.living_city)
}
inline void user_basic_info::set_living_city(const char* value) {
  set_has_living_city();
  if (living_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_city_ = new ::std::string;
  }
  living_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.living_city)
}
inline void user_basic_info::set_living_city(const void* value, size_t size) {
  set_has_living_city();
  if (living_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_city_ = new ::std::string;
  }
  living_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.living_city)
}
inline ::std::string* user_basic_info::mutable_living_city() {
  set_has_living_city();
  if (living_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.living_city)
  return living_city_;
}
inline ::std::string* user_basic_info::release_living_city() {
  clear_has_living_city();
  if (living_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = living_city_;
    living_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_living_city(::std::string* living_city) {
  if (living_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_city_;
  }
  if (living_city) {
    set_has_living_city();
    living_city_ = living_city;
  } else {
    clear_has_living_city();
    living_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.living_city)
}

// optional bytes living_address = 9;
inline bool user_basic_info::has_living_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_basic_info::set_has_living_address() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_basic_info::clear_has_living_address() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_basic_info::clear_living_address() {
  if (living_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_address_->clear();
  }
  clear_has_living_address();
}
inline const ::std::string& user_basic_info::living_address() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info.living_address)
  return *living_address_;
}
inline void user_basic_info::set_living_address(const ::std::string& value) {
  set_has_living_address();
  if (living_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_address_ = new ::std::string;
  }
  living_address_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info.living_address)
}
inline void user_basic_info::set_living_address(const char* value) {
  set_has_living_address();
  if (living_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_address_ = new ::std::string;
  }
  living_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info.living_address)
}
inline void user_basic_info::set_living_address(const void* value, size_t size) {
  set_has_living_address();
  if (living_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_address_ = new ::std::string;
  }
  living_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info.living_address)
}
inline ::std::string* user_basic_info::mutable_living_address() {
  set_has_living_address();
  if (living_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    living_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info.living_address)
  return living_address_;
}
inline ::std::string* user_basic_info::release_living_address() {
  clear_has_living_address();
  if (living_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = living_address_;
    living_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info::set_allocated_living_address(::std::string* living_address) {
  if (living_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete living_address_;
  }
  if (living_address) {
    set_has_living_address();
    living_address_ = living_address;
  } else {
    clear_has_living_address();
    living_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info.living_address)
}

// -------------------------------------------------------------------

// label_users_ans

// repeated .UPS_niiwoo.user_basic_info users = 1;
inline int label_users_ans::users_size() const {
  return users_.size();
}
inline void label_users_ans::clear_users() {
  users_.Clear();
}
inline const ::UPS_niiwoo::user_basic_info& label_users_ans::users(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ans.users)
  return users_.Get(index);
}
inline ::UPS_niiwoo::user_basic_info* label_users_ans::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_users_ans.users)
  return users_.Mutable(index);
}
inline ::UPS_niiwoo::user_basic_info* label_users_ans::add_users() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_users_ans.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_basic_info >&
label_users_ans::users() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_users_ans.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_basic_info >*
label_users_ans::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_users_ans.users)
  return &users_;
}

// optional int32 total_number = 2;
inline bool label_users_ans::has_total_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_users_ans::set_has_total_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_users_ans::clear_has_total_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_users_ans::clear_total_number() {
  total_number_ = 0;
  clear_has_total_number();
}
inline ::google::protobuf::int32 label_users_ans::total_number() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ans.total_number)
  return total_number_;
}
inline void label_users_ans::set_total_number(::google::protobuf::int32 value) {
  set_has_total_number();
  total_number_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_users_ans.total_number)
}

// optional .common.result_info result = 3;
inline bool label_users_ans::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void label_users_ans::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void label_users_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void label_users_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& label_users_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_users_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* label_users_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_users_ans.result)
  return result_;
}
inline ::common::result_info* label_users_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void label_users_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_users_ans.result)
}

// -------------------------------------------------------------------

// user_avatar_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_avatar_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_avatar_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_avatar_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_avatar_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_avatar_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_avatar_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_avatar_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_avatar_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_avatar_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_avatar_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_avatar_ask.ask_header)
}

// optional int32 num = 2;
inline bool user_avatar_ask::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_avatar_ask::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_avatar_ask::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_avatar_ask::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 user_avatar_ask::num() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_avatar_ask.num)
  return num_;
}
inline void user_avatar_ask::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_avatar_ask.num)
}

// -------------------------------------------------------------------

// user_avatar_ans

// repeated bytes avatars = 1;
inline int user_avatar_ans::avatars_size() const {
  return avatars_.size();
}
inline void user_avatar_ans::clear_avatars() {
  avatars_.Clear();
}
inline const ::std::string& user_avatar_ans::avatars(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_avatar_ans.avatars)
  return avatars_.Get(index);
}
inline ::std::string* user_avatar_ans::mutable_avatars(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_avatar_ans.avatars)
  return avatars_.Mutable(index);
}
inline void user_avatar_ans::set_avatars(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_avatar_ans.avatars)
  avatars_.Mutable(index)->assign(value);
}
inline void user_avatar_ans::set_avatars(int index, const char* value) {
  avatars_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_avatar_ans.avatars)
}
inline void user_avatar_ans::set_avatars(int index, const void* value, size_t size) {
  avatars_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_avatar_ans.avatars)
}
inline ::std::string* user_avatar_ans::add_avatars() {
  return avatars_.Add();
}
inline void user_avatar_ans::add_avatars(const ::std::string& value) {
  avatars_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_avatar_ans.avatars)
}
inline void user_avatar_ans::add_avatars(const char* value) {
  avatars_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UPS_niiwoo.user_avatar_ans.avatars)
}
inline void user_avatar_ans::add_avatars(const void* value, size_t size) {
  avatars_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UPS_niiwoo.user_avatar_ans.avatars)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
user_avatar_ans::avatars() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_avatar_ans.avatars)
  return avatars_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
user_avatar_ans::mutable_avatars() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_avatar_ans.avatars)
  return &avatars_;
}

// optional .common.result_info result = 2;
inline bool user_avatar_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_avatar_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_avatar_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_avatar_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_avatar_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_avatar_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_avatar_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_avatar_ans.result)
  return result_;
}
inline ::common::result_info* user_avatar_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_avatar_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_avatar_ans.result)
}

// -------------------------------------------------------------------

// income_source

// optional int32 sourceType = 1;
inline bool income_source::has_sourcetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void income_source::set_has_sourcetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void income_source::clear_has_sourcetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void income_source::clear_sourcetype() {
  sourcetype_ = 0;
  clear_has_sourcetype();
}
inline ::google::protobuf::int32 income_source::sourcetype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.income_source.sourceType)
  return sourcetype_;
}
inline void income_source::set_sourcetype(::google::protobuf::int32 value) {
  set_has_sourcetype();
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.income_source.sourceType)
}

// optional int32 monthAvg = 2;
inline bool income_source::has_monthavg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void income_source::set_has_monthavg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void income_source::clear_has_monthavg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void income_source::clear_monthavg() {
  monthavg_ = 0;
  clear_has_monthavg();
}
inline ::google::protobuf::int32 income_source::monthavg() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.income_source.monthAvg)
  return monthavg_;
}
inline void income_source::set_monthavg(::google::protobuf::int32 value) {
  set_has_monthavg();
  monthavg_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.income_source.monthAvg)
}

// optional bytes LastUpdateTime = 3;
inline bool income_source::has_lastupdatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void income_source::set_has_lastupdatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void income_source::clear_has_lastupdatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void income_source::clear_lastupdatetime() {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_->clear();
  }
  clear_has_lastupdatetime();
}
inline const ::std::string& income_source::lastupdatetime() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.income_source.LastUpdateTime)
  return *lastupdatetime_;
}
inline void income_source::set_lastupdatetime(const ::std::string& value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.income_source.LastUpdateTime)
}
inline void income_source::set_lastupdatetime(const char* value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.income_source.LastUpdateTime)
}
inline void income_source::set_lastupdatetime(const void* value, size_t size) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.income_source.LastUpdateTime)
}
inline ::std::string* income_source::mutable_lastupdatetime() {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.income_source.LastUpdateTime)
  return lastupdatetime_;
}
inline ::std::string* income_source::release_lastupdatetime() {
  clear_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastupdatetime_;
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void income_source::set_allocated_lastupdatetime(::std::string* lastupdatetime) {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (lastupdatetime) {
    set_has_lastupdatetime();
    lastupdatetime_ = lastupdatetime;
  } else {
    clear_has_lastupdatetime();
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.income_source.LastUpdateTime)
}

// -------------------------------------------------------------------

// user_house_info

// optional int32 HouseType = 1;
inline bool user_house_info::has_housetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_house_info::set_has_housetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_house_info::clear_has_housetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_house_info::clear_housetype() {
  housetype_ = 0;
  clear_has_housetype();
}
inline ::google::protobuf::int32 user_house_info::housetype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseType)
  return housetype_;
}
inline void user_house_info::set_housetype(::google::protobuf::int32 value) {
  set_has_housetype();
  housetype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseType)
}

// optional int32 Mortgage = 2;
inline bool user_house_info::has_mortgage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_house_info::set_has_mortgage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_house_info::clear_has_mortgage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_house_info::clear_mortgage() {
  mortgage_ = 0;
  clear_has_mortgage();
}
inline ::google::protobuf::int32 user_house_info::mortgage() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.Mortgage)
  return mortgage_;
}
inline void user_house_info::set_mortgage(::google::protobuf::int32 value) {
  set_has_mortgage();
  mortgage_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.Mortgage)
}

// optional double HouseAmount = 3;
inline bool user_house_info::has_houseamount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_house_info::set_has_houseamount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_house_info::clear_has_houseamount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_house_info::clear_houseamount() {
  houseamount_ = 0;
  clear_has_houseamount();
}
inline double user_house_info::houseamount() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseAmount)
  return houseamount_;
}
inline void user_house_info::set_houseamount(double value) {
  set_has_houseamount();
  houseamount_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseAmount)
}

// optional double HouseSize = 4;
inline bool user_house_info::has_housesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_house_info::set_has_housesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_house_info::clear_has_housesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_house_info::clear_housesize() {
  housesize_ = 0;
  clear_has_housesize();
}
inline double user_house_info::housesize() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseSize)
  return housesize_;
}
inline void user_house_info::set_housesize(double value) {
  set_has_housesize();
  housesize_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseSize)
}

// optional double MortgageAmount = 5;
inline bool user_house_info::has_mortgageamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_house_info::set_has_mortgageamount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_house_info::clear_has_mortgageamount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_house_info::clear_mortgageamount() {
  mortgageamount_ = 0;
  clear_has_mortgageamount();
}
inline double user_house_info::mortgageamount() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.MortgageAmount)
  return mortgageamount_;
}
inline void user_house_info::set_mortgageamount(double value) {
  set_has_mortgageamount();
  mortgageamount_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.MortgageAmount)
}

// optional int32 Mortgageterm = 6;
inline bool user_house_info::has_mortgageterm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_house_info::set_has_mortgageterm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_house_info::clear_has_mortgageterm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_house_info::clear_mortgageterm() {
  mortgageterm_ = 0;
  clear_has_mortgageterm();
}
inline ::google::protobuf::int32 user_house_info::mortgageterm() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.Mortgageterm)
  return mortgageterm_;
}
inline void user_house_info::set_mortgageterm(::google::protobuf::int32 value) {
  set_has_mortgageterm();
  mortgageterm_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.Mortgageterm)
}

// optional int32 HouseLoan = 7;
inline bool user_house_info::has_houseloan() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_house_info::set_has_houseloan() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_house_info::clear_has_houseloan() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_house_info::clear_houseloan() {
  houseloan_ = 0;
  clear_has_houseloan();
}
inline ::google::protobuf::int32 user_house_info::houseloan() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseLoan)
  return houseloan_;
}
inline void user_house_info::set_houseloan(::google::protobuf::int32 value) {
  set_has_houseloan();
  houseloan_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseLoan)
}

// optional bytes HouseProvince = 8;
inline bool user_house_info::has_houseprovince() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_house_info::set_has_houseprovince() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_house_info::clear_has_houseprovince() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_house_info::clear_houseprovince() {
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_->clear();
  }
  clear_has_houseprovince();
}
inline const ::std::string& user_house_info::houseprovince() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseProvince)
  return *houseprovince_;
}
inline void user_house_info::set_houseprovince(const ::std::string& value) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseProvince)
}
inline void user_house_info::set_houseprovince(const char* value) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_house_info.HouseProvince)
}
inline void user_house_info::set_houseprovince(const void* value, size_t size) {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  houseprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_house_info.HouseProvince)
}
inline ::std::string* user_house_info::mutable_houseprovince() {
  set_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_house_info.HouseProvince)
  return houseprovince_;
}
inline ::std::string* user_house_info::release_houseprovince() {
  clear_has_houseprovince();
  if (houseprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = houseprovince_;
    houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_house_info::set_allocated_houseprovince(::std::string* houseprovince) {
  if (houseprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseprovince_;
  }
  if (houseprovince) {
    set_has_houseprovince();
    houseprovince_ = houseprovince;
  } else {
    clear_has_houseprovince();
    houseprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_house_info.HouseProvince)
}

// optional bytes HouseCity = 9;
inline bool user_house_info::has_housecity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_house_info::set_has_housecity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_house_info::clear_has_housecity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_house_info::clear_housecity() {
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_->clear();
  }
  clear_has_housecity();
}
inline const ::std::string& user_house_info::housecity() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseCity)
  return *housecity_;
}
inline void user_house_info::set_housecity(const ::std::string& value) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseCity)
}
inline void user_house_info::set_housecity(const char* value) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_house_info.HouseCity)
}
inline void user_house_info::set_housecity(const void* value, size_t size) {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  housecity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_house_info.HouseCity)
}
inline ::std::string* user_house_info::mutable_housecity() {
  set_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housecity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_house_info.HouseCity)
  return housecity_;
}
inline ::std::string* user_house_info::release_housecity() {
  clear_has_housecity();
  if (housecity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housecity_;
    housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_house_info::set_allocated_housecity(::std::string* housecity) {
  if (housecity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housecity_;
  }
  if (housecity) {
    set_has_housecity();
    housecity_ = housecity;
  } else {
    clear_has_housecity();
    housecity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_house_info.HouseCity)
}

// optional bytes HouseArea = 10;
inline bool user_house_info::has_housearea() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_house_info::set_has_housearea() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_house_info::clear_has_housearea() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_house_info::clear_housearea() {
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_->clear();
  }
  clear_has_housearea();
}
inline const ::std::string& user_house_info::housearea() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseArea)
  return *housearea_;
}
inline void user_house_info::set_housearea(const ::std::string& value) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseArea)
}
inline void user_house_info::set_housearea(const char* value) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_house_info.HouseArea)
}
inline void user_house_info::set_housearea(const void* value, size_t size) {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  housearea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_house_info.HouseArea)
}
inline ::std::string* user_house_info::mutable_housearea() {
  set_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    housearea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_house_info.HouseArea)
  return housearea_;
}
inline ::std::string* user_house_info::release_housearea() {
  clear_has_housearea();
  if (housearea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = housearea_;
    housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_house_info::set_allocated_housearea(::std::string* housearea) {
  if (housearea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete housearea_;
  }
  if (housearea) {
    set_has_housearea();
    housearea_ = housearea;
  } else {
    clear_has_housearea();
    housearea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_house_info.HouseArea)
}

// optional bytes HouseAddress = 11;
inline bool user_house_info::has_houseaddress() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_house_info::set_has_houseaddress() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_house_info::clear_has_houseaddress() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_house_info::clear_houseaddress() {
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_->clear();
  }
  clear_has_houseaddress();
}
inline const ::std::string& user_house_info::houseaddress() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.HouseAddress)
  return *houseaddress_;
}
inline void user_house_info::set_houseaddress(const ::std::string& value) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.HouseAddress)
}
inline void user_house_info::set_houseaddress(const char* value) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_house_info.HouseAddress)
}
inline void user_house_info::set_houseaddress(const void* value, size_t size) {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  houseaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_house_info.HouseAddress)
}
inline ::std::string* user_house_info::mutable_houseaddress() {
  set_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    houseaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_house_info.HouseAddress)
  return houseaddress_;
}
inline ::std::string* user_house_info::release_houseaddress() {
  clear_has_houseaddress();
  if (houseaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = houseaddress_;
    houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_house_info::set_allocated_houseaddress(::std::string* houseaddress) {
  if (houseaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete houseaddress_;
  }
  if (houseaddress) {
    set_has_houseaddress();
    houseaddress_ = houseaddress;
  } else {
    clear_has_houseaddress();
    houseaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_house_info.HouseAddress)
}

// optional bytes LastUpdateTime = 12;
inline bool user_house_info::has_lastupdatetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_house_info::set_has_lastupdatetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_house_info::clear_has_lastupdatetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_house_info::clear_lastupdatetime() {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_->clear();
  }
  clear_has_lastupdatetime();
}
inline const ::std::string& user_house_info::lastupdatetime() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_house_info.LastUpdateTime)
  return *lastupdatetime_;
}
inline void user_house_info::set_lastupdatetime(const ::std::string& value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_house_info.LastUpdateTime)
}
inline void user_house_info::set_lastupdatetime(const char* value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_house_info.LastUpdateTime)
}
inline void user_house_info::set_lastupdatetime(const void* value, size_t size) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_house_info.LastUpdateTime)
}
inline ::std::string* user_house_info::mutable_lastupdatetime() {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_house_info.LastUpdateTime)
  return lastupdatetime_;
}
inline ::std::string* user_house_info::release_lastupdatetime() {
  clear_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastupdatetime_;
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_house_info::set_allocated_lastupdatetime(::std::string* lastupdatetime) {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (lastupdatetime) {
    set_has_lastupdatetime();
    lastupdatetime_ = lastupdatetime;
  } else {
    clear_has_lastupdatetime();
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_house_info.LastUpdateTime)
}

// -------------------------------------------------------------------

// user_car_info

// optional bytes CarPlate = 1;
inline bool user_car_info::has_carplate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_car_info::set_has_carplate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_car_info::clear_has_carplate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_car_info::clear_carplate() {
  if (carplate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carplate_->clear();
  }
  clear_has_carplate();
}
inline const ::std::string& user_car_info::carplate() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.CarPlate)
  return *carplate_;
}
inline void user_car_info::set_carplate(const ::std::string& value) {
  set_has_carplate();
  if (carplate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carplate_ = new ::std::string;
  }
  carplate_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.CarPlate)
}
inline void user_car_info::set_carplate(const char* value) {
  set_has_carplate();
  if (carplate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carplate_ = new ::std::string;
  }
  carplate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_car_info.CarPlate)
}
inline void user_car_info::set_carplate(const void* value, size_t size) {
  set_has_carplate();
  if (carplate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carplate_ = new ::std::string;
  }
  carplate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_car_info.CarPlate)
}
inline ::std::string* user_car_info::mutable_carplate() {
  set_has_carplate();
  if (carplate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carplate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_car_info.CarPlate)
  return carplate_;
}
inline ::std::string* user_car_info::release_carplate() {
  clear_has_carplate();
  if (carplate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = carplate_;
    carplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_car_info::set_allocated_carplate(::std::string* carplate) {
  if (carplate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carplate_;
  }
  if (carplate) {
    set_has_carplate();
    carplate_ = carplate;
  } else {
    clear_has_carplate();
    carplate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_car_info.CarPlate)
}

// optional int32 Carloans = 2;
inline bool user_car_info::has_carloans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_car_info::set_has_carloans() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_car_info::clear_has_carloans() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_car_info::clear_carloans() {
  carloans_ = 0;
  clear_has_carloans();
}
inline ::google::protobuf::int32 user_car_info::carloans() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.Carloans)
  return carloans_;
}
inline void user_car_info::set_carloans(::google::protobuf::int32 value) {
  set_has_carloans();
  carloans_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.Carloans)
}

// optional bytes CarBrand = 3;
inline bool user_car_info::has_carbrand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_car_info::set_has_carbrand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_car_info::clear_has_carbrand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_car_info::clear_carbrand() {
  if (carbrand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carbrand_->clear();
  }
  clear_has_carbrand();
}
inline const ::std::string& user_car_info::carbrand() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.CarBrand)
  return *carbrand_;
}
inline void user_car_info::set_carbrand(const ::std::string& value) {
  set_has_carbrand();
  if (carbrand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carbrand_ = new ::std::string;
  }
  carbrand_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.CarBrand)
}
inline void user_car_info::set_carbrand(const char* value) {
  set_has_carbrand();
  if (carbrand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carbrand_ = new ::std::string;
  }
  carbrand_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_car_info.CarBrand)
}
inline void user_car_info::set_carbrand(const void* value, size_t size) {
  set_has_carbrand();
  if (carbrand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carbrand_ = new ::std::string;
  }
  carbrand_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_car_info.CarBrand)
}
inline ::std::string* user_car_info::mutable_carbrand() {
  set_has_carbrand();
  if (carbrand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    carbrand_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_car_info.CarBrand)
  return carbrand_;
}
inline ::std::string* user_car_info::release_carbrand() {
  clear_has_carbrand();
  if (carbrand_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = carbrand_;
    carbrand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_car_info::set_allocated_carbrand(::std::string* carbrand) {
  if (carbrand_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete carbrand_;
  }
  if (carbrand) {
    set_has_carbrand();
    carbrand_ = carbrand;
  } else {
    clear_has_carbrand();
    carbrand_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_car_info.CarBrand)
}

// optional int32 CarAge = 4;
inline bool user_car_info::has_carage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_car_info::set_has_carage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_car_info::clear_has_carage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_car_info::clear_carage() {
  carage_ = 0;
  clear_has_carage();
}
inline ::google::protobuf::int32 user_car_info::carage() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.CarAge)
  return carage_;
}
inline void user_car_info::set_carage(::google::protobuf::int32 value) {
  set_has_carage();
  carage_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.CarAge)
}

// optional double CarAmount = 5;
inline bool user_car_info::has_caramount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_car_info::set_has_caramount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_car_info::clear_has_caramount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_car_info::clear_caramount() {
  caramount_ = 0;
  clear_has_caramount();
}
inline double user_car_info::caramount() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.CarAmount)
  return caramount_;
}
inline void user_car_info::set_caramount(double value) {
  set_has_caramount();
  caramount_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.CarAmount)
}

// optional double CarloansAmount = 6;
inline bool user_car_info::has_carloansamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_car_info::set_has_carloansamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_car_info::clear_has_carloansamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_car_info::clear_carloansamount() {
  carloansamount_ = 0;
  clear_has_carloansamount();
}
inline double user_car_info::carloansamount() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.CarloansAmount)
  return carloansamount_;
}
inline void user_car_info::set_carloansamount(double value) {
  set_has_carloansamount();
  carloansamount_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.CarloansAmount)
}

// optional int32 Carloansterm = 7;
inline bool user_car_info::has_carloansterm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_car_info::set_has_carloansterm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_car_info::clear_has_carloansterm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_car_info::clear_carloansterm() {
  carloansterm_ = 0;
  clear_has_carloansterm();
}
inline ::google::protobuf::int32 user_car_info::carloansterm() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.Carloansterm)
  return carloansterm_;
}
inline void user_car_info::set_carloansterm(::google::protobuf::int32 value) {
  set_has_carloansterm();
  carloansterm_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.Carloansterm)
}

// optional bytes LastUpdateTime = 9;
inline bool user_car_info::has_lastupdatetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_car_info::set_has_lastupdatetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_car_info::clear_has_lastupdatetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_car_info::clear_lastupdatetime() {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_->clear();
  }
  clear_has_lastupdatetime();
}
inline const ::std::string& user_car_info::lastupdatetime() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_car_info.LastUpdateTime)
  return *lastupdatetime_;
}
inline void user_car_info::set_lastupdatetime(const ::std::string& value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_car_info.LastUpdateTime)
}
inline void user_car_info::set_lastupdatetime(const char* value) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_car_info.LastUpdateTime)
}
inline void user_car_info::set_lastupdatetime(const void* value, size_t size) {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_car_info.LastUpdateTime)
}
inline ::std::string* user_car_info::mutable_lastupdatetime() {
  set_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastupdatetime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_car_info.LastUpdateTime)
  return lastupdatetime_;
}
inline ::std::string* user_car_info::release_lastupdatetime() {
  clear_has_lastupdatetime();
  if (lastupdatetime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastupdatetime_;
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_car_info::set_allocated_lastupdatetime(::std::string* lastupdatetime) {
  if (lastupdatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastupdatetime_;
  }
  if (lastupdatetime) {
    set_has_lastupdatetime();
    lastupdatetime_ = lastupdatetime;
  } else {
    clear_has_lastupdatetime();
    lastupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_car_info.LastUpdateTime)
}

// -------------------------------------------------------------------

// user_basic_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_basic_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_basic_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_basic_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_basic_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_basic_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ask.ask_header)
}

// optional bytes id_card = 2;
inline bool user_basic_info_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& user_basic_info_ask::id_card() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ask.id_card)
  return *id_card_;
}
inline void user_basic_info_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ask.id_card)
}
inline void user_basic_info_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ask.id_card)
}
inline void user_basic_info_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ask.id_card)
}
inline ::std::string* user_basic_info_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ask.id_card)
  return id_card_;
}
inline ::std::string* user_basic_info_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ask.id_card)
}

// optional bytes mobile_phone = 3;
inline bool user_basic_info_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_basic_info_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_basic_info_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_basic_info_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_basic_info_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_basic_info_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ask.mobile_phone)
}
inline void user_basic_info_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ask.mobile_phone)
}
inline void user_basic_info_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ask.mobile_phone)
}
inline ::std::string* user_basic_info_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_basic_info_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ask.mobile_phone)
}

// -------------------------------------------------------------------

// user_basic_info_ans

// optional bytes UserId = 99;
inline bool user_basic_info_ans::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_basic_info_ans::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_basic_info_ans::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_basic_info_ans::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& user_basic_info_ans::userid() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserId)
  return *userid_;
}
inline void user_basic_info_ans::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.UserId)
}
inline void user_basic_info_ans::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.UserId)
}
inline void user_basic_info_ans::set_userid(const void* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.UserId)
}
inline ::std::string* user_basic_info_ans::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.UserId)
  return userid_;
}
inline ::std::string* user_basic_info_ans::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.UserId)
}

// optional bytes usernickname = 1;
inline bool user_basic_info_ans::has_usernickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_basic_info_ans::set_has_usernickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_basic_info_ans::clear_has_usernickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_basic_info_ans::clear_usernickname() {
  if (usernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usernickname_->clear();
  }
  clear_has_usernickname();
}
inline const ::std::string& user_basic_info_ans::usernickname() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.usernickname)
  return *usernickname_;
}
inline void user_basic_info_ans::set_usernickname(const ::std::string& value) {
  set_has_usernickname();
  if (usernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usernickname_ = new ::std::string;
  }
  usernickname_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.usernickname)
}
inline void user_basic_info_ans::set_usernickname(const char* value) {
  set_has_usernickname();
  if (usernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usernickname_ = new ::std::string;
  }
  usernickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.usernickname)
}
inline void user_basic_info_ans::set_usernickname(const void* value, size_t size) {
  set_has_usernickname();
  if (usernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usernickname_ = new ::std::string;
  }
  usernickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.usernickname)
}
inline ::std::string* user_basic_info_ans::mutable_usernickname() {
  set_has_usernickname();
  if (usernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usernickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.usernickname)
  return usernickname_;
}
inline ::std::string* user_basic_info_ans::release_usernickname() {
  clear_has_usernickname();
  if (usernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usernickname_;
    usernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_usernickname(::std::string* usernickname) {
  if (usernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usernickname_;
  }
  if (usernickname) {
    set_has_usernickname();
    usernickname_ = usernickname;
  } else {
    clear_has_usernickname();
    usernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.usernickname)
}

// optional bytes UserRealName = 2;
inline bool user_basic_info_ans::has_userrealname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_basic_info_ans::set_has_userrealname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_basic_info_ans::clear_has_userrealname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_basic_info_ans::clear_userrealname() {
  if (userrealname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrealname_->clear();
  }
  clear_has_userrealname();
}
inline const ::std::string& user_basic_info_ans::userrealname() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserRealName)
  return *userrealname_;
}
inline void user_basic_info_ans::set_userrealname(const ::std::string& value) {
  set_has_userrealname();
  if (userrealname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrealname_ = new ::std::string;
  }
  userrealname_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.UserRealName)
}
inline void user_basic_info_ans::set_userrealname(const char* value) {
  set_has_userrealname();
  if (userrealname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrealname_ = new ::std::string;
  }
  userrealname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.UserRealName)
}
inline void user_basic_info_ans::set_userrealname(const void* value, size_t size) {
  set_has_userrealname();
  if (userrealname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrealname_ = new ::std::string;
  }
  userrealname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.UserRealName)
}
inline ::std::string* user_basic_info_ans::mutable_userrealname() {
  set_has_userrealname();
  if (userrealname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userrealname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.UserRealName)
  return userrealname_;
}
inline ::std::string* user_basic_info_ans::release_userrealname() {
  clear_has_userrealname();
  if (userrealname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userrealname_;
    userrealname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_userrealname(::std::string* userrealname) {
  if (userrealname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userrealname_;
  }
  if (userrealname) {
    set_has_userrealname();
    userrealname_ = userrealname;
  } else {
    clear_has_userrealname();
    userrealname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.UserRealName)
}

// optional bytes Avatar = 60;
inline bool user_basic_info_ans::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_basic_info_ans::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_basic_info_ans::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_basic_info_ans::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& user_basic_info_ans::avatar() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Avatar)
  return *avatar_;
}
inline void user_basic_info_ans::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Avatar)
}
inline void user_basic_info_ans::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Avatar)
}
inline void user_basic_info_ans::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Avatar)
}
inline ::std::string* user_basic_info_ans::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Avatar)
  return avatar_;
}
inline ::std::string* user_basic_info_ans::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Avatar)
}

// optional int32 age = 3;
inline bool user_basic_info_ans::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_basic_info_ans::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_basic_info_ans::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_basic_info_ans::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 user_basic_info_ans::age() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.age)
  return age_;
}
inline void user_basic_info_ans::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.age)
}

// optional int32 sex = 4;
inline bool user_basic_info_ans::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_basic_info_ans::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_basic_info_ans::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_basic_info_ans::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 user_basic_info_ans::sex() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.sex)
  return sex_;
}
inline void user_basic_info_ans::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.sex)
}

// optional int32 UserStatus = 66;
inline bool user_basic_info_ans::has_userstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_basic_info_ans::set_has_userstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_basic_info_ans::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_basic_info_ans::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 user_basic_info_ans::userstatus() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserStatus)
  return userstatus_;
}
inline void user_basic_info_ans::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.UserStatus)
}

// optional double lateCharge = 61;
inline bool user_basic_info_ans::has_latecharge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_basic_info_ans::set_has_latecharge() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_basic_info_ans::clear_has_latecharge() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_basic_info_ans::clear_latecharge() {
  latecharge_ = 0;
  clear_has_latecharge();
}
inline double user_basic_info_ans::latecharge() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.lateCharge)
  return latecharge_;
}
inline void user_basic_info_ans::set_latecharge(double value) {
  set_has_latecharge();
  latecharge_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.lateCharge)
}

// optional double advanceAmount = 62;
inline bool user_basic_info_ans::has_advanceamount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_basic_info_ans::set_has_advanceamount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_basic_info_ans::clear_has_advanceamount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_basic_info_ans::clear_advanceamount() {
  advanceamount_ = 0;
  clear_has_advanceamount();
}
inline double user_basic_info_ans::advanceamount() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.advanceAmount)
  return advanceamount_;
}
inline void user_basic_info_ans::set_advanceamount(double value) {
  set_has_advanceamount();
  advanceamount_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.advanceAmount)
}

// optional int32 lateCnt = 63;
inline bool user_basic_info_ans::has_latecnt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_basic_info_ans::set_has_latecnt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_basic_info_ans::clear_has_latecnt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_basic_info_ans::clear_latecnt() {
  latecnt_ = 0;
  clear_has_latecnt();
}
inline ::google::protobuf::int32 user_basic_info_ans::latecnt() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.lateCnt)
  return latecnt_;
}
inline void user_basic_info_ans::set_latecnt(::google::protobuf::int32 value) {
  set_has_latecnt();
  latecnt_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.lateCnt)
}

// optional int32 advanceAmountCnt = 64;
inline bool user_basic_info_ans::has_advanceamountcnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_basic_info_ans::set_has_advanceamountcnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_basic_info_ans::clear_has_advanceamountcnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_basic_info_ans::clear_advanceamountcnt() {
  advanceamountcnt_ = 0;
  clear_has_advanceamountcnt();
}
inline ::google::protobuf::int32 user_basic_info_ans::advanceamountcnt() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.advanceAmountCnt)
  return advanceamountcnt_;
}
inline void user_basic_info_ans::set_advanceamountcnt(::google::protobuf::int32 value) {
  set_has_advanceamountcnt();
  advanceamountcnt_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.advanceAmountCnt)
}

// optional bytes MobilePhone = 8;
inline bool user_basic_info_ans::has_mobilephone() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_basic_info_ans::set_has_mobilephone() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_basic_info_ans::clear_has_mobilephone() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_basic_info_ans::clear_mobilephone() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_->clear();
  }
  clear_has_mobilephone();
}
inline const ::std::string& user_basic_info_ans::mobilephone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.MobilePhone)
  return *mobilephone_;
}
inline void user_basic_info_ans::set_mobilephone(const ::std::string& value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.MobilePhone)
}
inline void user_basic_info_ans::set_mobilephone(const char* value) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.MobilePhone)
}
inline void user_basic_info_ans::set_mobilephone(const void* value, size_t size) {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  mobilephone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.MobilePhone)
}
inline ::std::string* user_basic_info_ans::mutable_mobilephone() {
  set_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilephone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.MobilePhone)
  return mobilephone_;
}
inline ::std::string* user_basic_info_ans::release_mobilephone() {
  clear_has_mobilephone();
  if (mobilephone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilephone_;
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_mobilephone(::std::string* mobilephone) {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (mobilephone) {
    set_has_mobilephone();
    mobilephone_ = mobilephone;
  } else {
    clear_has_mobilephone();
    mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.MobilePhone)
}

// optional bytes UserIDCard = 9;
inline bool user_basic_info_ans::has_useridcard() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_basic_info_ans::set_has_useridcard() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_basic_info_ans::clear_has_useridcard() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_basic_info_ans::clear_useridcard() {
  if (useridcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useridcard_->clear();
  }
  clear_has_useridcard();
}
inline const ::std::string& user_basic_info_ans::useridcard() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserIDCard)
  return *useridcard_;
}
inline void user_basic_info_ans::set_useridcard(const ::std::string& value) {
  set_has_useridcard();
  if (useridcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useridcard_ = new ::std::string;
  }
  useridcard_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.UserIDCard)
}
inline void user_basic_info_ans::set_useridcard(const char* value) {
  set_has_useridcard();
  if (useridcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useridcard_ = new ::std::string;
  }
  useridcard_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.UserIDCard)
}
inline void user_basic_info_ans::set_useridcard(const void* value, size_t size) {
  set_has_useridcard();
  if (useridcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useridcard_ = new ::std::string;
  }
  useridcard_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.UserIDCard)
}
inline ::std::string* user_basic_info_ans::mutable_useridcard() {
  set_has_useridcard();
  if (useridcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    useridcard_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.UserIDCard)
  return useridcard_;
}
inline ::std::string* user_basic_info_ans::release_useridcard() {
  clear_has_useridcard();
  if (useridcard_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = useridcard_;
    useridcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_useridcard(::std::string* useridcard) {
  if (useridcard_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete useridcard_;
  }
  if (useridcard) {
    set_has_useridcard();
    useridcard_ = useridcard;
  } else {
    clear_has_useridcard();
    useridcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.UserIDCard)
}

// optional bytes phonePlace = 10;
inline bool user_basic_info_ans::has_phoneplace() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void user_basic_info_ans::set_has_phoneplace() {
  _has_bits_[0] |= 0x00002000u;
}
inline void user_basic_info_ans::clear_has_phoneplace() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void user_basic_info_ans::clear_phoneplace() {
  if (phoneplace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phoneplace_->clear();
  }
  clear_has_phoneplace();
}
inline const ::std::string& user_basic_info_ans::phoneplace() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.phonePlace)
  return *phoneplace_;
}
inline void user_basic_info_ans::set_phoneplace(const ::std::string& value) {
  set_has_phoneplace();
  if (phoneplace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phoneplace_ = new ::std::string;
  }
  phoneplace_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.phonePlace)
}
inline void user_basic_info_ans::set_phoneplace(const char* value) {
  set_has_phoneplace();
  if (phoneplace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phoneplace_ = new ::std::string;
  }
  phoneplace_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.phonePlace)
}
inline void user_basic_info_ans::set_phoneplace(const void* value, size_t size) {
  set_has_phoneplace();
  if (phoneplace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phoneplace_ = new ::std::string;
  }
  phoneplace_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.phonePlace)
}
inline ::std::string* user_basic_info_ans::mutable_phoneplace() {
  set_has_phoneplace();
  if (phoneplace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phoneplace_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.phonePlace)
  return phoneplace_;
}
inline ::std::string* user_basic_info_ans::release_phoneplace() {
  clear_has_phoneplace();
  if (phoneplace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phoneplace_;
    phoneplace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_phoneplace(::std::string* phoneplace) {
  if (phoneplace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phoneplace_;
  }
  if (phoneplace) {
    set_has_phoneplace();
    phoneplace_ = phoneplace;
  } else {
    clear_has_phoneplace();
    phoneplace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.phonePlace)
}

// optional int32 AddressType = 11;
inline bool user_basic_info_ans::has_addresstype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void user_basic_info_ans::set_has_addresstype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void user_basic_info_ans::clear_has_addresstype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void user_basic_info_ans::clear_addresstype() {
  addresstype_ = 0;
  clear_has_addresstype();
}
inline ::google::protobuf::int32 user_basic_info_ans::addresstype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.AddressType)
  return addresstype_;
}
inline void user_basic_info_ans::set_addresstype(::google::protobuf::int32 value) {
  set_has_addresstype();
  addresstype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.AddressType)
}

// optional bytes Hometown = 12;
inline bool user_basic_info_ans::has_hometown() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void user_basic_info_ans::set_has_hometown() {
  _has_bits_[0] |= 0x00008000u;
}
inline void user_basic_info_ans::clear_has_hometown() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void user_basic_info_ans::clear_hometown() {
  if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_->clear();
  }
  clear_has_hometown();
}
inline const ::std::string& user_basic_info_ans::hometown() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Hometown)
  return *hometown_;
}
inline void user_basic_info_ans::set_hometown(const ::std::string& value) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Hometown)
}
inline void user_basic_info_ans::set_hometown(const char* value) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Hometown)
}
inline void user_basic_info_ans::set_hometown(const void* value, size_t size) {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  hometown_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Hometown)
}
inline ::std::string* user_basic_info_ans::mutable_hometown() {
  set_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hometown_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Hometown)
  return hometown_;
}
inline ::std::string* user_basic_info_ans::release_hometown() {
  clear_has_hometown();
  if (hometown_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hometown_;
    hometown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_hometown(::std::string* hometown) {
  if (hometown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hometown_;
  }
  if (hometown) {
    set_has_hometown();
    hometown_ = hometown;
  } else {
    clear_has_hometown();
    hometown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Hometown)
}

// optional int32 CardType = 13;
inline bool user_basic_info_ans::has_cardtype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void user_basic_info_ans::set_has_cardtype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void user_basic_info_ans::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void user_basic_info_ans::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 user_basic_info_ans::cardtype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.CardType)
  return cardtype_;
}
inline void user_basic_info_ans::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.CardType)
}

// optional int32 MaritalStatus = 15;
inline bool user_basic_info_ans::has_maritalstatus() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void user_basic_info_ans::set_has_maritalstatus() {
  _has_bits_[0] |= 0x00020000u;
}
inline void user_basic_info_ans::clear_has_maritalstatus() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void user_basic_info_ans::clear_maritalstatus() {
  maritalstatus_ = 0;
  clear_has_maritalstatus();
}
inline ::google::protobuf::int32 user_basic_info_ans::maritalstatus() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.MaritalStatus)
  return maritalstatus_;
}
inline void user_basic_info_ans::set_maritalstatus(::google::protobuf::int32 value) {
  set_has_maritalstatus();
  maritalstatus_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.MaritalStatus)
}

// optional bytes CardAddress = 16;
inline bool user_basic_info_ans::has_cardaddress() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void user_basic_info_ans::set_has_cardaddress() {
  _has_bits_[0] |= 0x00040000u;
}
inline void user_basic_info_ans::clear_has_cardaddress() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void user_basic_info_ans::clear_cardaddress() {
  if (cardaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardaddress_->clear();
  }
  clear_has_cardaddress();
}
inline const ::std::string& user_basic_info_ans::cardaddress() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.CardAddress)
  return *cardaddress_;
}
inline void user_basic_info_ans::set_cardaddress(const ::std::string& value) {
  set_has_cardaddress();
  if (cardaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardaddress_ = new ::std::string;
  }
  cardaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.CardAddress)
}
inline void user_basic_info_ans::set_cardaddress(const char* value) {
  set_has_cardaddress();
  if (cardaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardaddress_ = new ::std::string;
  }
  cardaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.CardAddress)
}
inline void user_basic_info_ans::set_cardaddress(const void* value, size_t size) {
  set_has_cardaddress();
  if (cardaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardaddress_ = new ::std::string;
  }
  cardaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.CardAddress)
}
inline ::std::string* user_basic_info_ans::mutable_cardaddress() {
  set_has_cardaddress();
  if (cardaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cardaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.CardAddress)
  return cardaddress_;
}
inline ::std::string* user_basic_info_ans::release_cardaddress() {
  clear_has_cardaddress();
  if (cardaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cardaddress_;
    cardaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_cardaddress(::std::string* cardaddress) {
  if (cardaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardaddress_;
  }
  if (cardaddress) {
    set_has_cardaddress();
    cardaddress_ = cardaddress;
  } else {
    clear_has_cardaddress();
    cardaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.CardAddress)
}

// optional int32 ChildrenStatus = 17;
inline bool user_basic_info_ans::has_childrenstatus() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void user_basic_info_ans::set_has_childrenstatus() {
  _has_bits_[0] |= 0x00080000u;
}
inline void user_basic_info_ans::clear_has_childrenstatus() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void user_basic_info_ans::clear_childrenstatus() {
  childrenstatus_ = 0;
  clear_has_childrenstatus();
}
inline ::google::protobuf::int32 user_basic_info_ans::childrenstatus() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.ChildrenStatus)
  return childrenstatus_;
}
inline void user_basic_info_ans::set_childrenstatus(::google::protobuf::int32 value) {
  set_has_childrenstatus();
  childrenstatus_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.ChildrenStatus)
}

// optional bytes LivingAddress = 18;
inline bool user_basic_info_ans::has_livingaddress() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void user_basic_info_ans::set_has_livingaddress() {
  _has_bits_[0] |= 0x00100000u;
}
inline void user_basic_info_ans::clear_has_livingaddress() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void user_basic_info_ans::clear_livingaddress() {
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_->clear();
  }
  clear_has_livingaddress();
}
inline const ::std::string& user_basic_info_ans::livingaddress() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.LivingAddress)
  return *livingaddress_;
}
inline void user_basic_info_ans::set_livingaddress(const ::std::string& value) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.LivingAddress)
}
inline void user_basic_info_ans::set_livingaddress(const char* value) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.LivingAddress)
}
inline void user_basic_info_ans::set_livingaddress(const void* value, size_t size) {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  livingaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.LivingAddress)
}
inline ::std::string* user_basic_info_ans::mutable_livingaddress() {
  set_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    livingaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.LivingAddress)
  return livingaddress_;
}
inline ::std::string* user_basic_info_ans::release_livingaddress() {
  clear_has_livingaddress();
  if (livingaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = livingaddress_;
    livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_livingaddress(::std::string* livingaddress) {
  if (livingaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete livingaddress_;
  }
  if (livingaddress) {
    set_has_livingaddress();
    livingaddress_ = livingaddress;
  } else {
    clear_has_livingaddress();
    livingaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.LivingAddress)
}

// optional bytes EduSchool = 21;
inline bool user_basic_info_ans::has_eduschool() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void user_basic_info_ans::set_has_eduschool() {
  _has_bits_[0] |= 0x00200000u;
}
inline void user_basic_info_ans::clear_has_eduschool() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void user_basic_info_ans::clear_eduschool() {
  if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduschool_->clear();
  }
  clear_has_eduschool();
}
inline const ::std::string& user_basic_info_ans::eduschool() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EduSchool)
  return *eduschool_;
}
inline void user_basic_info_ans::set_eduschool(const ::std::string& value) {
  set_has_eduschool();
  if (eduschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduschool_ = new ::std::string;
  }
  eduschool_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EduSchool)
}
inline void user_basic_info_ans::set_eduschool(const char* value) {
  set_has_eduschool();
  if (eduschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduschool_ = new ::std::string;
  }
  eduschool_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EduSchool)
}
inline void user_basic_info_ans::set_eduschool(const void* value, size_t size) {
  set_has_eduschool();
  if (eduschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduschool_ = new ::std::string;
  }
  eduschool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EduSchool)
}
inline ::std::string* user_basic_info_ans::mutable_eduschool() {
  set_has_eduschool();
  if (eduschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduschool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EduSchool)
  return eduschool_;
}
inline ::std::string* user_basic_info_ans::release_eduschool() {
  clear_has_eduschool();
  if (eduschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eduschool_;
    eduschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_eduschool(::std::string* eduschool) {
  if (eduschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduschool_;
  }
  if (eduschool) {
    set_has_eduschool();
    eduschool_ = eduschool;
  } else {
    clear_has_eduschool();
    eduschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EduSchool)
}

// optional bytes AttendingCollege = 22;
inline bool user_basic_info_ans::has_attendingcollege() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void user_basic_info_ans::set_has_attendingcollege() {
  _has_bits_[0] |= 0x00400000u;
}
inline void user_basic_info_ans::clear_has_attendingcollege() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void user_basic_info_ans::clear_attendingcollege() {
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_->clear();
  }
  clear_has_attendingcollege();
}
inline const ::std::string& user_basic_info_ans::attendingcollege() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
  return *attendingcollege_;
}
inline void user_basic_info_ans::set_attendingcollege(const ::std::string& value) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
}
inline void user_basic_info_ans::set_attendingcollege(const char* value) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
}
inline void user_basic_info_ans::set_attendingcollege(const void* value, size_t size) {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  attendingcollege_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
}
inline ::std::string* user_basic_info_ans::mutable_attendingcollege() {
  set_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingcollege_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
  return attendingcollege_;
}
inline ::std::string* user_basic_info_ans::release_attendingcollege() {
  clear_has_attendingcollege();
  if (attendingcollege_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attendingcollege_;
    attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_attendingcollege(::std::string* attendingcollege) {
  if (attendingcollege_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingcollege_;
  }
  if (attendingcollege) {
    set_has_attendingcollege();
    attendingcollege_ = attendingcollege;
  } else {
    clear_has_attendingcollege();
    attendingcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.AttendingCollege)
}

// optional bytes AttendingGrade = 23;
inline bool user_basic_info_ans::has_attendinggrade() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void user_basic_info_ans::set_has_attendinggrade() {
  _has_bits_[0] |= 0x00800000u;
}
inline void user_basic_info_ans::clear_has_attendinggrade() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void user_basic_info_ans::clear_attendinggrade() {
  if (attendinggrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendinggrade_->clear();
  }
  clear_has_attendinggrade();
}
inline const ::std::string& user_basic_info_ans::attendinggrade() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
  return *attendinggrade_;
}
inline void user_basic_info_ans::set_attendinggrade(const ::std::string& value) {
  set_has_attendinggrade();
  if (attendinggrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendinggrade_ = new ::std::string;
  }
  attendinggrade_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
}
inline void user_basic_info_ans::set_attendinggrade(const char* value) {
  set_has_attendinggrade();
  if (attendinggrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendinggrade_ = new ::std::string;
  }
  attendinggrade_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
}
inline void user_basic_info_ans::set_attendinggrade(const void* value, size_t size) {
  set_has_attendinggrade();
  if (attendinggrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendinggrade_ = new ::std::string;
  }
  attendinggrade_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
}
inline ::std::string* user_basic_info_ans::mutable_attendinggrade() {
  set_has_attendinggrade();
  if (attendinggrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendinggrade_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
  return attendinggrade_;
}
inline ::std::string* user_basic_info_ans::release_attendinggrade() {
  clear_has_attendinggrade();
  if (attendinggrade_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attendinggrade_;
    attendinggrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_attendinggrade(::std::string* attendinggrade) {
  if (attendinggrade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendinggrade_;
  }
  if (attendinggrade) {
    set_has_attendinggrade();
    attendinggrade_ = attendinggrade;
  } else {
    clear_has_attendinggrade();
    attendinggrade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.AttendingGrade)
}

// optional bytes SchoolAddress = 24;
inline bool user_basic_info_ans::has_schooladdress() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void user_basic_info_ans::set_has_schooladdress() {
  _has_bits_[0] |= 0x01000000u;
}
inline void user_basic_info_ans::clear_has_schooladdress() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void user_basic_info_ans::clear_schooladdress() {
  if (schooladdress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schooladdress_->clear();
  }
  clear_has_schooladdress();
}
inline const ::std::string& user_basic_info_ans::schooladdress() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
  return *schooladdress_;
}
inline void user_basic_info_ans::set_schooladdress(const ::std::string& value) {
  set_has_schooladdress();
  if (schooladdress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schooladdress_ = new ::std::string;
  }
  schooladdress_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
}
inline void user_basic_info_ans::set_schooladdress(const char* value) {
  set_has_schooladdress();
  if (schooladdress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schooladdress_ = new ::std::string;
  }
  schooladdress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
}
inline void user_basic_info_ans::set_schooladdress(const void* value, size_t size) {
  set_has_schooladdress();
  if (schooladdress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schooladdress_ = new ::std::string;
  }
  schooladdress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
}
inline ::std::string* user_basic_info_ans::mutable_schooladdress() {
  set_has_schooladdress();
  if (schooladdress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schooladdress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
  return schooladdress_;
}
inline ::std::string* user_basic_info_ans::release_schooladdress() {
  clear_has_schooladdress();
  if (schooladdress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = schooladdress_;
    schooladdress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_schooladdress(::std::string* schooladdress) {
  if (schooladdress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schooladdress_;
  }
  if (schooladdress) {
    set_has_schooladdress();
    schooladdress_ = schooladdress;
  } else {
    clear_has_schooladdress();
    schooladdress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.SchoolAddress)
}

// optional bytes StudentProfessional = 25;
inline bool user_basic_info_ans::has_studentprofessional() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void user_basic_info_ans::set_has_studentprofessional() {
  _has_bits_[0] |= 0x02000000u;
}
inline void user_basic_info_ans::clear_has_studentprofessional() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void user_basic_info_ans::clear_studentprofessional() {
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_->clear();
  }
  clear_has_studentprofessional();
}
inline const ::std::string& user_basic_info_ans::studentprofessional() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
  return *studentprofessional_;
}
inline void user_basic_info_ans::set_studentprofessional(const ::std::string& value) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
}
inline void user_basic_info_ans::set_studentprofessional(const char* value) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
}
inline void user_basic_info_ans::set_studentprofessional(const void* value, size_t size) {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  studentprofessional_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
}
inline ::std::string* user_basic_info_ans::mutable_studentprofessional() {
  set_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    studentprofessional_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
  return studentprofessional_;
}
inline ::std::string* user_basic_info_ans::release_studentprofessional() {
  clear_has_studentprofessional();
  if (studentprofessional_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = studentprofessional_;
    studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_studentprofessional(::std::string* studentprofessional) {
  if (studentprofessional_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete studentprofessional_;
  }
  if (studentprofessional) {
    set_has_studentprofessional();
    studentprofessional_ = studentprofessional;
  } else {
    clear_has_studentprofessional();
    studentprofessional_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.StudentProfessional)
}

// optional bytes AttendingClass = 26;
inline bool user_basic_info_ans::has_attendingclass() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void user_basic_info_ans::set_has_attendingclass() {
  _has_bits_[0] |= 0x04000000u;
}
inline void user_basic_info_ans::clear_has_attendingclass() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void user_basic_info_ans::clear_attendingclass() {
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_->clear();
  }
  clear_has_attendingclass();
}
inline const ::std::string& user_basic_info_ans::attendingclass() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.AttendingClass)
  return *attendingclass_;
}
inline void user_basic_info_ans::set_attendingclass(const ::std::string& value) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.AttendingClass)
}
inline void user_basic_info_ans::set_attendingclass(const char* value) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.AttendingClass)
}
inline void user_basic_info_ans::set_attendingclass(const void* value, size_t size) {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  attendingclass_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.AttendingClass)
}
inline ::std::string* user_basic_info_ans::mutable_attendingclass() {
  set_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attendingclass_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.AttendingClass)
  return attendingclass_;
}
inline ::std::string* user_basic_info_ans::release_attendingclass() {
  clear_has_attendingclass();
  if (attendingclass_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attendingclass_;
    attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_attendingclass(::std::string* attendingclass) {
  if (attendingclass_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attendingclass_;
  }
  if (attendingclass) {
    set_has_attendingclass();
    attendingclass_ = attendingclass;
  } else {
    clear_has_attendingclass();
    attendingclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.AttendingClass)
}

// optional int32 EducationApplyType = 27;
inline bool user_basic_info_ans::has_educationapplytype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void user_basic_info_ans::set_has_educationapplytype() {
  _has_bits_[0] |= 0x08000000u;
}
inline void user_basic_info_ans::clear_has_educationapplytype() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void user_basic_info_ans::clear_educationapplytype() {
  educationapplytype_ = 0;
  clear_has_educationapplytype();
}
inline ::google::protobuf::int32 user_basic_info_ans::educationapplytype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EducationApplyType)
  return educationapplytype_;
}
inline void user_basic_info_ans::set_educationapplytype(::google::protobuf::int32 value) {
  set_has_educationapplytype();
  educationapplytype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EducationApplyType)
}

// optional int32 IsVerify = 28;
inline bool user_basic_info_ans::has_isverify() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void user_basic_info_ans::set_has_isverify() {
  _has_bits_[0] |= 0x10000000u;
}
inline void user_basic_info_ans::clear_has_isverify() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void user_basic_info_ans::clear_isverify() {
  isverify_ = 0;
  clear_has_isverify();
}
inline ::google::protobuf::int32 user_basic_info_ans::isverify() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.IsVerify)
  return isverify_;
}
inline void user_basic_info_ans::set_isverify(::google::protobuf::int32 value) {
  set_has_isverify();
  isverify_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.IsVerify)
}

// optional bytes Major = 29;
inline bool user_basic_info_ans::has_major() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void user_basic_info_ans::set_has_major() {
  _has_bits_[0] |= 0x20000000u;
}
inline void user_basic_info_ans::clear_has_major() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void user_basic_info_ans::clear_major() {
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_->clear();
  }
  clear_has_major();
}
inline const ::std::string& user_basic_info_ans::major() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Major)
  return *major_;
}
inline void user_basic_info_ans::set_major(const ::std::string& value) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Major)
}
inline void user_basic_info_ans::set_major(const char* value) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Major)
}
inline void user_basic_info_ans::set_major(const void* value, size_t size) {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  major_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Major)
}
inline ::std::string* user_basic_info_ans::mutable_major() {
  set_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    major_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Major)
  return major_;
}
inline ::std::string* user_basic_info_ans::release_major() {
  clear_has_major();
  if (major_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = major_;
    major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_major(::std::string* major) {
  if (major_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete major_;
  }
  if (major) {
    set_has_major();
    major_ = major;
  } else {
    clear_has_major();
    major_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Major)
}

// optional bytes EducationApplyTime = 30;
inline bool user_basic_info_ans::has_educationapplytime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void user_basic_info_ans::set_has_educationapplytime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void user_basic_info_ans::clear_has_educationapplytime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void user_basic_info_ans::clear_educationapplytime() {
  if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educationapplytime_->clear();
  }
  clear_has_educationapplytime();
}
inline const ::std::string& user_basic_info_ans::educationapplytime() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
  return *educationapplytime_;
}
inline void user_basic_info_ans::set_educationapplytime(const ::std::string& value) {
  set_has_educationapplytime();
  if (educationapplytime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educationapplytime_ = new ::std::string;
  }
  educationapplytime_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
}
inline void user_basic_info_ans::set_educationapplytime(const char* value) {
  set_has_educationapplytime();
  if (educationapplytime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educationapplytime_ = new ::std::string;
  }
  educationapplytime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
}
inline void user_basic_info_ans::set_educationapplytime(const void* value, size_t size) {
  set_has_educationapplytime();
  if (educationapplytime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educationapplytime_ = new ::std::string;
  }
  educationapplytime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
}
inline ::std::string* user_basic_info_ans::mutable_educationapplytime() {
  set_has_educationapplytime();
  if (educationapplytime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educationapplytime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
  return educationapplytime_;
}
inline ::std::string* user_basic_info_ans::release_educationapplytime() {
  clear_has_educationapplytime();
  if (educationapplytime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = educationapplytime_;
    educationapplytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_educationapplytime(::std::string* educationapplytime) {
  if (educationapplytime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educationapplytime_;
  }
  if (educationapplytime) {
    set_has_educationapplytime();
    educationapplytime_ = educationapplytime;
  } else {
    clear_has_educationapplytime();
    educationapplytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EducationApplyTime)
}

// optional bytes GraduateSchool = 31;
inline bool user_basic_info_ans::has_graduateschool() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void user_basic_info_ans::set_has_graduateschool() {
  _has_bits_[0] |= 0x80000000u;
}
inline void user_basic_info_ans::clear_has_graduateschool() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void user_basic_info_ans::clear_graduateschool() {
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_->clear();
  }
  clear_has_graduateschool();
}
inline const ::std::string& user_basic_info_ans::graduateschool() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
  return *graduateschool_;
}
inline void user_basic_info_ans::set_graduateschool(const ::std::string& value) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
}
inline void user_basic_info_ans::set_graduateschool(const char* value) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
}
inline void user_basic_info_ans::set_graduateschool(const void* value, size_t size) {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  graduateschool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
}
inline ::std::string* user_basic_info_ans::mutable_graduateschool() {
  set_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduateschool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
  return graduateschool_;
}
inline ::std::string* user_basic_info_ans::release_graduateschool() {
  clear_has_graduateschool();
  if (graduateschool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graduateschool_;
    graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_graduateschool(::std::string* graduateschool) {
  if (graduateschool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduateschool_;
  }
  if (graduateschool) {
    set_has_graduateschool();
    graduateschool_ = graduateschool;
  } else {
    clear_has_graduateschool();
    graduateschool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.GraduateSchool)
}

// optional int32 DegreeType = 32;
inline bool user_basic_info_ans::has_degreetype() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void user_basic_info_ans::set_has_degreetype() {
  _has_bits_[1] |= 0x00000001u;
}
inline void user_basic_info_ans::clear_has_degreetype() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void user_basic_info_ans::clear_degreetype() {
  degreetype_ = 0;
  clear_has_degreetype();
}
inline ::google::protobuf::int32 user_basic_info_ans::degreetype() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.DegreeType)
  return degreetype_;
}
inline void user_basic_info_ans::set_degreetype(::google::protobuf::int32 value) {
  set_has_degreetype();
  degreetype_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.DegreeType)
}

// optional bytes EntranceDate = 33;
inline bool user_basic_info_ans::has_entrancedate() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void user_basic_info_ans::set_has_entrancedate() {
  _has_bits_[1] |= 0x00000002u;
}
inline void user_basic_info_ans::clear_has_entrancedate() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void user_basic_info_ans::clear_entrancedate() {
  if (entrancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entrancedate_->clear();
  }
  clear_has_entrancedate();
}
inline const ::std::string& user_basic_info_ans::entrancedate() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EntranceDate)
  return *entrancedate_;
}
inline void user_basic_info_ans::set_entrancedate(const ::std::string& value) {
  set_has_entrancedate();
  if (entrancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entrancedate_ = new ::std::string;
  }
  entrancedate_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EntranceDate)
}
inline void user_basic_info_ans::set_entrancedate(const char* value) {
  set_has_entrancedate();
  if (entrancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entrancedate_ = new ::std::string;
  }
  entrancedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EntranceDate)
}
inline void user_basic_info_ans::set_entrancedate(const void* value, size_t size) {
  set_has_entrancedate();
  if (entrancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entrancedate_ = new ::std::string;
  }
  entrancedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EntranceDate)
}
inline ::std::string* user_basic_info_ans::mutable_entrancedate() {
  set_has_entrancedate();
  if (entrancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entrancedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EntranceDate)
  return entrancedate_;
}
inline ::std::string* user_basic_info_ans::release_entrancedate() {
  clear_has_entrancedate();
  if (entrancedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entrancedate_;
    entrancedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_entrancedate(::std::string* entrancedate) {
  if (entrancedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entrancedate_;
  }
  if (entrancedate) {
    set_has_entrancedate();
    entrancedate_ = entrancedate;
  } else {
    clear_has_entrancedate();
    entrancedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EntranceDate)
}

// optional bytes GraduateDate = 34;
inline bool user_basic_info_ans::has_graduatedate() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void user_basic_info_ans::set_has_graduatedate() {
  _has_bits_[1] |= 0x00000004u;
}
inline void user_basic_info_ans::clear_has_graduatedate() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void user_basic_info_ans::clear_graduatedate() {
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_->clear();
  }
  clear_has_graduatedate();
}
inline const ::std::string& user_basic_info_ans::graduatedate() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.GraduateDate)
  return *graduatedate_;
}
inline void user_basic_info_ans::set_graduatedate(const ::std::string& value) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.GraduateDate)
}
inline void user_basic_info_ans::set_graduatedate(const char* value) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.GraduateDate)
}
inline void user_basic_info_ans::set_graduatedate(const void* value, size_t size) {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  graduatedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.GraduateDate)
}
inline ::std::string* user_basic_info_ans::mutable_graduatedate() {
  set_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    graduatedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.GraduateDate)
  return graduatedate_;
}
inline ::std::string* user_basic_info_ans::release_graduatedate() {
  clear_has_graduatedate();
  if (graduatedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = graduatedate_;
    graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_graduatedate(::std::string* graduatedate) {
  if (graduatedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete graduatedate_;
  }
  if (graduatedate) {
    set_has_graduatedate();
    graduatedate_ = graduatedate;
  } else {
    clear_has_graduatedate();
    graduatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.GraduateDate)
}

// optional bytes EduConclusion = 35;
inline bool user_basic_info_ans::has_educonclusion() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void user_basic_info_ans::set_has_educonclusion() {
  _has_bits_[1] |= 0x00000008u;
}
inline void user_basic_info_ans::clear_has_educonclusion() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void user_basic_info_ans::clear_educonclusion() {
  if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educonclusion_->clear();
  }
  clear_has_educonclusion();
}
inline const ::std::string& user_basic_info_ans::educonclusion() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EduConclusion)
  return *educonclusion_;
}
inline void user_basic_info_ans::set_educonclusion(const ::std::string& value) {
  set_has_educonclusion();
  if (educonclusion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educonclusion_ = new ::std::string;
  }
  educonclusion_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EduConclusion)
}
inline void user_basic_info_ans::set_educonclusion(const char* value) {
  set_has_educonclusion();
  if (educonclusion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educonclusion_ = new ::std::string;
  }
  educonclusion_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EduConclusion)
}
inline void user_basic_info_ans::set_educonclusion(const void* value, size_t size) {
  set_has_educonclusion();
  if (educonclusion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educonclusion_ = new ::std::string;
  }
  educonclusion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EduConclusion)
}
inline ::std::string* user_basic_info_ans::mutable_educonclusion() {
  set_has_educonclusion();
  if (educonclusion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    educonclusion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EduConclusion)
  return educonclusion_;
}
inline ::std::string* user_basic_info_ans::release_educonclusion() {
  clear_has_educonclusion();
  if (educonclusion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = educonclusion_;
    educonclusion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_educonclusion(::std::string* educonclusion) {
  if (educonclusion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete educonclusion_;
  }
  if (educonclusion) {
    set_has_educonclusion();
    educonclusion_ = educonclusion;
  } else {
    clear_has_educonclusion();
    educonclusion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EduConclusion)
}

// optional bytes EduForm = 36;
inline bool user_basic_info_ans::has_eduform() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void user_basic_info_ans::set_has_eduform() {
  _has_bits_[1] |= 0x00000010u;
}
inline void user_basic_info_ans::clear_has_eduform() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void user_basic_info_ans::clear_eduform() {
  if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduform_->clear();
  }
  clear_has_eduform();
}
inline const ::std::string& user_basic_info_ans::eduform() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EduForm)
  return *eduform_;
}
inline void user_basic_info_ans::set_eduform(const ::std::string& value) {
  set_has_eduform();
  if (eduform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduform_ = new ::std::string;
  }
  eduform_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EduForm)
}
inline void user_basic_info_ans::set_eduform(const char* value) {
  set_has_eduform();
  if (eduform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduform_ = new ::std::string;
  }
  eduform_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EduForm)
}
inline void user_basic_info_ans::set_eduform(const void* value, size_t size) {
  set_has_eduform();
  if (eduform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduform_ = new ::std::string;
  }
  eduform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EduForm)
}
inline ::std::string* user_basic_info_ans::mutable_eduform() {
  set_has_eduform();
  if (eduform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eduform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EduForm)
  return eduform_;
}
inline ::std::string* user_basic_info_ans::release_eduform() {
  clear_has_eduform();
  if (eduform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eduform_;
    eduform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_eduform(::std::string* eduform) {
  if (eduform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eduform_;
  }
  if (eduform) {
    set_has_eduform();
    eduform_ = eduform;
  } else {
    clear_has_eduform();
    eduform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EduForm)
}

// optional bytes CompanyName = 37;
inline bool user_basic_info_ans::has_companyname() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void user_basic_info_ans::set_has_companyname() {
  _has_bits_[1] |= 0x00000020u;
}
inline void user_basic_info_ans::clear_has_companyname() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void user_basic_info_ans::clear_companyname() {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyname_->clear();
  }
  clear_has_companyname();
}
inline const ::std::string& user_basic_info_ans::companyname() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.CompanyName)
  return *companyname_;
}
inline void user_basic_info_ans::set_companyname(const ::std::string& value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.CompanyName)
}
inline void user_basic_info_ans::set_companyname(const char* value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.CompanyName)
}
inline void user_basic_info_ans::set_companyname(const void* value, size_t size) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.CompanyName)
}
inline ::std::string* user_basic_info_ans::mutable_companyname() {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.CompanyName)
  return companyname_;
}
inline ::std::string* user_basic_info_ans::release_companyname() {
  clear_has_companyname();
  if (companyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyname_;
    companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_companyname(::std::string* companyname) {
  if (companyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyname_;
  }
  if (companyname) {
    set_has_companyname();
    companyname_ = companyname;
  } else {
    clear_has_companyname();
    companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.CompanyName)
}

// optional bytes Position = 38;
inline bool user_basic_info_ans::has_position() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void user_basic_info_ans::set_has_position() {
  _has_bits_[1] |= 0x00000040u;
}
inline void user_basic_info_ans::clear_has_position() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void user_basic_info_ans::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& user_basic_info_ans::position() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Position)
  return *position_;
}
inline void user_basic_info_ans::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Position)
}
inline void user_basic_info_ans::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Position)
}
inline void user_basic_info_ans::set_position(const void* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Position)
}
inline ::std::string* user_basic_info_ans::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Position)
  return position_;
}
inline ::std::string* user_basic_info_ans::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Position)
}

// optional bytes JobProvince = 39;
inline bool user_basic_info_ans::has_jobprovince() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void user_basic_info_ans::set_has_jobprovince() {
  _has_bits_[1] |= 0x00000080u;
}
inline void user_basic_info_ans::clear_has_jobprovince() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void user_basic_info_ans::clear_jobprovince() {
  if (jobprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobprovince_->clear();
  }
  clear_has_jobprovince();
}
inline const ::std::string& user_basic_info_ans::jobprovince() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.JobProvince)
  return *jobprovince_;
}
inline void user_basic_info_ans::set_jobprovince(const ::std::string& value) {
  set_has_jobprovince();
  if (jobprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobprovince_ = new ::std::string;
  }
  jobprovince_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.JobProvince)
}
inline void user_basic_info_ans::set_jobprovince(const char* value) {
  set_has_jobprovince();
  if (jobprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobprovince_ = new ::std::string;
  }
  jobprovince_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.JobProvince)
}
inline void user_basic_info_ans::set_jobprovince(const void* value, size_t size) {
  set_has_jobprovince();
  if (jobprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobprovince_ = new ::std::string;
  }
  jobprovince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.JobProvince)
}
inline ::std::string* user_basic_info_ans::mutable_jobprovince() {
  set_has_jobprovince();
  if (jobprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobprovince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.JobProvince)
  return jobprovince_;
}
inline ::std::string* user_basic_info_ans::release_jobprovince() {
  clear_has_jobprovince();
  if (jobprovince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobprovince_;
    jobprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_jobprovince(::std::string* jobprovince) {
  if (jobprovince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobprovince_;
  }
  if (jobprovince) {
    set_has_jobprovince();
    jobprovince_ = jobprovince;
  } else {
    clear_has_jobprovince();
    jobprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.JobProvince)
}

// optional bytes Deparment = 40;
inline bool user_basic_info_ans::has_deparment() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void user_basic_info_ans::set_has_deparment() {
  _has_bits_[1] |= 0x00000100u;
}
inline void user_basic_info_ans::clear_has_deparment() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void user_basic_info_ans::clear_deparment() {
  if (deparment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deparment_->clear();
  }
  clear_has_deparment();
}
inline const ::std::string& user_basic_info_ans::deparment() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Deparment)
  return *deparment_;
}
inline void user_basic_info_ans::set_deparment(const ::std::string& value) {
  set_has_deparment();
  if (deparment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deparment_ = new ::std::string;
  }
  deparment_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Deparment)
}
inline void user_basic_info_ans::set_deparment(const char* value) {
  set_has_deparment();
  if (deparment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deparment_ = new ::std::string;
  }
  deparment_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Deparment)
}
inline void user_basic_info_ans::set_deparment(const void* value, size_t size) {
  set_has_deparment();
  if (deparment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deparment_ = new ::std::string;
  }
  deparment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Deparment)
}
inline ::std::string* user_basic_info_ans::mutable_deparment() {
  set_has_deparment();
  if (deparment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deparment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Deparment)
  return deparment_;
}
inline ::std::string* user_basic_info_ans::release_deparment() {
  clear_has_deparment();
  if (deparment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deparment_;
    deparment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_deparment(::std::string* deparment) {
  if (deparment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deparment_;
  }
  if (deparment) {
    set_has_deparment();
    deparment_ = deparment;
  } else {
    clear_has_deparment();
    deparment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Deparment)
}

// optional bytes CompanyAddress = 41;
inline bool user_basic_info_ans::has_companyaddress() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void user_basic_info_ans::set_has_companyaddress() {
  _has_bits_[1] |= 0x00000200u;
}
inline void user_basic_info_ans::clear_has_companyaddress() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void user_basic_info_ans::clear_companyaddress() {
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_->clear();
  }
  clear_has_companyaddress();
}
inline const ::std::string& user_basic_info_ans::companyaddress() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
  return *companyaddress_;
}
inline void user_basic_info_ans::set_companyaddress(const ::std::string& value) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
}
inline void user_basic_info_ans::set_companyaddress(const char* value) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
}
inline void user_basic_info_ans::set_companyaddress(const void* value, size_t size) {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  companyaddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
}
inline ::std::string* user_basic_info_ans::mutable_companyaddress() {
  set_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    companyaddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
  return companyaddress_;
}
inline ::std::string* user_basic_info_ans::release_companyaddress() {
  clear_has_companyaddress();
  if (companyaddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = companyaddress_;
    companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_companyaddress(::std::string* companyaddress) {
  if (companyaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete companyaddress_;
  }
  if (companyaddress) {
    set_has_companyaddress();
    companyaddress_ = companyaddress;
  } else {
    clear_has_companyaddress();
    companyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.CompanyAddress)
}

// optional bytes JobCity = 42;
inline bool user_basic_info_ans::has_jobcity() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void user_basic_info_ans::set_has_jobcity() {
  _has_bits_[1] |= 0x00000400u;
}
inline void user_basic_info_ans::clear_has_jobcity() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void user_basic_info_ans::clear_jobcity() {
  if (jobcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobcity_->clear();
  }
  clear_has_jobcity();
}
inline const ::std::string& user_basic_info_ans::jobcity() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.JobCity)
  return *jobcity_;
}
inline void user_basic_info_ans::set_jobcity(const ::std::string& value) {
  set_has_jobcity();
  if (jobcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobcity_ = new ::std::string;
  }
  jobcity_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.JobCity)
}
inline void user_basic_info_ans::set_jobcity(const char* value) {
  set_has_jobcity();
  if (jobcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobcity_ = new ::std::string;
  }
  jobcity_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.JobCity)
}
inline void user_basic_info_ans::set_jobcity(const void* value, size_t size) {
  set_has_jobcity();
  if (jobcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobcity_ = new ::std::string;
  }
  jobcity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.JobCity)
}
inline ::std::string* user_basic_info_ans::mutable_jobcity() {
  set_has_jobcity();
  if (jobcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobcity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.JobCity)
  return jobcity_;
}
inline ::std::string* user_basic_info_ans::release_jobcity() {
  clear_has_jobcity();
  if (jobcity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobcity_;
    jobcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_jobcity(::std::string* jobcity) {
  if (jobcity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobcity_;
  }
  if (jobcity) {
    set_has_jobcity();
    jobcity_ = jobcity;
  } else {
    clear_has_jobcity();
    jobcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.JobCity)
}

// optional bytes JobArea = 43;
inline bool user_basic_info_ans::has_jobarea() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void user_basic_info_ans::set_has_jobarea() {
  _has_bits_[1] |= 0x00000800u;
}
inline void user_basic_info_ans::clear_has_jobarea() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void user_basic_info_ans::clear_jobarea() {
  if (jobarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobarea_->clear();
  }
  clear_has_jobarea();
}
inline const ::std::string& user_basic_info_ans::jobarea() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.JobArea)
  return *jobarea_;
}
inline void user_basic_info_ans::set_jobarea(const ::std::string& value) {
  set_has_jobarea();
  if (jobarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobarea_ = new ::std::string;
  }
  jobarea_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.JobArea)
}
inline void user_basic_info_ans::set_jobarea(const char* value) {
  set_has_jobarea();
  if (jobarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobarea_ = new ::std::string;
  }
  jobarea_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.JobArea)
}
inline void user_basic_info_ans::set_jobarea(const void* value, size_t size) {
  set_has_jobarea();
  if (jobarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobarea_ = new ::std::string;
  }
  jobarea_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.JobArea)
}
inline ::std::string* user_basic_info_ans::mutable_jobarea() {
  set_has_jobarea();
  if (jobarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobarea_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.JobArea)
  return jobarea_;
}
inline ::std::string* user_basic_info_ans::release_jobarea() {
  clear_has_jobarea();
  if (jobarea_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobarea_;
    jobarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_jobarea(::std::string* jobarea) {
  if (jobarea_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobarea_;
  }
  if (jobarea) {
    set_has_jobarea();
    jobarea_ = jobarea;
  } else {
    clear_has_jobarea();
    jobarea_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.JobArea)
}

// optional int32 Industry = 44;
inline bool user_basic_info_ans::has_industry() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void user_basic_info_ans::set_has_industry() {
  _has_bits_[1] |= 0x00001000u;
}
inline void user_basic_info_ans::clear_has_industry() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void user_basic_info_ans::clear_industry() {
  industry_ = 0;
  clear_has_industry();
}
inline ::google::protobuf::int32 user_basic_info_ans::industry() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Industry)
  return industry_;
}
inline void user_basic_info_ans::set_industry(::google::protobuf::int32 value) {
  set_has_industry();
  industry_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Industry)
}

// optional int32 Years = 46;
inline bool user_basic_info_ans::has_years() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void user_basic_info_ans::set_has_years() {
  _has_bits_[1] |= 0x00002000u;
}
inline void user_basic_info_ans::clear_has_years() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void user_basic_info_ans::clear_years() {
  years_ = 0;
  clear_has_years();
}
inline ::google::protobuf::int32 user_basic_info_ans::years() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Years)
  return years_;
}
inline void user_basic_info_ans::set_years(::google::protobuf::int32 value) {
  set_has_years();
  years_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Years)
}

// optional int32 KnowWorkYears = 47;
inline bool user_basic_info_ans::has_knowworkyears() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void user_basic_info_ans::set_has_knowworkyears() {
  _has_bits_[1] |= 0x00004000u;
}
inline void user_basic_info_ans::clear_has_knowworkyears() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void user_basic_info_ans::clear_knowworkyears() {
  knowworkyears_ = 0;
  clear_has_knowworkyears();
}
inline ::google::protobuf::int32 user_basic_info_ans::knowworkyears() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.KnowWorkYears)
  return knowworkyears_;
}
inline void user_basic_info_ans::set_knowworkyears(::google::protobuf::int32 value) {
  set_has_knowworkyears();
  knowworkyears_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.KnowWorkYears)
}

// optional bytes Email = 48;
inline bool user_basic_info_ans::has_email() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void user_basic_info_ans::set_has_email() {
  _has_bits_[1] |= 0x00008000u;
}
inline void user_basic_info_ans::clear_has_email() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void user_basic_info_ans::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& user_basic_info_ans::email() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.Email)
  return *email_;
}
inline void user_basic_info_ans::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.Email)
}
inline void user_basic_info_ans::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.Email)
}
inline void user_basic_info_ans::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.Email)
}
inline ::std::string* user_basic_info_ans::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.Email)
  return email_;
}
inline ::std::string* user_basic_info_ans::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.Email)
}

// optional bytes workPics = 49;
inline bool user_basic_info_ans::has_workpics() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void user_basic_info_ans::set_has_workpics() {
  _has_bits_[1] |= 0x00010000u;
}
inline void user_basic_info_ans::clear_has_workpics() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void user_basic_info_ans::clear_workpics() {
  if (workpics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workpics_->clear();
  }
  clear_has_workpics();
}
inline const ::std::string& user_basic_info_ans::workpics() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.workPics)
  return *workpics_;
}
inline void user_basic_info_ans::set_workpics(const ::std::string& value) {
  set_has_workpics();
  if (workpics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workpics_ = new ::std::string;
  }
  workpics_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.workPics)
}
inline void user_basic_info_ans::set_workpics(const char* value) {
  set_has_workpics();
  if (workpics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workpics_ = new ::std::string;
  }
  workpics_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.workPics)
}
inline void user_basic_info_ans::set_workpics(const void* value, size_t size) {
  set_has_workpics();
  if (workpics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workpics_ = new ::std::string;
  }
  workpics_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.workPics)
}
inline ::std::string* user_basic_info_ans::mutable_workpics() {
  set_has_workpics();
  if (workpics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workpics_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.workPics)
  return workpics_;
}
inline ::std::string* user_basic_info_ans::release_workpics() {
  clear_has_workpics();
  if (workpics_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = workpics_;
    workpics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_workpics(::std::string* workpics) {
  if (workpics_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workpics_;
  }
  if (workpics) {
    set_has_workpics();
    workpics_ = workpics;
  } else {
    clear_has_workpics();
    workpics_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.workPics)
}

// optional int32 IsEnterprisLegalPerson = 50;
inline bool user_basic_info_ans::has_isenterprislegalperson() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void user_basic_info_ans::set_has_isenterprislegalperson() {
  _has_bits_[1] |= 0x00020000u;
}
inline void user_basic_info_ans::clear_has_isenterprislegalperson() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void user_basic_info_ans::clear_isenterprislegalperson() {
  isenterprislegalperson_ = 0;
  clear_has_isenterprislegalperson();
}
inline ::google::protobuf::int32 user_basic_info_ans::isenterprislegalperson() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.IsEnterprisLegalPerson)
  return isenterprislegalperson_;
}
inline void user_basic_info_ans::set_isenterprislegalperson(::google::protobuf::int32 value) {
  set_has_isenterprislegalperson();
  isenterprislegalperson_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.IsEnterprisLegalPerson)
}

// optional bytes EnterpRegistrTime = 51;
inline bool user_basic_info_ans::has_enterpregistrtime() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void user_basic_info_ans::set_has_enterpregistrtime() {
  _has_bits_[1] |= 0x00040000u;
}
inline void user_basic_info_ans::clear_has_enterpregistrtime() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void user_basic_info_ans::clear_enterpregistrtime() {
  if (enterpregistrtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrtime_->clear();
  }
  clear_has_enterpregistrtime();
}
inline const ::std::string& user_basic_info_ans::enterpregistrtime() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
  return *enterpregistrtime_;
}
inline void user_basic_info_ans::set_enterpregistrtime(const ::std::string& value) {
  set_has_enterpregistrtime();
  if (enterpregistrtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrtime_ = new ::std::string;
  }
  enterpregistrtime_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
}
inline void user_basic_info_ans::set_enterpregistrtime(const char* value) {
  set_has_enterpregistrtime();
  if (enterpregistrtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrtime_ = new ::std::string;
  }
  enterpregistrtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
}
inline void user_basic_info_ans::set_enterpregistrtime(const void* value, size_t size) {
  set_has_enterpregistrtime();
  if (enterpregistrtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrtime_ = new ::std::string;
  }
  enterpregistrtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
}
inline ::std::string* user_basic_info_ans::mutable_enterpregistrtime() {
  set_has_enterpregistrtime();
  if (enterpregistrtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
  return enterpregistrtime_;
}
inline ::std::string* user_basic_info_ans::release_enterpregistrtime() {
  clear_has_enterpregistrtime();
  if (enterpregistrtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = enterpregistrtime_;
    enterpregistrtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_enterpregistrtime(::std::string* enterpregistrtime) {
  if (enterpregistrtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrtime_;
  }
  if (enterpregistrtime) {
    set_has_enterpregistrtime();
    enterpregistrtime_ = enterpregistrtime;
  } else {
    clear_has_enterpregistrtime();
    enterpregistrtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EnterpRegistrTime)
}

// optional bytes EnterpRegistrCapital = 52;
inline bool user_basic_info_ans::has_enterpregistrcapital() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void user_basic_info_ans::set_has_enterpregistrcapital() {
  _has_bits_[1] |= 0x00080000u;
}
inline void user_basic_info_ans::clear_has_enterpregistrcapital() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void user_basic_info_ans::clear_enterpregistrcapital() {
  if (enterpregistrcapital_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrcapital_->clear();
  }
  clear_has_enterpregistrcapital();
}
inline const ::std::string& user_basic_info_ans::enterpregistrcapital() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
  return *enterpregistrcapital_;
}
inline void user_basic_info_ans::set_enterpregistrcapital(const ::std::string& value) {
  set_has_enterpregistrcapital();
  if (enterpregistrcapital_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrcapital_ = new ::std::string;
  }
  enterpregistrcapital_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
}
inline void user_basic_info_ans::set_enterpregistrcapital(const char* value) {
  set_has_enterpregistrcapital();
  if (enterpregistrcapital_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrcapital_ = new ::std::string;
  }
  enterpregistrcapital_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
}
inline void user_basic_info_ans::set_enterpregistrcapital(const void* value, size_t size) {
  set_has_enterpregistrcapital();
  if (enterpregistrcapital_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrcapital_ = new ::std::string;
  }
  enterpregistrcapital_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
}
inline ::std::string* user_basic_info_ans::mutable_enterpregistrcapital() {
  set_has_enterpregistrcapital();
  if (enterpregistrcapital_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrcapital_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
  return enterpregistrcapital_;
}
inline ::std::string* user_basic_info_ans::release_enterpregistrcapital() {
  clear_has_enterpregistrcapital();
  if (enterpregistrcapital_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = enterpregistrcapital_;
    enterpregistrcapital_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_enterpregistrcapital(::std::string* enterpregistrcapital) {
  if (enterpregistrcapital_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrcapital_;
  }
  if (enterpregistrcapital) {
    set_has_enterpregistrcapital();
    enterpregistrcapital_ = enterpregistrcapital;
  } else {
    clear_has_enterpregistrcapital();
    enterpregistrcapital_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EnterpRegistrCapital)
}

// optional bytes EnterpRegistrState = 53;
inline bool user_basic_info_ans::has_enterpregistrstate() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void user_basic_info_ans::set_has_enterpregistrstate() {
  _has_bits_[1] |= 0x00100000u;
}
inline void user_basic_info_ans::clear_has_enterpregistrstate() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void user_basic_info_ans::clear_enterpregistrstate() {
  if (enterpregistrstate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrstate_->clear();
  }
  clear_has_enterpregistrstate();
}
inline const ::std::string& user_basic_info_ans::enterpregistrstate() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
  return *enterpregistrstate_;
}
inline void user_basic_info_ans::set_enterpregistrstate(const ::std::string& value) {
  set_has_enterpregistrstate();
  if (enterpregistrstate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrstate_ = new ::std::string;
  }
  enterpregistrstate_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
}
inline void user_basic_info_ans::set_enterpregistrstate(const char* value) {
  set_has_enterpregistrstate();
  if (enterpregistrstate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrstate_ = new ::std::string;
  }
  enterpregistrstate_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
}
inline void user_basic_info_ans::set_enterpregistrstate(const void* value, size_t size) {
  set_has_enterpregistrstate();
  if (enterpregistrstate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrstate_ = new ::std::string;
  }
  enterpregistrstate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
}
inline ::std::string* user_basic_info_ans::mutable_enterpregistrstate() {
  set_has_enterpregistrstate();
  if (enterpregistrstate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enterpregistrstate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
  return enterpregistrstate_;
}
inline ::std::string* user_basic_info_ans::release_enterpregistrstate() {
  clear_has_enterpregistrstate();
  if (enterpregistrstate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = enterpregistrstate_;
    enterpregistrstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_basic_info_ans::set_allocated_enterpregistrstate(::std::string* enterpregistrstate) {
  if (enterpregistrstate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enterpregistrstate_;
  }
  if (enterpregistrstate) {
    set_has_enterpregistrstate();
    enterpregistrstate_ = enterpregistrstate;
  } else {
    clear_has_enterpregistrstate();
    enterpregistrstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.EnterpRegistrState)
}

// repeated .UPS_niiwoo.income_source IncomeSource = 55;
inline int user_basic_info_ans::incomesource_size() const {
  return incomesource_.size();
}
inline void user_basic_info_ans::clear_incomesource() {
  incomesource_.Clear();
}
inline const ::UPS_niiwoo::income_source& user_basic_info_ans::incomesource(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.IncomeSource)
  return incomesource_.Get(index);
}
inline ::UPS_niiwoo::income_source* user_basic_info_ans::mutable_incomesource(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.IncomeSource)
  return incomesource_.Mutable(index);
}
inline ::UPS_niiwoo::income_source* user_basic_info_ans::add_incomesource() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_basic_info_ans.IncomeSource)
  return incomesource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::income_source >&
user_basic_info_ans::incomesource() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_basic_info_ans.IncomeSource)
  return incomesource_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::income_source >*
user_basic_info_ans::mutable_incomesource() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_basic_info_ans.IncomeSource)
  return &incomesource_;
}

// repeated .UPS_niiwoo.user_house_info UserHousePropertyInfo = 56;
inline int user_basic_info_ans::userhousepropertyinfo_size() const {
  return userhousepropertyinfo_.size();
}
inline void user_basic_info_ans::clear_userhousepropertyinfo() {
  userhousepropertyinfo_.Clear();
}
inline const ::UPS_niiwoo::user_house_info& user_basic_info_ans::userhousepropertyinfo(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserHousePropertyInfo)
  return userhousepropertyinfo_.Get(index);
}
inline ::UPS_niiwoo::user_house_info* user_basic_info_ans::mutable_userhousepropertyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.UserHousePropertyInfo)
  return userhousepropertyinfo_.Mutable(index);
}
inline ::UPS_niiwoo::user_house_info* user_basic_info_ans::add_userhousepropertyinfo() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_basic_info_ans.UserHousePropertyInfo)
  return userhousepropertyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_house_info >&
user_basic_info_ans::userhousepropertyinfo() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_basic_info_ans.UserHousePropertyInfo)
  return userhousepropertyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_house_info >*
user_basic_info_ans::mutable_userhousepropertyinfo() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_basic_info_ans.UserHousePropertyInfo)
  return &userhousepropertyinfo_;
}

// repeated .UPS_niiwoo.user_car_info UserCarPropertyInfo = 57;
inline int user_basic_info_ans::usercarpropertyinfo_size() const {
  return usercarpropertyinfo_.size();
}
inline void user_basic_info_ans::clear_usercarpropertyinfo() {
  usercarpropertyinfo_.Clear();
}
inline const ::UPS_niiwoo::user_car_info& user_basic_info_ans::usercarpropertyinfo(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.UserCarPropertyInfo)
  return usercarpropertyinfo_.Get(index);
}
inline ::UPS_niiwoo::user_car_info* user_basic_info_ans::mutable_usercarpropertyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.UserCarPropertyInfo)
  return usercarpropertyinfo_.Mutable(index);
}
inline ::UPS_niiwoo::user_car_info* user_basic_info_ans::add_usercarpropertyinfo() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_basic_info_ans.UserCarPropertyInfo)
  return usercarpropertyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_car_info >&
user_basic_info_ans::usercarpropertyinfo() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_basic_info_ans.UserCarPropertyInfo)
  return usercarpropertyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::user_car_info >*
user_basic_info_ans::mutable_usercarpropertyinfo() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_basic_info_ans.UserCarPropertyInfo)
  return &usercarpropertyinfo_;
}

// optional .common.result_info result = 100;
inline bool user_basic_info_ans::has_result() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void user_basic_info_ans::set_has_result() {
  _has_bits_[1] |= 0x01000000u;
}
inline void user_basic_info_ans::clear_has_result() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void user_basic_info_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_basic_info_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_basic_info_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_basic_info_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_basic_info_ans.result)
  return result_;
}
inline ::common::result_info* user_basic_info_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_basic_info_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_basic_info_ans.result)
}

// -------------------------------------------------------------------

// user_common_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_common_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_common_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_common_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_common_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_common_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_common_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_common_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_common_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_common_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_common_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_common_ask.ask_header)
}

// optional bytes id_card = 2;
inline bool user_common_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_common_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_common_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_common_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& user_common_ask::id_card() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_common_ask.id_card)
  return *id_card_;
}
inline void user_common_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_common_ask.id_card)
}
inline void user_common_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_common_ask.id_card)
}
inline void user_common_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_common_ask.id_card)
}
inline ::std::string* user_common_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_common_ask.id_card)
  return id_card_;
}
inline ::std::string* user_common_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_common_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_common_ask.id_card)
}

// optional bytes mobile_phone = 3;
inline bool user_common_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_common_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_common_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_common_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_common_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_common_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_common_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_common_ask.mobile_phone)
}
inline void user_common_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_common_ask.mobile_phone)
}
inline void user_common_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_common_ask.mobile_phone)
}
inline ::std::string* user_common_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_common_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_common_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_common_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_common_ask.mobile_phone)
}

// -------------------------------------------------------------------

// user_common_ans

// optional .common.result_info result = 1;
inline bool user_common_ans::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_common_ans::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_common_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_common_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_common_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_common_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_common_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_common_ans.result)
  return result_;
}
inline ::common::result_info* user_common_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_common_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_common_ans.result)
}

// optional bytes result_json = 2;
inline bool user_common_ans::has_result_json() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_common_ans::set_has_result_json() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_common_ans::clear_has_result_json() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_common_ans::clear_result_json() {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_->clear();
  }
  clear_has_result_json();
}
inline const ::std::string& user_common_ans::result_json() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_common_ans.result_json)
  return *result_json_;
}
inline void user_common_ans::set_result_json(const ::std::string& value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_common_ans.result_json)
}
inline void user_common_ans::set_result_json(const char* value) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_common_ans.result_json)
}
inline void user_common_ans::set_result_json(const void* value, size_t size) {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  result_json_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_common_ans.result_json)
}
inline ::std::string* user_common_ans::mutable_result_json() {
  set_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_json_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_common_ans.result_json)
  return result_json_;
}
inline ::std::string* user_common_ans::release_result_json() {
  clear_has_result_json();
  if (result_json_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_json_;
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_common_ans::set_allocated_result_json(::std::string* result_json) {
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (result_json) {
    set_has_result_json();
    result_json_ = result_json;
  } else {
    clear_has_result_json();
    result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_common_ans.result_json)
}

// -------------------------------------------------------------------

// user_labels_by_type_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_labels_by_type_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_labels_by_type_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_labels_by_type_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_labels_by_type_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_labels_by_type_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_labels_by_type_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_by_type_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_labels_by_type_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_labels_by_type_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_by_type_ask.ask_header)
}

// optional bytes id_card = 2;
inline bool user_labels_by_type_ask::has_id_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_labels_by_type_ask::set_has_id_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_labels_by_type_ask::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_labels_by_type_ask::clear_id_card() {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_->clear();
  }
  clear_has_id_card();
}
inline const ::std::string& user_labels_by_type_ask::id_card() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ask.id_card)
  return *id_card_;
}
inline void user_labels_by_type_ask::set_id_card(const ::std::string& value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_by_type_ask.id_card)
}
inline void user_labels_by_type_ask::set_id_card(const char* value) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_labels_by_type_ask.id_card)
}
inline void user_labels_by_type_ask::set_id_card(const void* value, size_t size) {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  id_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_labels_by_type_ask.id_card)
}
inline ::std::string* user_labels_by_type_ask::mutable_id_card() {
  set_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_by_type_ask.id_card)
  return id_card_;
}
inline ::std::string* user_labels_by_type_ask::release_id_card() {
  clear_has_id_card();
  if (id_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_card_;
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_labels_by_type_ask::set_allocated_id_card(::std::string* id_card) {
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (id_card) {
    set_has_id_card();
    id_card_ = id_card;
  } else {
    clear_has_id_card();
    id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_by_type_ask.id_card)
}

// optional bytes mobile_phone = 3;
inline bool user_labels_by_type_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_labels_by_type_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_labels_by_type_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_labels_by_type_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_labels_by_type_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_labels_by_type_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
}
inline void user_labels_by_type_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
}
inline void user_labels_by_type_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
}
inline ::std::string* user_labels_by_type_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_labels_by_type_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_labels_by_type_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_by_type_ask.mobile_phone)
}

// repeated int32 label_type_ids = 4;
inline int user_labels_by_type_ask::label_type_ids_size() const {
  return label_type_ids_.size();
}
inline void user_labels_by_type_ask::clear_label_type_ids() {
  label_type_ids_.Clear();
}
inline ::google::protobuf::int32 user_labels_by_type_ask::label_type_ids(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ask.label_type_ids)
  return label_type_ids_.Get(index);
}
inline void user_labels_by_type_ask::set_label_type_ids(int index, ::google::protobuf::int32 value) {
  label_type_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.user_labels_by_type_ask.label_type_ids)
}
inline void user_labels_by_type_ask::add_label_type_ids(::google::protobuf::int32 value) {
  label_type_ids_.Add(value);
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_labels_by_type_ask.label_type_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
user_labels_by_type_ask::label_type_ids() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_labels_by_type_ask.label_type_ids)
  return label_type_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
user_labels_by_type_ask::mutable_label_type_ids() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_labels_by_type_ask.label_type_ids)
  return &label_type_ids_;
}

// -------------------------------------------------------------------

// label_set

// optional int32 label_type_id = 1;
inline bool label_set::has_label_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void label_set::set_has_label_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void label_set::clear_has_label_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void label_set::clear_label_type_id() {
  label_type_id_ = 0;
  clear_has_label_type_id();
}
inline ::google::protobuf::int32 label_set::label_type_id() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_set.label_type_id)
  return label_type_id_;
}
inline void label_set::set_label_type_id(::google::protobuf::int32 value) {
  set_has_label_type_id();
  label_type_id_ = value;
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_set.label_type_id)
}

// optional bytes label_type = 2;
inline bool label_set::has_label_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void label_set::set_has_label_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void label_set::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void label_set::clear_label_type() {
  if (label_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_type_->clear();
  }
  clear_has_label_type();
}
inline const ::std::string& label_set::label_type() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_set.label_type)
  return *label_type_;
}
inline void label_set::set_label_type(const ::std::string& value) {
  set_has_label_type();
  if (label_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_type_ = new ::std::string;
  }
  label_type_->assign(value);
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_set.label_type)
}
inline void label_set::set_label_type(const char* value) {
  set_has_label_type();
  if (label_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_type_ = new ::std::string;
  }
  label_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_set.label_type)
}
inline void label_set::set_label_type(const void* value, size_t size) {
  set_has_label_type();
  if (label_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_type_ = new ::std::string;
  }
  label_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_set.label_type)
}
inline ::std::string* label_set::mutable_label_type() {
  set_has_label_type();
  if (label_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_set.label_type)
  return label_type_;
}
inline ::std::string* label_set::release_label_type() {
  clear_has_label_type();
  if (label_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_type_;
    label_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void label_set::set_allocated_label_type(::std::string* label_type) {
  if (label_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_type_;
  }
  if (label_type) {
    set_has_label_type();
    label_type_ = label_type;
  } else {
    clear_has_label_type();
    label_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.label_set.label_type)
}

// repeated bytes labels = 3;
inline int label_set::labels_size() const {
  return labels_.size();
}
inline void label_set::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& label_set::labels(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.label_set.labels)
  return labels_.Get(index);
}
inline ::std::string* label_set::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.label_set.labels)
  return labels_.Mutable(index);
}
inline void label_set::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UPS_niiwoo.label_set.labels)
  labels_.Mutable(index)->assign(value);
}
inline void label_set::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:UPS_niiwoo.label_set.labels)
}
inline void label_set::set_labels(int index, const void* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UPS_niiwoo.label_set.labels)
}
inline ::std::string* label_set::add_labels() {
  return labels_.Add();
}
inline void label_set::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:UPS_niiwoo.label_set.labels)
}
inline void label_set::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:UPS_niiwoo.label_set.labels)
}
inline void label_set::add_labels(const void* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:UPS_niiwoo.label_set.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
label_set::labels() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.label_set.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
label_set::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.label_set.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// user_labels_by_type_ans

// repeated .UPS_niiwoo.label_set labels = 1;
inline int user_labels_by_type_ans::labels_size() const {
  return labels_.size();
}
inline void user_labels_by_type_ans::clear_labels() {
  labels_.Clear();
}
inline const ::UPS_niiwoo::label_set& user_labels_by_type_ans::labels(int index) const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ans.labels)
  return labels_.Get(index);
}
inline ::UPS_niiwoo::label_set* user_labels_by_type_ans::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_by_type_ans.labels)
  return labels_.Mutable(index);
}
inline ::UPS_niiwoo::label_set* user_labels_by_type_ans::add_labels() {
  // @@protoc_insertion_point(field_add:UPS_niiwoo.user_labels_by_type_ans.labels)
  return labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_set >&
user_labels_by_type_ans::labels() const {
  // @@protoc_insertion_point(field_list:UPS_niiwoo.user_labels_by_type_ans.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::UPS_niiwoo::label_set >*
user_labels_by_type_ans::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:UPS_niiwoo.user_labels_by_type_ans.labels)
  return &labels_;
}

// optional .common.result_info result = 2;
inline bool user_labels_by_type_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_labels_by_type_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_labels_by_type_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_labels_by_type_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& user_labels_by_type_ans::result() const {
  // @@protoc_insertion_point(field_get:UPS_niiwoo.user_labels_by_type_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* user_labels_by_type_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UPS_niiwoo.user_labels_by_type_ans.result)
  return result_;
}
inline ::common::result_info* user_labels_by_type_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void user_labels_by_type_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UPS_niiwoo.user_labels_by_type_ans.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UPS_niiwoo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UPS_5fniiwoo_2eproto__INCLUDED
