// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFP_main_frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AFP_main_frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AFP_main_frame {

namespace {

const ::google::protobuf::Descriptor* interface_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interface_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* interface_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interface_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* emergency_contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emergency_contact_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* data_sources_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  data_sources_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_service_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_hit_statistics_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_hit_statistics_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_user_analyze_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_user_analyze_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_rule_analyze_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_rule_analyze_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_detail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_detail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_data_sources_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_data_sources_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_data_sources_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_data_sources_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_query_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_query_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_query_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_query_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_save_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_save_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_save_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_save_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_remove_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_remove_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* blacklist_remove_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  blacklist_remove_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_trace_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_trace_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_trace_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_trace_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_trace_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_trace_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_score_interval_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_score_interval_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_score_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_score_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_score_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_score_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_model_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_model_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_detail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_detail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_model_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_model_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_model_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_model_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_verify_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_verify_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_model_verify_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_model_verify_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_model_verify_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_model_verify_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* third_platform_verify_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  third_platform_verify_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* identity_sync_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  identity_sync_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* identity_sync_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  identity_sync_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_verify_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_verify_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_verify_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_verify_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_verify_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_verify_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_hit_statistics_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_hit_statistics_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* model_hit_statistics_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_hit_statistics_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_user_property_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_user_property_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_user_property_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_user_property_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_rule_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_rule_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_rule_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_rule_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* hit_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hit_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_location_track_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_location_track_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_location_track_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_location_track_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_location_track_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_location_track_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* by_inquirers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  by_inquirers_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_info_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* AFP_LandedAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AFP_LandedAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* phone_contacts_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phone_contacts_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* platform_register_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  platform_register_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* phone_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phone_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* yuliu_common_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yuliu_common_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* yuliu_platform_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yuliu_platform_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* phones_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phones_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* phone_contacts_analyze_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phone_contacts_analyze_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* phone_contacts_analyze_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phone_contacts_analyze_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* function_verification_in_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  function_verification_in_reflection_ = NULL;
const ::google::protobuf::Descriptor* function_verification_out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  function_verification_out_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_verification_list_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_verification_list_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_verification_list_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_verification_list_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* batch_verify_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  batch_verify_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* batch_verify_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  batch_verify_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_name_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* detail_early_warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detail_early_warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistical_Intel_warning_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistical_Intel_warning_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistical_early_warning_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistical_early_warning_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* statistical_Intel_warning_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statistical_Intel_warning_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* detail_early_warning_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detail_early_warning_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* detail_early_warning_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  detail_early_warning_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_the_warning_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_the_warning_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancel_the_warning_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancel_the_warning_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_save_warning_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_save_warning_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* modify_save_warning_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  modify_save_warning_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* bid_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bid_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrow_bid_detail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrow_bid_detail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* qiaoqiao_bid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qiaoqiao_bid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* borrow_bid_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  borrow_bid_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* qiaoqiao_bid_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qiaoqiao_bid_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_city_inquire_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_city_inquire_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_city_inquire_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_city_inquire_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* friendqunList_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friendqunList_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* friendqunList_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friendqunList_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* single_msg_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_msg_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* single_msg_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_msg_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_msg_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_msg_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_msg_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_msg_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* usebasicinfo_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  usebasicinfo_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* usebasicinfo_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  usebasicinfo_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* afp_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  afp_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* ccs_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ccs_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ccs_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ccs_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ccs_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ccs_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* weidanbao_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  weidanbao_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* weidanbao_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  weidanbao_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* weidanbao_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  weidanbao_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qiaoqiaoccs_detail_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qiaoqiaoccs_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qiaoqiaoccs_detail_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_request_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_request_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_request_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_request_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_response_monitor_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_response_monitor_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* credit_response_monitor_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  credit_response_monitor_ans_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_verification_history_ask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_verification_history_ask_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_verification_history_ans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_verification_history_ans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* platform_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* overdue_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* function_serial_number_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto() {
  protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AFP_main_frame.proto");
  GOOGLE_CHECK(file != NULL);
  interface_info_ask_descriptor_ = file->message_type(0);
  static const int interface_info_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, json_ask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, ask_header_),
  };
  interface_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interface_info_ask_descriptor_,
      interface_info_ask::default_instance_,
      interface_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interface_info_ask));
  interface_info_ans_descriptor_ = file->message_type(1);
  static const int interface_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, json_ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, error_),
  };
  interface_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interface_info_ans_descriptor_,
      interface_info_ans::default_instance_,
      interface_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interface_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interface_info_ans));
  emergency_contact_descriptor_ = file->message_type(2);
  static const int emergency_contact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emergency_contact, appellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emergency_contact, kin_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emergency_contact, kin_phone_),
  };
  emergency_contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emergency_contact_descriptor_,
      emergency_contact::default_instance_,
      emergency_contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emergency_contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emergency_contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emergency_contact));
  blacklist_user_info_descriptor_ = file->message_type(3);
  static const int blacklist_user_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, loan_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, loan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, also_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, overdue_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, repayment_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, overdue_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, cheat_severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, data_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, operation_personnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, operation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, update_time_),
  };
  blacklist_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_user_info_descriptor_,
      blacklist_user_info::default_instance_,
      blacklist_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_user_info));
  data_sources_info_descriptor_ = file->message_type(4);
  static const int data_sources_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, sources_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, sources_name_),
  };
  data_sources_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      data_sources_info_descriptor_,
      data_sources_info::default_instance_,
      data_sources_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data_sources_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(data_sources_info));
  platform_info_descriptor_ = file->message_type(5);
  static const int platform_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info, platform_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info, platform_name_),
  };
  platform_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_info_descriptor_,
      platform_info::default_instance_,
      platform_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_info));
  platform_service_descriptor_ = file->message_type(6);
  static const int platform_service_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_service, serivce_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_service, service_name_),
  };
  platform_service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_service_descriptor_,
      platform_service::default_instance_,
      platform_service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_service));
  model_hit_statistics_info_descriptor_ = file->message_type(7);
  static const int model_hit_statistics_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_info, platform_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_info, total_number_),
  };
  model_hit_statistics_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_hit_statistics_info_descriptor_,
      model_hit_statistics_info::default_instance_,
      model_hit_statistics_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_hit_statistics_info));
  hit_user_info_descriptor_ = file->message_type(8);
  static const int hit_user_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, platform_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, hit_result_),
  };
  hit_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_user_info_descriptor_,
      hit_user_info::default_instance_,
      hit_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_user_info));
  hit_user_analyze_info_descriptor_ = file->message_type(9);
  static const int hit_user_analyze_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_analyze_info, property_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_analyze_info, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_analyze_info, percent_),
  };
  hit_user_analyze_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_user_analyze_info_descriptor_,
      hit_user_analyze_info::default_instance_,
      hit_user_analyze_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_analyze_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_analyze_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_user_analyze_info));
  hit_rule_analyze_info_descriptor_ = file->message_type(10);
  static const int hit_rule_analyze_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, third_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, percent_),
  };
  hit_rule_analyze_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_rule_analyze_info_descriptor_,
      hit_rule_analyze_info::default_instance_,
      hit_rule_analyze_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_rule_analyze_info));
  hit_detail_info_descriptor_ = file->message_type(11);
  static const int hit_detail_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_info, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_info, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_info, hit_rule_),
  };
  hit_detail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_detail_info_descriptor_,
      hit_detail_info::default_instance_,
      hit_detail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_detail_info));
  blacklist_data_sources_ask_descriptor_ = file->message_type(12);
  static const int blacklist_data_sources_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ask, ask_header_),
  };
  blacklist_data_sources_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_data_sources_ask_descriptor_,
      blacklist_data_sources_ask::default_instance_,
      blacklist_data_sources_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_data_sources_ask));
  blacklist_data_sources_ans_descriptor_ = file->message_type(13);
  static const int blacklist_data_sources_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ans, error_),
  };
  blacklist_data_sources_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_data_sources_ans_descriptor_,
      blacklist_data_sources_ans::default_instance_,
      blacklist_data_sources_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_data_sources_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_data_sources_ans));
  blacklist_query_ask_descriptor_ = file->message_type(14);
  static const int blacklist_query_ask_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, min_overdue_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, max_overdue_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, min_also_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, max_also_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, repayment_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, min_overdue_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, max_overdue_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, cheat_severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, data_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, ask_header_),
  };
  blacklist_query_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_query_ask_descriptor_,
      blacklist_query_ask::default_instance_,
      blacklist_query_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_query_ask));
  blacklist_query_ans_descriptor_ = file->message_type(15);
  static const int blacklist_query_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ans, error_),
  };
  blacklist_query_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_query_ans_descriptor_,
      blacklist_query_ans::default_instance_,
      blacklist_query_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_query_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_query_ans));
  blacklist_detail_ask_descriptor_ = file->message_type(16);
  static const int blacklist_detail_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ask, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ask, ask_header_),
  };
  blacklist_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_detail_ask_descriptor_,
      blacklist_detail_ask::default_instance_,
      blacklist_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_detail_ask));
  blacklist_detail_ans_descriptor_ = file->message_type(17);
  static const int blacklist_detail_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ans, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ans, error_),
  };
  blacklist_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_detail_ans_descriptor_,
      blacklist_detail_ans::default_instance_,
      blacklist_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_detail_ans));
  blacklist_save_ask_descriptor_ = file->message_type(18);
  static const int blacklist_save_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ask, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ask, ask_header_),
  };
  blacklist_save_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_save_ask_descriptor_,
      blacklist_save_ask::default_instance_,
      blacklist_save_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_save_ask));
  blacklist_save_ans_descriptor_ = file->message_type(19);
  static const int blacklist_save_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ans, error_),
  };
  blacklist_save_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_save_ans_descriptor_,
      blacklist_save_ans::default_instance_,
      blacklist_save_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_save_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_save_ans));
  blacklist_remove_ask_descriptor_ = file->message_type(20);
  static const int blacklist_remove_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ask, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ask, ask_header_),
  };
  blacklist_remove_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_remove_ask_descriptor_,
      blacklist_remove_ask::default_instance_,
      blacklist_remove_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_remove_ask));
  blacklist_remove_ans_descriptor_ = file->message_type(21);
  static const int blacklist_remove_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ans, error_),
  };
  blacklist_remove_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      blacklist_remove_ans_descriptor_,
      blacklist_remove_ans::default_instance_,
      blacklist_remove_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(blacklist_remove_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(blacklist_remove_ans));
  auto_trace_info_descriptor_ = file->message_type(22);
  static const int auto_trace_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, trace_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, own_blacklist_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, qhzh_blacklist_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, td_blacklist_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, area_),
  };
  auto_trace_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_trace_info_descriptor_,
      auto_trace_info::default_instance_,
      auto_trace_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_trace_info));
  auto_trace_ask_descriptor_ = file->message_type(23);
  static const int auto_trace_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, trace_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, ask_header_),
  };
  auto_trace_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_trace_ask_descriptor_,
      auto_trace_ask::default_instance_,
      auto_trace_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_trace_ask));
  auto_trace_ans_descriptor_ = file->message_type(24);
  static const int auto_trace_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ans, error_),
  };
  auto_trace_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_trace_ans_descriptor_,
      auto_trace_ans::default_instance_,
      auto_trace_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_trace_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_trace_ans));
  credit_score_interval_info_descriptor_ = file->message_type(25);
  static const int credit_score_interval_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_interval_info, score_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_interval_info, total_number_),
  };
  credit_score_interval_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_score_interval_info_descriptor_,
      credit_score_interval_info::default_instance_,
      credit_score_interval_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_interval_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_interval_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_score_interval_info));
  credit_score_statistics_ask_descriptor_ = file->message_type(26);
  static const int credit_score_statistics_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ask, ask_header_),
  };
  credit_score_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_score_statistics_ask_descriptor_,
      credit_score_statistics_ask::default_instance_,
      credit_score_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_score_statistics_ask));
  credit_score_statistics_ans_descriptor_ = file->message_type(27);
  static const int credit_score_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ans, error_),
  };
  credit_score_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_score_statistics_ans_descriptor_,
      credit_score_statistics_ans::default_instance_,
      credit_score_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_score_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_score_statistics_ans));
  credit_ask_descriptor_ = file->message_type(28);
  static const int credit_ask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, score_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, ask_header_),
  };
  credit_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_ask_descriptor_,
      credit_ask::default_instance_,
      credit_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_ask));
  credit_info_descriptor_ = file->message_type(29);
  static const int credit_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_info, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_info, credit_score_),
  };
  credit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_info_descriptor_,
      credit_info::default_instance_,
      credit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_info));
  credit_ans_descriptor_ = file->message_type(30);
  static const int credit_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ans, error_),
  };
  credit_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_ans_descriptor_,
      credit_ans::default_instance_,
      credit_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_ans));
  verify_model_info_descriptor_ = file->message_type(31);
  static const int verify_model_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_info, model_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_info, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_info, total_number_),
  };
  verify_model_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_model_info_descriptor_,
      verify_model_info::default_instance_,
      verify_model_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_model_info));
  verify_detail_info_descriptor_ = file->message_type(32);
  static const int verify_detail_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, pass_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, pass_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, no_pass_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, no_pass_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, human_review_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, human_review_percent_),
  };
  verify_detail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_detail_info_descriptor_,
      verify_detail_info::default_instance_,
      verify_detail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_detail_info));
  verify_model_ask_descriptor_ = file->message_type(33);
  static const int verify_model_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ask, ask_header_),
  };
  verify_model_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_model_ask_descriptor_,
      verify_model_ask::default_instance_,
      verify_model_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_model_ask));
  verify_model_ans_descriptor_ = file->message_type(34);
  static const int verify_model_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ans, error_),
  };
  verify_model_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_model_ans_descriptor_,
      verify_model_ans::default_instance_,
      verify_model_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_model_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_model_ans));
  verify_detail_ask_descriptor_ = file->message_type(35);
  static const int verify_detail_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, ask_header_),
  };
  verify_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_detail_ask_descriptor_,
      verify_detail_ask::default_instance_,
      verify_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_detail_ask));
  verify_detail_ans_descriptor_ = file->message_type(36);
  static const int verify_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ans, error_),
  };
  verify_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_detail_ans_descriptor_,
      verify_detail_ans::default_instance_,
      verify_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_detail_ans));
  afp_verify_info_descriptor_ = file->message_type(37);
  static const int afp_verify_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_verify_info, model_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_verify_info, verify_result_),
  };
  afp_verify_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_verify_info_descriptor_,
      afp_verify_info::default_instance_,
      afp_verify_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_verify_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_verify_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_verify_info));
  afp_model_verify_ask_descriptor_ = file->message_type(38);
  static const int afp_model_verify_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, model_nos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, ask_header_),
  };
  afp_model_verify_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_model_verify_ask_descriptor_,
      afp_model_verify_ask::default_instance_,
      afp_model_verify_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_model_verify_ask));
  afp_model_verify_ans_descriptor_ = file->message_type(39);
  static const int afp_model_verify_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, verify_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, error_),
  };
  afp_model_verify_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_model_verify_ans_descriptor_,
      afp_model_verify_ans::default_instance_,
      afp_model_verify_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_model_verify_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_model_verify_ans));
  third_platform_verify_info_descriptor_ = file->message_type(40);
  static const int third_platform_verify_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, platform_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, serivce_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, param10_),
  };
  third_platform_verify_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      third_platform_verify_info_descriptor_,
      third_platform_verify_info::default_instance_,
      third_platform_verify_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(third_platform_verify_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(third_platform_verify_info));
  identity_sync_ask_descriptor_ = file->message_type(41);
  static const int identity_sync_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, ask_header_),
  };
  identity_sync_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      identity_sync_ask_descriptor_,
      identity_sync_ask::default_instance_,
      identity_sync_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(identity_sync_ask));
  identity_sync_ans_descriptor_ = file->message_type(42);
  static const int identity_sync_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ans, verify_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ans, error_),
  };
  identity_sync_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      identity_sync_ans_descriptor_,
      identity_sync_ans::default_instance_,
      identity_sync_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(identity_sync_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(identity_sync_ans));
  model_verify_info_descriptor_ = file->message_type(43);
  static const int model_verify_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_info, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_info, status_),
  };
  model_verify_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_verify_info_descriptor_,
      model_verify_info::default_instance_,
      model_verify_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_verify_info));
  model_verify_ask_descriptor_ = file->message_type(44);
  static const int model_verify_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ask, ask_header_),
  };
  model_verify_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_verify_ask_descriptor_,
      model_verify_ask::default_instance_,
      model_verify_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_verify_ask));
  model_verify_ans_descriptor_ = file->message_type(45);
  static const int model_verify_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ans, error_),
  };
  model_verify_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_verify_ans_descriptor_,
      model_verify_ans::default_instance_,
      model_verify_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_verify_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_verify_ans));
  platform_info_ask_descriptor_ = file->message_type(46);
  static const int platform_info_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ask, ask_header_),
  };
  platform_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_info_ask_descriptor_,
      platform_info_ask::default_instance_,
      platform_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_info_ask));
  platform_info_ans_descriptor_ = file->message_type(47);
  static const int platform_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ans, error_),
  };
  platform_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_info_ans_descriptor_,
      platform_info_ans::default_instance_,
      platform_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_info_ans));
  model_hit_statistics_ask_descriptor_ = file->message_type(48);
  static const int model_hit_statistics_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ask, ask_header_),
  };
  model_hit_statistics_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_hit_statistics_ask_descriptor_,
      model_hit_statistics_ask::default_instance_,
      model_hit_statistics_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_hit_statistics_ask));
  model_hit_statistics_ans_descriptor_ = file->message_type(49);
  static const int model_hit_statistics_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ans, error_),
  };
  model_hit_statistics_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      model_hit_statistics_ans_descriptor_,
      model_hit_statistics_ans::default_instance_,
      model_hit_statistics_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_hit_statistics_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(model_hit_statistics_ans));
  hit_list_ask_descriptor_ = file->message_type(50);
  static const int hit_list_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, platform_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, ask_header_),
  };
  hit_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_list_ask_descriptor_,
      hit_list_ask::default_instance_,
      hit_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_list_ask));
  hit_list_ans_descriptor_ = file->message_type(51);
  static const int hit_list_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ans, error_),
  };
  hit_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_list_ans_descriptor_,
      hit_list_ans::default_instance_,
      hit_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_list_ans));
  hit_user_property_analyze_ask_descriptor_ = file->message_type(52);
  static const int hit_user_property_analyze_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ask, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ask, ask_header_),
  };
  hit_user_property_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_user_property_analyze_ask_descriptor_,
      hit_user_property_analyze_ask::default_instance_,
      hit_user_property_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_user_property_analyze_ask));
  hit_user_property_analyze_ans_descriptor_ = file->message_type(53);
  static const int hit_user_property_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ans, error_),
  };
  hit_user_property_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_user_property_analyze_ans_descriptor_,
      hit_user_property_analyze_ans::default_instance_,
      hit_user_property_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_user_property_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_user_property_analyze_ans));
  hit_rule_analyze_ask_descriptor_ = file->message_type(54);
  static const int hit_rule_analyze_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, platform_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, ask_header_),
  };
  hit_rule_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_rule_analyze_ask_descriptor_,
      hit_rule_analyze_ask::default_instance_,
      hit_rule_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_rule_analyze_ask));
  hit_rule_analyze_ans_descriptor_ = file->message_type(55);
  static const int hit_rule_analyze_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ans, error_),
  };
  hit_rule_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_rule_analyze_ans_descriptor_,
      hit_rule_analyze_ans::default_instance_,
      hit_rule_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_rule_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_rule_analyze_ans));
  hit_detail_ask_descriptor_ = file->message_type(56);
  static const int hit_detail_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, platform_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, ask_header_),
  };
  hit_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_detail_ask_descriptor_,
      hit_detail_ask::default_instance_,
      hit_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_detail_ask));
  hit_detail_ans_descriptor_ = file->message_type(57);
  static const int hit_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ans, error_),
  };
  hit_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hit_detail_ans_descriptor_,
      hit_detail_ans::default_instance_,
      hit_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hit_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hit_detail_ans));
  user_location_track_info_descriptor_ = file->message_type(58);
  static const int user_location_track_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, location_name_),
  };
  user_location_track_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_location_track_info_descriptor_,
      user_location_track_info::default_instance_,
      user_location_track_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_location_track_info));
  user_location_track_ask_descriptor_ = file->message_type(59);
  static const int user_location_track_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, is_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, ask_header_),
  };
  user_location_track_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_location_track_ask_descriptor_,
      user_location_track_ask::default_instance_,
      user_location_track_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_location_track_ask));
  user_location_track_ans_descriptor_ = file->message_type(60);
  static const int user_location_track_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ans, error_),
  };
  user_location_track_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_location_track_ans_descriptor_,
      user_location_track_ans::default_instance_,
      user_location_track_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_location_track_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_location_track_ans));
  by_inquirers_descriptor_ = file->message_type(61);
  static const int by_inquirers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(by_inquirers, identity_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(by_inquirers, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(by_inquirers, real_name_),
  };
  by_inquirers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      by_inquirers_descriptor_,
      by_inquirers::default_instance_,
      by_inquirers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(by_inquirers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(by_inquirers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(by_inquirers));
  user_info_ask_descriptor_ = file->message_type(62);
  static const int user_info_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, inquirers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, is_normal_),
  };
  user_info_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_ask_descriptor_,
      user_info_ask::default_instance_,
      user_info_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info_ask));
  user_info_ans_descriptor_ = file->message_type(63);
  static const int user_info_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, error_),
  };
  user_info_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_ans_descriptor_,
      user_info_ans::default_instance_,
      user_info_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info_ans));
  AFP_LandedAccount_descriptor_ = file->message_type(64);
  static const int AFP_LandedAccount_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, common_terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, is_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, last_login_time_),
  };
  AFP_LandedAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AFP_LandedAccount_descriptor_,
      AFP_LandedAccount::default_instance_,
      AFP_LandedAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AFP_LandedAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AFP_LandedAccount));
  phone_contacts_info_descriptor_ = file->message_type(65);
  static const int phone_contacts_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, note_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, is_kinship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, is_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, remove_time_),
  };
  phone_contacts_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phone_contacts_info_descriptor_,
      phone_contacts_info::default_instance_,
      phone_contacts_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phone_contacts_info));
  platform_register_user_info_descriptor_ = file->message_type(66);
  static const int platform_register_user_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, adressbook_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, platfom_type_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, overdue_type_enum_),
  };
  platform_register_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      platform_register_user_info_descriptor_,
      platform_register_user_info::default_instance_,
      platform_register_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(platform_register_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(platform_register_user_info));
  phone_info_descriptor_ = file->message_type(67);
  static const int phone_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, brand_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, is_common_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, landedaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, platform_register_user_),
  };
  phone_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phone_info_descriptor_,
      phone_info::default_instance_,
      phone_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phone_info));
  yuliu_common_user_info_descriptor_ = file->message_type(68);
  static const int yuliu_common_user_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, relation_),
  };
  yuliu_common_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yuliu_common_user_info_descriptor_,
      yuliu_common_user_info::default_instance_,
      yuliu_common_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_common_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yuliu_common_user_info));
  yuliu_platform_user_info_descriptor_ = file->message_type(69);
  static const int yuliu_platform_user_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, user_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, sex_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, chonghe_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, is_in_adressbook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, adressbook_remark_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, comm_info_),
  };
  yuliu_platform_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yuliu_platform_user_info_descriptor_,
      yuliu_platform_user_info::default_instance_,
      yuliu_platform_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yuliu_platform_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yuliu_platform_user_info));
  phones_info_descriptor_ = file->message_type(70);
  static const int phones_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, common_terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, is_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, yuliu_common_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, yuliu_platform_user_),
  };
  phones_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phones_info_descriptor_,
      phones_info::default_instance_,
      phones_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phones_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phones_info));
  phone_contacts_analyze_ask_descriptor_ = file->message_type(71);
  static const int phone_contacts_analyze_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, is_normal_),
  };
  phone_contacts_analyze_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phone_contacts_analyze_ask_descriptor_,
      phone_contacts_analyze_ask::default_instance_,
      phone_contacts_analyze_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phone_contacts_analyze_ask));
  phone_contacts_analyze_ans_descriptor_ = file->message_type(72);
  static const int phone_contacts_analyze_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ans, error_),
  };
  phone_contacts_analyze_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phone_contacts_analyze_ans_descriptor_,
      phone_contacts_analyze_ans::default_instance_,
      phone_contacts_analyze_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phone_contacts_analyze_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phone_contacts_analyze_ans));
  function_verification_in_descriptor_ = file->message_type(73);
  static const int function_verification_in_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_in, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_in, number_),
  };
  function_verification_in_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      function_verification_in_descriptor_,
      function_verification_in::default_instance_,
      function_verification_in_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_in, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_in, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(function_verification_in));
  function_verification_out_descriptor_ = file->message_type(74);
  static const int function_verification_out_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_out, json_ans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_out, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_out, result_time_),
  };
  function_verification_out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      function_verification_out_descriptor_,
      function_verification_out::default_instance_,
      function_verification_out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(function_verification_out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(function_verification_out));
  user_verification_list_ask_descriptor_ = file->message_type(75);
  static const int user_verification_list_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ask, fucver_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ask, ask_header_),
  };
  user_verification_list_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_verification_list_ask_descriptor_,
      user_verification_list_ask::default_instance_,
      user_verification_list_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_verification_list_ask));
  user_verification_list_ans_descriptor_ = file->message_type(76);
  static const int user_verification_list_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ans, fucver_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ans, error_),
  };
  user_verification_list_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_verification_list_ans_descriptor_,
      user_verification_list_ans::default_instance_,
      user_verification_list_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_list_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_verification_list_ans));
  verify_info_descriptor_ = file->message_type(77);
  static const int verify_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, verify_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, inquire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, json_result_),
  };
  verify_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_info_descriptor_,
      verify_info::default_instance_,
      verify_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_info));
  batch_verify_ask_descriptor_ = file->message_type(78);
  static const int batch_verify_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, inquire_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, number_),
  };
  batch_verify_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      batch_verify_ask_descriptor_,
      batch_verify_ask::default_instance_,
      batch_verify_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(batch_verify_ask));
  batch_verify_ans_descriptor_ = file->message_type(79);
  static const int batch_verify_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, result_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, inquire_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, number_),
  };
  batch_verify_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      batch_verify_ans_descriptor_,
      batch_verify_ans::default_instance_,
      batch_verify_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(batch_verify_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(batch_verify_ans));
  area_name_descriptor_ = file->message_type(80);
  static const int area_name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, name_),
  };
  area_name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_name_descriptor_,
      area_name::default_instance_,
      area_name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_name));
  bid_info_descriptor_ = file->message_type(81);
  static const int bid_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrow_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, bid_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrower_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrow_describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrow_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, borrow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, mortgage_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, mode_of_repayment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, lp_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, amount_guaranteed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, rob_lp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, lp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, lp_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, is_indeed_lp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, reasons_for_guarantee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, picture_url_),
  };
  bid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_info_descriptor_,
      bid_info::default_instance_,
      bid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_info));
  detail_early_warning_descriptor_ = file->message_type(82);
  static const int detail_early_warning_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, loan_bid_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, qiao_qiao_loan_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, warn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, warn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, status_early_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, operater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, operator_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, warn_reason_),
  };
  detail_early_warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detail_early_warning_descriptor_,
      detail_early_warning::default_instance_,
      detail_early_warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detail_early_warning));
  statistical_Intel_warning_ask_descriptor_ = file->message_type(83);
  static const int statistical_Intel_warning_ask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ask, ask_header_),
  };
  statistical_Intel_warning_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistical_Intel_warning_ask_descriptor_,
      statistical_Intel_warning_ask::default_instance_,
      statistical_Intel_warning_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistical_Intel_warning_ask));
  statistical_early_warning_ans_descriptor_ = file->message_type(84);
  static const int statistical_early_warning_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, borrow_bid_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, early_warning_bid_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, early_warning_and_risk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, early_warning_overdue_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, result_),
  };
  statistical_early_warning_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistical_early_warning_ans_descriptor_,
      statistical_early_warning_ans::default_instance_,
      statistical_early_warning_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_early_warning_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistical_early_warning_ans));
  statistical_Intel_warning_ans_descriptor_ = file->message_type(85);
  static const int statistical_Intel_warning_ans_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, cur_user_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, qiandabao_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, weidabao_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, credit_borrow_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, qiaoqiao_bid_amount_),
  };
  statistical_Intel_warning_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statistical_Intel_warning_ans_descriptor_,
      statistical_Intel_warning_ans::default_instance_,
      statistical_Intel_warning_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statistical_Intel_warning_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statistical_Intel_warning_ans));
  detail_early_warning_ask_descriptor_ = file->message_type(86);
  static const int detail_early_warning_ask_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, id_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, warn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, status_early_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, ask_header_),
  };
  detail_early_warning_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detail_early_warning_ask_descriptor_,
      detail_early_warning_ask::default_instance_,
      detail_early_warning_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detail_early_warning_ask));
  detail_early_warning_ans_descriptor_ = file->message_type(87);
  static const int detail_early_warning_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ans, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ans, result_),
  };
  detail_early_warning_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      detail_early_warning_ans_descriptor_,
      detail_early_warning_ans::default_instance_,
      detail_early_warning_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(detail_early_warning_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(detail_early_warning_ans));
  cancel_the_warning_ask_descriptor_ = file->message_type(88);
  static const int cancel_the_warning_ask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ask, borrow_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ask, cancel_the_warning_operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ask, ask_header_),
  };
  cancel_the_warning_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_the_warning_ask_descriptor_,
      cancel_the_warning_ask::default_instance_,
      cancel_the_warning_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_the_warning_ask));
  cancel_the_warning_ans_descriptor_ = file->message_type(89);
  static const int cancel_the_warning_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, borrow_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, status_early_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, cancel_the_warn_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, cancel_the_warning_operation_),
  };
  cancel_the_warning_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancel_the_warning_ans_descriptor_,
      cancel_the_warning_ans::default_instance_,
      cancel_the_warning_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancel_the_warning_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancel_the_warning_ans));
  modify_save_warning_ask_descriptor_ = file->message_type(90);
  static const int modify_save_warning_ask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, operater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, operater_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, remark_),
  };
  modify_save_warning_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_save_warning_ask_descriptor_,
      modify_save_warning_ask::default_instance_,
      modify_save_warning_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_save_warning_ask));
  modify_save_warning_ans_descriptor_ = file->message_type(91);
  static const int modify_save_warning_ans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ans, result_),
  };
  modify_save_warning_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      modify_save_warning_ans_descriptor_,
      modify_save_warning_ans::default_instance_,
      modify_save_warning_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modify_save_warning_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(modify_save_warning_ans));
  bid_detail_ask_descriptor_ = file->message_type(92);
  static const int bid_detail_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, mobile_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, id_no_),
  };
  bid_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bid_detail_ask_descriptor_,
      bid_detail_ask::default_instance_,
      bid_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bid_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bid_detail_ask));
  borrow_bid_detail_info_descriptor_ = file->message_type(93);
  static const int borrow_bid_detail_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, bid_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, guaranteed_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_bid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, borrow_bid_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, jindiao_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, amount_guaranteed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, lp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, is_indeed_lp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, already_reback_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, wait_reback_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, lp_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, reasons_for_guarantee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, picture_url_),
  };
  borrow_bid_detail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrow_bid_detail_info_descriptor_,
      borrow_bid_detail_info::default_instance_,
      borrow_bid_detail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrow_bid_detail_info));
  qiaoqiao_bid_info_descriptor_ = file->message_type(94);
  static const int qiaoqiao_bid_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, borrow_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, bid_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, borrow_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, borrow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, repayment_deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, publish_borrow_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, borrow_bid_status_),
  };
  qiaoqiao_bid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qiaoqiao_bid_info_descriptor_,
      qiaoqiao_bid_info::default_instance_,
      qiaoqiao_bid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qiaoqiao_bid_info));
  borrow_bid_detail_ans_descriptor_ = file->message_type(95);
  static const int borrow_bid_detail_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_ans, info_),
  };
  borrow_bid_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      borrow_bid_detail_ans_descriptor_,
      borrow_bid_detail_ans::default_instance_,
      borrow_bid_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(borrow_bid_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(borrow_bid_detail_ans));
  qiaoqiao_bid_ans_descriptor_ = file->message_type(96);
  static const int qiaoqiao_bid_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_ans, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_ans, info_),
  };
  qiaoqiao_bid_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qiaoqiao_bid_ans_descriptor_,
      qiaoqiao_bid_ans::default_instance_,
      qiaoqiao_bid_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiao_bid_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qiaoqiao_bid_ans));
  province_city_inquire_ask_descriptor_ = file->message_type(97);
  static const int province_city_inquire_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, ask_header_),
  };
  province_city_inquire_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      province_city_inquire_ask_descriptor_,
      province_city_inquire_ask::default_instance_,
      province_city_inquire_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(province_city_inquire_ask));
  province_city_inquire_ans_descriptor_ = file->message_type(98);
  static const int province_city_inquire_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, province_or_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, result_),
  };
  province_city_inquire_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      province_city_inquire_ans_descriptor_,
      province_city_inquire_ans::default_instance_,
      province_city_inquire_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_city_inquire_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(province_city_inquire_ans));
  friend_info_descriptor_ = file->message_type(99);
  static const int friend_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, friend_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, updatetime_),
  };
  friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_info_descriptor_,
      friend_info::default_instance_,
      friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_info));
  group_info_descriptor_ = file->message_type(100);
  static const int group_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, qun_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, updatetime_),
  };
  group_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_info_descriptor_,
      group_info::default_instance_,
      group_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_info));
  friendqunList_ask_descriptor_ = file->message_type(101);
  static const int friendqunList_ask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, is_normal_),
  };
  friendqunList_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friendqunList_ask_descriptor_,
      friendqunList_ask::default_instance_,
      friendqunList_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friendqunList_ask));
  friendqunList_ans_descriptor_ = file->message_type(102);
  static const int friendqunList_ans_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, group_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, error_),
  };
  friendqunList_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friendqunList_ans_descriptor_,
      friendqunList_ans::default_instance_,
      friendqunList_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friendqunList_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friendqunList_ans));
  msg_info_descriptor_ = file->message_type(103);
  static const int msg_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, recv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, msg_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, voice_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, thumb_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, thumb_hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, json_body_),
  };
  msg_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_info_descriptor_,
      msg_info::default_instance_,
      msg_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_info));
  single_msg_ask_descriptor_ = file->message_type(104);
  static const int single_msg_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, u_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, friend_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, ask_header_),
  };
  single_msg_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_msg_ask_descriptor_,
      single_msg_ask::default_instance_,
      single_msg_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_msg_ask));
  single_msg_ans_descriptor_ = file->message_type(105);
  static const int single_msg_ans_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, u_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, friend_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, msg_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, error_),
  };
  single_msg_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_msg_ans_descriptor_,
      single_msg_ans::default_instance_,
      single_msg_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_msg_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_msg_ans));
  group_msg_ask_descriptor_ = file->message_type(106);
  static const int group_msg_ask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, u_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, ask_header_),
  };
  group_msg_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_msg_ask_descriptor_,
      group_msg_ask::default_instance_,
      group_msg_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_msg_ask));
  group_msg_ans_descriptor_ = file->message_type(107);
  static const int group_msg_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, u_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, groupmsg_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, error_),
  };
  group_msg_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_msg_ans_descriptor_,
      group_msg_ans::default_instance_,
      group_msg_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_msg_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_msg_ans));
  usebasicinfo_ask_descriptor_ = file->message_type(108);
  static const int usebasicinfo_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ask, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ask, ask_header_),
  };
  usebasicinfo_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      usebasicinfo_ask_descriptor_,
      usebasicinfo_ask::default_instance_,
      usebasicinfo_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(usebasicinfo_ask));
  usebasicinfo_ans_descriptor_ = file->message_type(109);
  static const int usebasicinfo_ans_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, is_overdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, error_),
  };
  usebasicinfo_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      usebasicinfo_ans_descriptor_,
      usebasicinfo_ans::default_instance_,
      usebasicinfo_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(usebasicinfo_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(usebasicinfo_ans));
  afp_detail_ask_descriptor_ = file->message_type(110);
  static const int afp_detail_ask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, model_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, cur_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, ask_header_),
  };
  afp_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_detail_ask_descriptor_,
      afp_detail_ask::default_instance_,
      afp_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_detail_ask));
  afp_detail_descriptor_ = file->message_type(111);
  static const int afp_detail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, result_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, model_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, error_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, request_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, result_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, version_),
  };
  afp_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_detail_descriptor_,
      afp_detail::default_instance_,
      afp_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_detail));
  afp_detail_ans_descriptor_ = file->message_type(112);
  static const int afp_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ans, afp_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ans, total_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ans, error_),
  };
  afp_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      afp_detail_ans_descriptor_,
      afp_detail_ans::default_instance_,
      afp_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(afp_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(afp_detail_ans));
  ccs_detail_ask_descriptor_ = file->message_type(113);
  static const int ccs_detail_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, cur_page_),
  };
  ccs_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ccs_detail_ask_descriptor_,
      ccs_detail_ask::default_instance_,
      ccs_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ccs_detail_ask));
  ccs_detail_descriptor_ = file->message_type(114);
  static const int ccs_detail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, result_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, cur_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, sum_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, request_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, result_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, version_),
  };
  ccs_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ccs_detail_descriptor_,
      ccs_detail::default_instance_,
      ccs_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ccs_detail));
  ccs_detail_ans_descriptor_ = file->message_type(115);
  static const int ccs_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ans, ccs_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ans, total_number_),
  };
  ccs_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ccs_detail_ans_descriptor_,
      ccs_detail_ans::default_instance_,
      ccs_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ccs_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ccs_detail_ans));
  weidanbao_detail_ask_descriptor_ = file->message_type(116);
  static const int weidanbao_detail_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, cur_page_),
  };
  weidanbao_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      weidanbao_detail_ask_descriptor_,
      weidanbao_detail_ask::default_instance_,
      weidanbao_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(weidanbao_detail_ask));
  weidanbao_detail_descriptor_ = file->message_type(117);
  static const int weidanbao_detail_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, cur_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, sum_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, request_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, result_json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, version_),
  };
  weidanbao_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      weidanbao_detail_descriptor_,
      weidanbao_detail::default_instance_,
      weidanbao_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(weidanbao_detail));
  weidanbao_detail_ans_descriptor_ = file->message_type(118);
  static const int weidanbao_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ans, weidanbao_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ans, total_number_),
  };
  weidanbao_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      weidanbao_detail_ans_descriptor_,
      weidanbao_detail_ans::default_instance_,
      weidanbao_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weidanbao_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(weidanbao_detail_ans));
  qiaoqiaoccs_detail_ask_descriptor_ = file->message_type(119);
  static const int qiaoqiaoccs_detail_ask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, page_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, cur_page_),
  };
  qiaoqiaoccs_detail_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qiaoqiaoccs_detail_ask_descriptor_,
      qiaoqiaoccs_detail_ask::default_instance_,
      qiaoqiaoccs_detail_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qiaoqiaoccs_detail_ask));
  qiaoqiaoccs_detail_descriptor_ = file->message_type(120);
  static const int qiaoqiaoccs_detail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, cur_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, friendship_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, worth_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, risk_credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, sum_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, version_),
  };
  qiaoqiaoccs_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qiaoqiaoccs_detail_descriptor_,
      qiaoqiaoccs_detail::default_instance_,
      qiaoqiaoccs_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qiaoqiaoccs_detail));
  qiaoqiaoccs_detail_ans_descriptor_ = file->message_type(121);
  static const int qiaoqiaoccs_detail_ans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ans, qiaoqiaoccs_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ans, total_number_),
  };
  qiaoqiaoccs_detail_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qiaoqiaoccs_detail_ans_descriptor_,
      qiaoqiaoccs_detail_ans::default_instance_,
      qiaoqiaoccs_detail_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qiaoqiaoccs_detail_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qiaoqiaoccs_detail_ans));
  credit_request_monitor_ask_descriptor_ = file->message_type(122);
  static const int credit_request_monitor_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, ask_header_),
  };
  credit_request_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_request_monitor_ask_descriptor_,
      credit_request_monitor_ask::default_instance_,
      credit_request_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_request_monitor_ask));
  credit_request_monitor_ans_descriptor_ = file->message_type(123);
  static const int credit_request_monitor_ans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, error_),
  };
  credit_request_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_request_monitor_ans_descriptor_,
      credit_request_monitor_ans::default_instance_,
      credit_request_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_request_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_request_monitor_ans));
  credit_response_monitor_ask_descriptor_ = file->message_type(124);
  static const int credit_response_monitor_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, handle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, ask_header_),
  };
  credit_response_monitor_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_response_monitor_ask_descriptor_,
      credit_response_monitor_ask::default_instance_,
      credit_response_monitor_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_response_monitor_ask));
  credit_response_monitor_ans_descriptor_ = file->message_type(125);
  static const int credit_response_monitor_ans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, inset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, json_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, error_),
  };
  credit_response_monitor_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      credit_response_monitor_ans_descriptor_,
      credit_response_monitor_ans::default_instance_,
      credit_response_monitor_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(credit_response_monitor_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(credit_response_monitor_ans));
  user_verification_history_ask_descriptor_ = file->message_type(126);
  static const int user_verification_history_ask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ask, ask_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ask, info_),
  };
  user_verification_history_ask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_verification_history_ask_descriptor_,
      user_verification_history_ask::default_instance_,
      user_verification_history_ask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_verification_history_ask));
  user_verification_history_ans_descriptor_ = file->message_type(127);
  static const int user_verification_history_ans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ans, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ans, fucver_out_),
  };
  user_verification_history_ans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_verification_history_ans_descriptor_,
      user_verification_history_ans::default_instance_,
      user_verification_history_ans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_verification_history_ans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_verification_history_ans));
  platform_type_descriptor_ = file->enum_type(0);
  overdue_type_descriptor_ = file->enum_type(1);
  function_serial_number_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AFP_5fmain_5fframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interface_info_ask_descriptor_, &interface_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interface_info_ans_descriptor_, &interface_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emergency_contact_descriptor_, &emergency_contact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_user_info_descriptor_, &blacklist_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    data_sources_info_descriptor_, &data_sources_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_info_descriptor_, &platform_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_service_descriptor_, &platform_service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_hit_statistics_info_descriptor_, &model_hit_statistics_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_user_info_descriptor_, &hit_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_user_analyze_info_descriptor_, &hit_user_analyze_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_rule_analyze_info_descriptor_, &hit_rule_analyze_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_detail_info_descriptor_, &hit_detail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_data_sources_ask_descriptor_, &blacklist_data_sources_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_data_sources_ans_descriptor_, &blacklist_data_sources_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_query_ask_descriptor_, &blacklist_query_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_query_ans_descriptor_, &blacklist_query_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_detail_ask_descriptor_, &blacklist_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_detail_ans_descriptor_, &blacklist_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_save_ask_descriptor_, &blacklist_save_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_save_ans_descriptor_, &blacklist_save_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_remove_ask_descriptor_, &blacklist_remove_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    blacklist_remove_ans_descriptor_, &blacklist_remove_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_trace_info_descriptor_, &auto_trace_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_trace_ask_descriptor_, &auto_trace_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_trace_ans_descriptor_, &auto_trace_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_score_interval_info_descriptor_, &credit_score_interval_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_score_statistics_ask_descriptor_, &credit_score_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_score_statistics_ans_descriptor_, &credit_score_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_ask_descriptor_, &credit_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_info_descriptor_, &credit_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_ans_descriptor_, &credit_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_model_info_descriptor_, &verify_model_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_detail_info_descriptor_, &verify_detail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_model_ask_descriptor_, &verify_model_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_model_ans_descriptor_, &verify_model_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_detail_ask_descriptor_, &verify_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_detail_ans_descriptor_, &verify_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_verify_info_descriptor_, &afp_verify_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_model_verify_ask_descriptor_, &afp_model_verify_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_model_verify_ans_descriptor_, &afp_model_verify_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    third_platform_verify_info_descriptor_, &third_platform_verify_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    identity_sync_ask_descriptor_, &identity_sync_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    identity_sync_ans_descriptor_, &identity_sync_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_verify_info_descriptor_, &model_verify_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_verify_ask_descriptor_, &model_verify_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_verify_ans_descriptor_, &model_verify_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_info_ask_descriptor_, &platform_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_info_ans_descriptor_, &platform_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_hit_statistics_ask_descriptor_, &model_hit_statistics_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    model_hit_statistics_ans_descriptor_, &model_hit_statistics_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_list_ask_descriptor_, &hit_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_list_ans_descriptor_, &hit_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_user_property_analyze_ask_descriptor_, &hit_user_property_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_user_property_analyze_ans_descriptor_, &hit_user_property_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_rule_analyze_ask_descriptor_, &hit_rule_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_rule_analyze_ans_descriptor_, &hit_rule_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_detail_ask_descriptor_, &hit_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hit_detail_ans_descriptor_, &hit_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_location_track_info_descriptor_, &user_location_track_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_location_track_ask_descriptor_, &user_location_track_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_location_track_ans_descriptor_, &user_location_track_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    by_inquirers_descriptor_, &by_inquirers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_ask_descriptor_, &user_info_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_ans_descriptor_, &user_info_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AFP_LandedAccount_descriptor_, &AFP_LandedAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phone_contacts_info_descriptor_, &phone_contacts_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    platform_register_user_info_descriptor_, &platform_register_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phone_info_descriptor_, &phone_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yuliu_common_user_info_descriptor_, &yuliu_common_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yuliu_platform_user_info_descriptor_, &yuliu_platform_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phones_info_descriptor_, &phones_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phone_contacts_analyze_ask_descriptor_, &phone_contacts_analyze_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phone_contacts_analyze_ans_descriptor_, &phone_contacts_analyze_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    function_verification_in_descriptor_, &function_verification_in::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    function_verification_out_descriptor_, &function_verification_out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_verification_list_ask_descriptor_, &user_verification_list_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_verification_list_ans_descriptor_, &user_verification_list_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_info_descriptor_, &verify_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    batch_verify_ask_descriptor_, &batch_verify_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    batch_verify_ans_descriptor_, &batch_verify_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_name_descriptor_, &area_name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_info_descriptor_, &bid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detail_early_warning_descriptor_, &detail_early_warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistical_Intel_warning_ask_descriptor_, &statistical_Intel_warning_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistical_early_warning_ans_descriptor_, &statistical_early_warning_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statistical_Intel_warning_ans_descriptor_, &statistical_Intel_warning_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detail_early_warning_ask_descriptor_, &detail_early_warning_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    detail_early_warning_ans_descriptor_, &detail_early_warning_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_the_warning_ask_descriptor_, &cancel_the_warning_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancel_the_warning_ans_descriptor_, &cancel_the_warning_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_save_warning_ask_descriptor_, &modify_save_warning_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    modify_save_warning_ans_descriptor_, &modify_save_warning_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bid_detail_ask_descriptor_, &bid_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrow_bid_detail_info_descriptor_, &borrow_bid_detail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qiaoqiao_bid_info_descriptor_, &qiaoqiao_bid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    borrow_bid_detail_ans_descriptor_, &borrow_bid_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qiaoqiao_bid_ans_descriptor_, &qiaoqiao_bid_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    province_city_inquire_ask_descriptor_, &province_city_inquire_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    province_city_inquire_ans_descriptor_, &province_city_inquire_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_info_descriptor_, &friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_info_descriptor_, &group_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friendqunList_ask_descriptor_, &friendqunList_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friendqunList_ans_descriptor_, &friendqunList_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_info_descriptor_, &msg_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_msg_ask_descriptor_, &single_msg_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_msg_ans_descriptor_, &single_msg_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_msg_ask_descriptor_, &group_msg_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_msg_ans_descriptor_, &group_msg_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    usebasicinfo_ask_descriptor_, &usebasicinfo_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    usebasicinfo_ans_descriptor_, &usebasicinfo_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_detail_ask_descriptor_, &afp_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_detail_descriptor_, &afp_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    afp_detail_ans_descriptor_, &afp_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ccs_detail_ask_descriptor_, &ccs_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ccs_detail_descriptor_, &ccs_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ccs_detail_ans_descriptor_, &ccs_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    weidanbao_detail_ask_descriptor_, &weidanbao_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    weidanbao_detail_descriptor_, &weidanbao_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    weidanbao_detail_ans_descriptor_, &weidanbao_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qiaoqiaoccs_detail_ask_descriptor_, &qiaoqiaoccs_detail_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qiaoqiaoccs_detail_descriptor_, &qiaoqiaoccs_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qiaoqiaoccs_detail_ans_descriptor_, &qiaoqiaoccs_detail_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_request_monitor_ask_descriptor_, &credit_request_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_request_monitor_ans_descriptor_, &credit_request_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_response_monitor_ask_descriptor_, &credit_response_monitor_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    credit_response_monitor_ans_descriptor_, &credit_response_monitor_ans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_verification_history_ask_descriptor_, &user_verification_history_ask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_verification_history_ans_descriptor_, &user_verification_history_ans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto() {
  delete interface_info_ask::default_instance_;
  delete interface_info_ask_reflection_;
  delete interface_info_ans::default_instance_;
  delete interface_info_ans_reflection_;
  delete emergency_contact::default_instance_;
  delete emergency_contact_reflection_;
  delete blacklist_user_info::default_instance_;
  delete blacklist_user_info_reflection_;
  delete data_sources_info::default_instance_;
  delete data_sources_info_reflection_;
  delete platform_info::default_instance_;
  delete platform_info_reflection_;
  delete platform_service::default_instance_;
  delete platform_service_reflection_;
  delete model_hit_statistics_info::default_instance_;
  delete model_hit_statistics_info_reflection_;
  delete hit_user_info::default_instance_;
  delete hit_user_info_reflection_;
  delete hit_user_analyze_info::default_instance_;
  delete hit_user_analyze_info_reflection_;
  delete hit_rule_analyze_info::default_instance_;
  delete hit_rule_analyze_info_reflection_;
  delete hit_detail_info::default_instance_;
  delete hit_detail_info_reflection_;
  delete blacklist_data_sources_ask::default_instance_;
  delete blacklist_data_sources_ask_reflection_;
  delete blacklist_data_sources_ans::default_instance_;
  delete blacklist_data_sources_ans_reflection_;
  delete blacklist_query_ask::default_instance_;
  delete blacklist_query_ask_reflection_;
  delete blacklist_query_ans::default_instance_;
  delete blacklist_query_ans_reflection_;
  delete blacklist_detail_ask::default_instance_;
  delete blacklist_detail_ask_reflection_;
  delete blacklist_detail_ans::default_instance_;
  delete blacklist_detail_ans_reflection_;
  delete blacklist_save_ask::default_instance_;
  delete blacklist_save_ask_reflection_;
  delete blacklist_save_ans::default_instance_;
  delete blacklist_save_ans_reflection_;
  delete blacklist_remove_ask::default_instance_;
  delete blacklist_remove_ask_reflection_;
  delete blacklist_remove_ans::default_instance_;
  delete blacklist_remove_ans_reflection_;
  delete auto_trace_info::default_instance_;
  delete auto_trace_info_reflection_;
  delete auto_trace_ask::default_instance_;
  delete auto_trace_ask_reflection_;
  delete auto_trace_ans::default_instance_;
  delete auto_trace_ans_reflection_;
  delete credit_score_interval_info::default_instance_;
  delete credit_score_interval_info_reflection_;
  delete credit_score_statistics_ask::default_instance_;
  delete credit_score_statistics_ask_reflection_;
  delete credit_score_statistics_ans::default_instance_;
  delete credit_score_statistics_ans_reflection_;
  delete credit_ask::default_instance_;
  delete credit_ask_reflection_;
  delete credit_info::default_instance_;
  delete credit_info_reflection_;
  delete credit_ans::default_instance_;
  delete credit_ans_reflection_;
  delete verify_model_info::default_instance_;
  delete verify_model_info_reflection_;
  delete verify_detail_info::default_instance_;
  delete verify_detail_info_reflection_;
  delete verify_model_ask::default_instance_;
  delete verify_model_ask_reflection_;
  delete verify_model_ans::default_instance_;
  delete verify_model_ans_reflection_;
  delete verify_detail_ask::default_instance_;
  delete verify_detail_ask_reflection_;
  delete verify_detail_ans::default_instance_;
  delete verify_detail_ans_reflection_;
  delete afp_verify_info::default_instance_;
  delete afp_verify_info_reflection_;
  delete afp_model_verify_ask::default_instance_;
  delete afp_model_verify_ask_reflection_;
  delete afp_model_verify_ans::default_instance_;
  delete afp_model_verify_ans_reflection_;
  delete third_platform_verify_info::default_instance_;
  delete third_platform_verify_info_reflection_;
  delete identity_sync_ask::default_instance_;
  delete identity_sync_ask_reflection_;
  delete identity_sync_ans::default_instance_;
  delete identity_sync_ans_reflection_;
  delete model_verify_info::default_instance_;
  delete model_verify_info_reflection_;
  delete model_verify_ask::default_instance_;
  delete model_verify_ask_reflection_;
  delete model_verify_ans::default_instance_;
  delete model_verify_ans_reflection_;
  delete platform_info_ask::default_instance_;
  delete platform_info_ask_reflection_;
  delete platform_info_ans::default_instance_;
  delete platform_info_ans_reflection_;
  delete model_hit_statistics_ask::default_instance_;
  delete model_hit_statistics_ask_reflection_;
  delete model_hit_statistics_ans::default_instance_;
  delete model_hit_statistics_ans_reflection_;
  delete hit_list_ask::default_instance_;
  delete hit_list_ask_reflection_;
  delete hit_list_ans::default_instance_;
  delete hit_list_ans_reflection_;
  delete hit_user_property_analyze_ask::default_instance_;
  delete hit_user_property_analyze_ask_reflection_;
  delete hit_user_property_analyze_ans::default_instance_;
  delete hit_user_property_analyze_ans_reflection_;
  delete hit_rule_analyze_ask::default_instance_;
  delete hit_rule_analyze_ask_reflection_;
  delete hit_rule_analyze_ans::default_instance_;
  delete hit_rule_analyze_ans_reflection_;
  delete hit_detail_ask::default_instance_;
  delete hit_detail_ask_reflection_;
  delete hit_detail_ans::default_instance_;
  delete hit_detail_ans_reflection_;
  delete user_location_track_info::default_instance_;
  delete user_location_track_info_reflection_;
  delete user_location_track_ask::default_instance_;
  delete user_location_track_ask_reflection_;
  delete user_location_track_ans::default_instance_;
  delete user_location_track_ans_reflection_;
  delete by_inquirers::default_instance_;
  delete by_inquirers_reflection_;
  delete user_info_ask::default_instance_;
  delete user_info_ask_reflection_;
  delete user_info_ans::default_instance_;
  delete user_info_ans_reflection_;
  delete AFP_LandedAccount::default_instance_;
  delete AFP_LandedAccount_reflection_;
  delete phone_contacts_info::default_instance_;
  delete phone_contacts_info_reflection_;
  delete platform_register_user_info::default_instance_;
  delete platform_register_user_info_reflection_;
  delete phone_info::default_instance_;
  delete phone_info_reflection_;
  delete yuliu_common_user_info::default_instance_;
  delete yuliu_common_user_info_reflection_;
  delete yuliu_platform_user_info::default_instance_;
  delete yuliu_platform_user_info_reflection_;
  delete phones_info::default_instance_;
  delete phones_info_reflection_;
  delete phone_contacts_analyze_ask::default_instance_;
  delete phone_contacts_analyze_ask_reflection_;
  delete phone_contacts_analyze_ans::default_instance_;
  delete phone_contacts_analyze_ans_reflection_;
  delete function_verification_in::default_instance_;
  delete function_verification_in_reflection_;
  delete function_verification_out::default_instance_;
  delete function_verification_out_reflection_;
  delete user_verification_list_ask::default_instance_;
  delete user_verification_list_ask_reflection_;
  delete user_verification_list_ans::default_instance_;
  delete user_verification_list_ans_reflection_;
  delete verify_info::default_instance_;
  delete verify_info_reflection_;
  delete batch_verify_ask::default_instance_;
  delete batch_verify_ask_reflection_;
  delete batch_verify_ans::default_instance_;
  delete batch_verify_ans_reflection_;
  delete area_name::default_instance_;
  delete area_name_reflection_;
  delete bid_info::default_instance_;
  delete bid_info_reflection_;
  delete detail_early_warning::default_instance_;
  delete detail_early_warning_reflection_;
  delete statistical_Intel_warning_ask::default_instance_;
  delete statistical_Intel_warning_ask_reflection_;
  delete statistical_early_warning_ans::default_instance_;
  delete statistical_early_warning_ans_reflection_;
  delete statistical_Intel_warning_ans::default_instance_;
  delete statistical_Intel_warning_ans_reflection_;
  delete detail_early_warning_ask::default_instance_;
  delete detail_early_warning_ask_reflection_;
  delete detail_early_warning_ans::default_instance_;
  delete detail_early_warning_ans_reflection_;
  delete cancel_the_warning_ask::default_instance_;
  delete cancel_the_warning_ask_reflection_;
  delete cancel_the_warning_ans::default_instance_;
  delete cancel_the_warning_ans_reflection_;
  delete modify_save_warning_ask::default_instance_;
  delete modify_save_warning_ask_reflection_;
  delete modify_save_warning_ans::default_instance_;
  delete modify_save_warning_ans_reflection_;
  delete bid_detail_ask::default_instance_;
  delete bid_detail_ask_reflection_;
  delete borrow_bid_detail_info::default_instance_;
  delete borrow_bid_detail_info_reflection_;
  delete qiaoqiao_bid_info::default_instance_;
  delete qiaoqiao_bid_info_reflection_;
  delete borrow_bid_detail_ans::default_instance_;
  delete borrow_bid_detail_ans_reflection_;
  delete qiaoqiao_bid_ans::default_instance_;
  delete qiaoqiao_bid_ans_reflection_;
  delete province_city_inquire_ask::default_instance_;
  delete province_city_inquire_ask_reflection_;
  delete province_city_inquire_ans::default_instance_;
  delete province_city_inquire_ans_reflection_;
  delete friend_info::default_instance_;
  delete friend_info_reflection_;
  delete group_info::default_instance_;
  delete group_info_reflection_;
  delete friendqunList_ask::default_instance_;
  delete friendqunList_ask_reflection_;
  delete friendqunList_ans::default_instance_;
  delete friendqunList_ans_reflection_;
  delete msg_info::default_instance_;
  delete msg_info_reflection_;
  delete single_msg_ask::default_instance_;
  delete single_msg_ask_reflection_;
  delete single_msg_ans::default_instance_;
  delete single_msg_ans_reflection_;
  delete group_msg_ask::default_instance_;
  delete group_msg_ask_reflection_;
  delete group_msg_ans::default_instance_;
  delete group_msg_ans_reflection_;
  delete usebasicinfo_ask::default_instance_;
  delete usebasicinfo_ask_reflection_;
  delete usebasicinfo_ans::default_instance_;
  delete usebasicinfo_ans_reflection_;
  delete afp_detail_ask::default_instance_;
  delete afp_detail_ask_reflection_;
  delete afp_detail::default_instance_;
  delete afp_detail_reflection_;
  delete afp_detail_ans::default_instance_;
  delete afp_detail_ans_reflection_;
  delete ccs_detail_ask::default_instance_;
  delete ccs_detail_ask_reflection_;
  delete ccs_detail::default_instance_;
  delete ccs_detail_reflection_;
  delete ccs_detail_ans::default_instance_;
  delete ccs_detail_ans_reflection_;
  delete weidanbao_detail_ask::default_instance_;
  delete weidanbao_detail_ask_reflection_;
  delete weidanbao_detail::default_instance_;
  delete weidanbao_detail_reflection_;
  delete weidanbao_detail_ans::default_instance_;
  delete weidanbao_detail_ans_reflection_;
  delete qiaoqiaoccs_detail_ask::default_instance_;
  delete qiaoqiaoccs_detail_ask_reflection_;
  delete qiaoqiaoccs_detail::default_instance_;
  delete qiaoqiaoccs_detail_reflection_;
  delete qiaoqiaoccs_detail_ans::default_instance_;
  delete qiaoqiaoccs_detail_ans_reflection_;
  delete credit_request_monitor_ask::default_instance_;
  delete credit_request_monitor_ask_reflection_;
  delete credit_request_monitor_ans::default_instance_;
  delete credit_request_monitor_ans_reflection_;
  delete credit_response_monitor_ask::default_instance_;
  delete credit_response_monitor_ask_reflection_;
  delete credit_response_monitor_ans::default_instance_;
  delete credit_response_monitor_ans_reflection_;
  delete user_verification_history_ask::default_instance_;
  delete user_verification_history_ask_reflection_;
  delete user_verification_history_ans::default_instance_;
  delete user_verification_history_ans_reflection_;
}

void protobuf_AddDesc_AFP_5fmain_5fframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::protobuf_AddDesc_common_2eproto();
  ::QDP_basic_info::protobuf_AddDesc_QDP_5fbasic_5finfo_2eproto();
  ::DW_Location::protobuf_AddDesc_DW_5fLocation_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AFP_main_frame.proto\022\016AFP_main_frame\032\014"
    "common.proto\032\024QDP_basic_info.proto\032\021DW_L"
    "ocation.proto\"U\n\022interface_info_ask\022\020\n\010j"
    "son_ask\030\001 \001(\014\022-\n\nask_header\030\002 \001(\0132\031.comm"
    "on.common_ask_header\"H\n\022interface_info_a"
    "ns\022\020\n\010json_ans\030\001 \001(\014\022 \n\005error\030\002 \001(\0132\021.co"
    "mmon.errorinfo\"M\n\021emergency_contact\022\023\n\013a"
    "ppellation\030\001 \001(\014\022\020\n\010kin_name\030\002 \001(\014\022\021\n\tki"
    "n_phone\030\003 \001(\014\"\264\002\n\023blacklist_user_info\022$\n"
    "\tuser_info\030\001 \001(\0132\021.common.user_info\022\022\n\nl"
    "oan_total\030\002 \001(\002\022\022\n\nloan_count\030\003 \001(\005\022\022\n\na"
    "lso_total\030\004 \001(\002\022\025\n\roverdue_count\030\005 \001(\005\022\027"
    "\n\017repayment_state\030\006 \001(\014\022\023\n\013overdue_day\030\007"
    " \001(\005\022\026\n\016cheat_severity\030\010 \001(\014\022\024\n\014data_sou"
    "rces\030\t \001(\014\022\033\n\023operation_personnel\030\n \001(\014\022"
    "\026\n\016operation_time\030\013 \001(\014\022\023\n\013update_time\030\014"
    " \001(\014\"=\n\021data_sources_info\022\022\n\nsources_no\030"
    "\001 \001(\014\022\024\n\014sources_name\030\002 \001(\014\";\n\rplatform_"
    "info\022\023\n\013platform_no\030\001 \001(\014\022\025\n\rplatform_na"
    "me\030\002 \001(\014\"<\n\020platform_service\022\022\n\nserivce_"
    "id\030\001 \001(\014\022\024\n\014service_name\030\002 \001(\014\"H\n\031model_"
    "hit_statistics_info\022\025\n\rplatform_name\030\001 \001"
    "(\014\022\024\n\014total_number\030\002 \001(\005\"\250\001\n\rhit_user_in"
    "fo\022/\n\010platform\030\001 \001(\0132\035.AFP_main_frame.pl"
    "atform_info\022\021\n\treal_name\030\002 \001(\014\022\017\n\007id_car"
    "d\030\003 \001(\014\022\024\n\014mobile_phone\030\004 \001(\014\022\030\n\020platfor"
    "m_service\030\005 \001(\014\022\022\n\nhit_result\030\006 \001(\014\"T\n\025h"
    "it_user_analyze_info\022\024\n\014property_val\030\001 \001"
    "(\014\022\024\n\014total_number\030\002 \001(\005\022\017\n\007percent\030\003 \001("
    "\002\"h\n\025hit_rule_analyze_info\022\014\n\004rule\030\001 \001(\014"
    "\022\032\n\022third_service_name\030\002 \001(\014\022\024\n\014total_nu"
    "mber\030\003 \001(\005\022\017\n\007percent\030\004 \001(\002\"z\n\017hit_detai"
    "l_info\022$\n\tuser_info\030\001 \001(\0132\021.common.user_"
    "info\022/\n\010platform\030\002 \001(\0132\035.AFP_main_frame."
    "platform_info\022\020\n\010hit_rule\030\003 \001(\014\"K\n\032black"
    "list_data_sources_ask\022-\n\nask_header\030\001 \001("
    "\0132\031.common.common_ask_header\"o\n\032blacklis"
    "t_data_sources_ans\022/\n\004list\030\001 \003(\0132!.AFP_m"
    "ain_frame.data_sources_info\022 \n\005error\030\002 \001"
    "(\0132\021.common.errorinfo\"\377\002\n\023blacklist_quer"
    "y_ask\022\021\n\treal_name\030\001 \001(\014\022\024\n\014mobile_phone"
    "\030\002 \001(\014\022\r\n\005id_no\030\003 \001(\014\022\031\n\021min_overdue_cou"
    "nt\030\006 \001(\005\022\031\n\021max_overdue_count\030\007 \001(\005\022\026\n\016m"
    "in_also_total\030\010 \001(\002\022\026\n\016max_also_total\030\t "
    "\001(\002\022\027\n\017repayment_state\030\n \001(\014\022\027\n\017min_over"
    "due_day\030\013 \001(\005\022\027\n\017max_overdue_day\030\014 \001(\005\022\026"
    "\n\016cheat_severity\030\r \001(\014\022\024\n\014data_sources\030\016"
    " \001(\014\022\020\n\010page_num\030\017 \001(\005\022\020\n\010cur_page\030\020 \001(\005"
    "\022-\n\nask_header\030\021 \001(\0132\031.common.common_ask"
    "_header\"\200\001\n\023blacklist_query_ans\0221\n\004list\030"
    "\001 \003(\0132#.AFP_main_frame.blacklist_user_in"
    "fo\022\024\n\014total_number\030\002 \001(\005\022 \n\005error\030\003 \001(\0132"
    "\021.common.errorinfo\"V\n\024blacklist_detail_a"
    "sk\022\017\n\007user_id\030\001 \001(\014\022-\n\nask_header\030\002 \001(\0132"
    "\031.common.common_ask_header\"p\n\024blacklist_"
    "detail_ans\0226\n\tblacklist\030\001 \001(\0132#.AFP_main"
    "_frame.blacklist_user_info\022 \n\005error\030\002 \001("
    "\0132\021.common.errorinfo\"{\n\022blacklist_save_a"
    "sk\0226\n\tblacklist\030\001 \001(\0132#.AFP_main_frame.b"
    "lacklist_user_info\022-\n\nask_header\030\002 \001(\0132\031"
    ".common.common_ask_header\"6\n\022blacklist_s"
    "ave_ans\022 \n\005error\030\001 \001(\0132\021.common.errorinf"
    "o\"V\n\024blacklist_remove_ask\022\017\n\007user_id\030\001 \001"
    "(\014\022-\n\nask_header\030\002 \001(\0132\031.common.common_a"
    "sk_header\"8\n\024blacklist_remove_ans\022 \n\005err"
    "or\030\001 \001(\0132\021.common.errorinfo\"\274\001\n\017auto_tra"
    "ce_info\022\021\n\treal_name\030\001 \001(\014\022\024\n\014mobile_pho"
    "ne\030\002 \001(\014\022\r\n\005id_no\030\003 \001(\014\022\022\n\ntrace_date\030\004 "
    "\001(\014\022\031\n\021own_blacklist_hit\030\005 \001(\014\022\032\n\022qhzh_b"
    "lacklist_hit\030\006 \001(\014\022\030\n\020td_blacklist_hit\030\007"
    " \001(\014\022\014\n\004area\030\010 \001(\014\"\230\001\n\016auto_trace_ask\0223\n"
    "\ntrace_info\030\001 \001(\0132\037.AFP_main_frame.auto_"
    "trace_info\022\020\n\010page_num\030\002 \001(\005\022\020\n\010cur_page"
    "\030\003 \001(\005\022-\n\nask_header\030\004 \001(\0132\031.common.comm"
    "on_ask_header\"w\n\016auto_trace_ans\022-\n\004list\030"
    "\001 \003(\0132\037.AFP_main_frame.auto_trace_info\022\024"
    "\n\014total_number\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.co"
    "mmon.errorinfo\"J\n\032credit_score_interval_"
    "info\022\026\n\016score_interval\030\001 \001(\014\022\024\n\014total_nu"
    "mber\030\002 \001(\005\"L\n\033credit_score_statistics_as"
    "k\022-\n\nask_header\030\001 \001(\0132\031.common.common_as"
    "k_header\"y\n\033credit_score_statistics_ans\022"
    "8\n\004list\030\001 \003(\0132*.AFP_main_frame.credit_sc"
    "ore_interval_info\022 \n\005error\030\002 \001(\0132\021.commo"
    "n.errorinfo\"\275\001\n\ncredit_ask\022\021\n\treal_name\030"
    "\001 \001(\014\022\024\n\014mobile_phone\030\002 \001(\014\022\r\n\005id_no\030\003 \001"
    "(\014\022\014\n\004area\030\004 \001(\014\022\026\n\016score_interval\030\005 \001(\014"
    "\022\020\n\010page_num\030\006 \001(\005\022\020\n\010cur_page\030\007 \001(\005\022-\n\n"
    "ask_header\030\010 \001(\0132\031.common.common_ask_hea"
    "der\"I\n\013credit_info\022$\n\tuser_info\030\001 \001(\0132\021."
    "common.user_info\022\024\n\014credit_score\030\002 \001(\005\"o"
    "\n\ncredit_ans\022)\n\004list\030\001 \003(\0132\033.AFP_main_fr"
    "ame.credit_info\022\024\n\014total_number\030\002 \001(\005\022 \n"
    "\005error\030\003 \001(\0132\021.common.errorinfo\"O\n\021verif"
    "y_model_info\022\020\n\010model_no\030\001 \001(\014\022\022\n\nmodel_"
    "name\030\002 \001(\014\022\024\n\014total_number\030\003 \001(\005\"\325\001\n\022ver"
    "ify_detail_info\022\022\n\nmodel_name\030\001 \001(\014\022\024\n\014t"
    "otal_number\030\002 \001(\005\022\023\n\013pass_number\030\003 \001(\005\022\024"
    "\n\014pass_percent\030\004 \001(\002\022\026\n\016no_pass_number\030\005"
    " \001(\005\022\027\n\017no_pass_percent\030\006 \001(\002\022\033\n\023human_r"
    "eview_number\030\007 \001(\005\022\034\n\024human_review_perce"
    "nt\030\010 \001(\002\"g\n\020verify_model_ask\022\022\n\nstart_da"
    "te\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022-\n\nask_header"
    "\030\003 \001(\0132\031.common.common_ask_header\"e\n\020ver"
    "ify_model_ans\022/\n\004list\030\001 \003(\0132!.AFP_main_f"
    "rame.verify_model_info\022 \n\005error\030\002 \001(\0132\021."
    "common.errorinfo\"\214\001\n\021verify_detail_ask\022\022"
    "\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022\020\n\010"
    "page_num\030\003 \001(\005\022\020\n\010cur_page\030\004 \001(\005\022-\n\nask_"
    "header\030\005 \001(\0132\031.common.common_ask_header\""
    "}\n\021verify_detail_ans\0220\n\004list\030\001 \003(\0132\".AFP"
    "_main_frame.verify_detail_info\022\024\n\014total_"
    "number\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.common.err"
    "orinfo\"_\n\017afp_verify_info\0225\n\nmodel_info\030"
    "\001 \001(\0132!.AFP_main_frame.verify_model_info"
    "\022\025\n\rverify_result\030\002 \001(\014\"\220\001\n\024afp_model_ve"
    "rify_ask\022\021\n\treal_name\030\001 \001(\014\022\024\n\014mobile_ph"
    "one\030\002 \001(\014\022\r\n\005id_no\030\003 \001(\014\022\021\n\tmodel_nos\030\004 "
    "\003(\014\022-\n\nask_header\030\005 \001(\0132\031.common.common_"
    "ask_header\"\246\001\n\024afp_model_verify_ans\022\021\n\tr"
    "eal_name\030\001 \001(\014\022\024\n\014mobile_phone\030\002 \001(\014\022\r\n\005"
    "id_no\030\003 \001(\014\0224\n\013verify_info\030\004 \003(\0132\037.AFP_m"
    "ain_frame.afp_verify_info\022 \n\005error\030\005 \001(\013"
    "2\021.common.errorinfo\"\346\001\n\032third_platform_v"
    "erify_info\022\023\n\013platform_no\030\004 \001(\014\022\022\n\nseriv"
    "ce_id\030\005 \001(\014\022\016\n\006param1\030\006 \001(\014\022\016\n\006param2\030\007 "
    "\001(\014\022\016\n\006param3\030\010 \001(\014\022\016\n\006param4\030\t \001(\014\022\016\n\006p"
    "aram5\030\n \001(\014\022\016\n\006param6\030\013 \001(\014\022\016\n\006param7\030\014 "
    "\001(\014\022\016\n\006param8\030\r \001(\014\022\016\n\006param9\030\016 \001(\014\022\017\n\007p"
    "aram10\030\017 \001(\014\"z\n\021identity_sync_ask\022\021\n\trea"
    "l_name\030\001 \001(\014\022\024\n\014mobile_phone\030\002 \001(\014\022\r\n\005id"
    "_no\030\003 \001(\014\022-\n\nask_header\030\004 \001(\0132\031.common.c"
    "ommon_ask_header\"v\n\021identity_sync_ans\022\?\n"
    "\013verify_info\030\001 \003(\0132*.AFP_main_frame.thir"
    "d_platform_verify_info\022 \n\005error\030\002 \001(\0132\021."
    "common.errorinfo\"9\n\021model_verify_info\022\024\n"
    "\014service_name\030\001 \001(\014\022\016\n\006status\030\002 \001(\014\"A\n\020m"
    "odel_verify_ask\022-\n\nask_header\030\001 \001(\0132\031.co"
    "mmon.common_ask_header\"e\n\020model_verify_a"
    "ns\022/\n\004list\030\001 \003(\0132!.AFP_main_frame.model_"
    "verify_info\022 \n\005error\030\002 \001(\0132\021.common.erro"
    "rinfo\"B\n\021platform_info_ask\022-\n\nask_header"
    "\030\001 \001(\0132\031.common.common_ask_header\"b\n\021pla"
    "tform_info_ans\022+\n\004list\030\001 \003(\0132\035.AFP_main_"
    "frame.platform_info\022 \n\005error\030\002 \001(\0132\021.com"
    "mon.errorinfo\"o\n\030model_hit_statistics_as"
    "k\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end_date\030\002 \001(\014\022"
    "-\n\nask_header\030\003 \001(\0132\031.common.common_ask_"
    "header\"u\n\030model_hit_statistics_ans\0227\n\004li"
    "st\030\001 \003(\0132).AFP_main_frame.model_hit_stat"
    "istics_info\022 \n\005error\030\002 \001(\0132\021.common.erro"
    "rinfo\"\234\001\n\014hit_list_ask\022\022\n\nstart_date\030\001 \001"
    "(\014\022\020\n\010end_date\030\002 \001(\014\022\023\n\013platform_no\030\003 \001("
    "\014\022\020\n\010page_num\030\004 \001(\005\022\020\n\010cur_page\030\005 \001(\005\022-\n"
    "\nask_header\030\006 \001(\0132\031.common.common_ask_he"
    "ader\"s\n\014hit_list_ans\022+\n\004list\030\001 \003(\0132\035.AFP"
    "_main_frame.hit_user_info\022\024\n\014total_numbe"
    "r\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.common.errorinf"
    "o\"`\n\035hit_user_property_analyze_ask\022\020\n\010pr"
    "operty\030\001 \001(\014\022-\n\nask_header\030\002 \001(\0132\031.commo"
    "n.common_ask_header\"v\n\035hit_user_property"
    "_analyze_ans\0223\n\004list\030\001 \003(\0132%.AFP_main_fr"
    "ame.hit_user_analyze_info\022 \n\005error\030\002 \001(\013"
    "2\021.common.errorinfo\"~\n\024hit_rule_analyze_"
    "ask\022\023\n\013platform_no\030\001 \001(\014\022\020\n\010page_num\030\002 \001"
    "(\005\022\020\n\010cur_page\030\003 \001(\005\022-\n\nask_header\030\004 \001(\013"
    "2\031.common.common_ask_header\"\203\001\n\024hit_rule"
    "_analyze_ans\0223\n\004list\030\001 \003(\0132%.AFP_main_fr"
    "ame.hit_rule_analyze_info\022\024\n\014total_numbe"
    "r\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.common.errorinf"
    "o\"\236\001\n\016hit_detail_ask\022\022\n\nstart_date\030\001 \001(\014"
    "\022\020\n\010end_date\030\002 \001(\014\022\023\n\013platform_no\030\003 \001(\014\022"
    "\020\n\010page_num\030\004 \001(\005\022\020\n\010cur_page\030\005 \001(\005\022-\n\na"
    "sk_header\030\006 \001(\0132\031.common.common_ask_head"
    "er\"w\n\016hit_detail_ans\022-\n\004list\030\001 \003(\0132\037.AFP"
    "_main_frame.hit_detail_info\022\024\n\014total_num"
    "ber\030\002 \001(\005\022 \n\005error\030\003 \001(\0132\021.common.errori"
    "nfo\"d\n\030user_location_track_info\022\014\n\004time\030"
    "\001 \001(\014\022\021\n\tlongitude\030\002 \001(\002\022\020\n\010latitude\030\003 \001"
    "(\002\022\025\n\rlocation_name\030\004 \001(\014\"\256\001\n\027user_locat"
    "ion_track_ask\022\022\n\nstart_date\030\001 \001(\014\022\020\n\010end"
    "_date\030\002 \001(\014\022\025\n\ridentity_card\030\003 \001(\014\022\024\n\014mo"
    "bile_phone\030\004 \001(\014\022\021\n\tis_normal\030\005 \001(\014\022-\n\na"
    "sk_header\030\006 \001(\0132\031.common.common_ask_head"
    "er\"s\n\027user_location_track_ans\0226\n\004list\030\001 "
    "\003(\0132(.AFP_main_frame.user_location_track"
    "_info\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\""
    "N\n\014by_inquirers\022\025\n\ridentity_card\030\001 \001(\014\022\024"
    "\n\014mobile_phone\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\""
    "\202\001\n\ruser_info_ask\022/\n\tinquirers\030\001 \003(\0132\034.A"
    "FP_main_frame.by_inquirers\022-\n\nask_header"
    "\030\002 \001(\0132\031.common.common_ask_header\022\021\n\tis_"
    "normal\030\003 \001(\014\"R\n\ruser_info_ans\022\037\n\004user\030\001 "
    "\003(\0132\021.common.user_info\022 \n\005error\030\002 \001(\0132\021."
    "common.errorinfo\"\327\001\n\021AFP_LandedAccount\022\020"
    "\n\010nickname\030\001 \001(\014\022\021\n\treal_name\030\002 \001(\014\022\n\n\002i"
    "d\030\003 \001(\014\022\030\n\003sex\030\004 \001(\0162\013.common.sex\022\013\n\003age"
    "\030\005 \001(\005\022\016\n\006avatar\030\006 \001(\014\022\027\n\017common_termina"
    "l\030\007 \001(\014\022\024\n\014mobile_phone\030\010 \001(\014\022\022\n\nis_over"
    "due\030\t \001(\010\022\027\n\017last_login_time\030\n \001(\014\"{\n\023ph"
    "one_contacts_info\022\021\n\tnote_name\030\001 \001(\014\022\024\n\014"
    "mobile_phone\030\002 \001(\014\022\022\n\nis_kinship\030\003 \001(\010\022\022"
    "\n\nis_removed\030\004 \001(\010\022\023\n\013remove_time\030\005 \001(\014\""
    "\274\001\n\033platform_register_user_info\022\027\n\017adres"
    "sbook_name\030\001 \001(\014\022\021\n\tphone_num\030\002 \001(\014\0228\n\021p"
    "latfom_type_enum\030\003 \001(\0162\035.AFP_main_frame."
    "platform_type\0227\n\021overdue_type_enum\030\004 \001(\016"
    "2\034.AFP_main_frame.overdue_type\"\226\002\n\nphone"
    "_info\022\014\n\004imei\030\001 \001(\014\022\023\n\013brand_model\030\002 \001(\014"
    "\022\025\n\ris_common_use\030\003 \001(\010\022\027\n\017last_login_ti"
    "me\030\004 \001(\014\0221\n\004info\030\005 \003(\0132#.AFP_main_frame."
    "phone_contacts_info\0228\n\rlandedaccount\030\006 \003"
    "(\0132!.AFP_main_frame.AFP_LandedAccount\022H\n"
    "\026platform_register_user\030\007 \003(\0132(.DW_Locat"
    "ion.platform_register_user_info\"K\n\026yuliu"
    "_common_user_info\022\014\n\004name\030\001 \001(\014\022\021\n\tphone"
    "_num\030\002 \001(\014\022\020\n\010relation\030\003 \001(\014\"\252\002\n\030yuliu_p"
    "latform_user_info\022\016\n\006avatar\030\001 \001(\014\022\025\n\ruse"
    "r_nickname\030\002 \001(\014\022\021\n\treal_name\030\003 \001(\014\022\035\n\010s"
    "ex_type\030\004 \001(\0162\013.common.sex\022*\n\004type\030\005 \001(\016"
    "2\034.AFP_main_frame.overdue_type\022\024\n\014chongh"
    "e_rate\030\006 \001(\002\022\030\n\020is_in_adressbook\030\007 \001(\010\022\036"
    "\n\026adressbook_remark_name\030\010 \001(\014\0229\n\tcomm_i"
    "nfo\030\t \001(\0132&.AFP_main_frame.yuliu_common_"
    "user_info\"\240\003\n\013phones_info\022\020\n\010nickname\030\001 "
    "\001(\014\022\021\n\treal_name\030\002 \001(\014\022\n\n\002id\030\003 \001(\014\022\030\n\003se"
    "x\030\004 \001(\0162\013.common.sex\022\013\n\003age\030\005 \001(\005\022\016\n\006ava"
    "tar\030\006 \001(\014\022\027\n\017common_terminal\030\007 \001(\014\022\024\n\014mo"
    "bile_phone\030\010 \001(\014\022\022\n\nis_overdue\030\t \001(\010\022\'\n\004"
    "type\030\n \001(\0162\031.DW_Location.overdue_type\022\017\n"
    "\007address\030\013 \001(\014\022(\n\004list\030\014 \003(\0132\032.AFP_main_"
    "frame.phone_info\022>\n\021yuliu_common_user\030\r "
    "\003(\0132#.DW_Location.yuliu_common_user_info"
    "\022B\n\023yuliu_platform_user\030\016 \003(\0132%.DW_Locat"
    "ion.yuliu_platform_user_info\"\203\001\n\032phone_c"
    "ontacts_analyze_ask\022\r\n\005id_no\030\001 \001(\014\022\024\n\014mo"
    "bile_phone\030\002 \001(\014\022-\n\nask_header\030\003 \001(\0132\031.c"
    "ommon.common_ask_header\022\021\n\tis_normal\030\004 \001"
    "(\014\"i\n\032phone_contacts_analyze_ans\022)\n\004info"
    "\030\001 \001(\0132\033.AFP_main_frame.phones_info\022 \n\005e"
    "rror\030\002 \001(\0132\021.common.errorinfo\"\201\001\n\030functi"
    "on_verification_in\022-\n\004info\030\001 \001(\0132\037.QDP_b"
    "asic_info.user_basic_info\0226\n\006number\030\002 \001("
    "\0162&.AFP_main_frame.function_serial_numbe"
    "r\"z\n\031function_verification_out\022\020\n\010json_a"
    "ns\030\001 \001(\014\0226\n\006number\030\002 \001(\0162&.AFP_main_fram"
    "e.function_serial_number\022\023\n\013result_time\030"
    "\003 \001(\014\"\210\001\n\032user_verification_list_ask\022;\n\t"
    "fucver_in\030\001 \003(\0132(.AFP_main_frame.functio"
    "n_verification_in\022-\n\nask_header\030\002 \001(\0132\031."
    "common.common_ask_header\"}\n\032user_verific"
    "ation_list_ans\022=\n\nfucver_out\030\001 \003(\0132).AFP"
    "_main_frame.function_verification_out\022 \n"
    "\005error\030\002 \001(\0132\021.common.errorinfo\"\207\001\n\013veri"
    "fy_info\022\021\n\treal_name\030\001 \001(\014\022\024\n\014mobile_pho"
    "ne\030\002 \001(\014\022\r\n\005id_no\030\003 \001(\014\022\025\n\rverify_result"
    "\030\004 \001(\014\022\024\n\014inquire_time\030\005 \001(\014\022\023\n\013json_res"
    "ult\030\006 \001(\014\"\275\001\n\020batch_verify_ask\022\027\n\017inquir"
    "e_session\030\001 \001(\014\022)\n\004list\030\002 \003(\0132\033.AFP_main"
    "_frame.verify_info\022-\n\nask_header\030\003 \001(\0132\031"
    ".common.common_ask_header\0226\n\006number\030\004 \003("
    "\0162&.AFP_main_frame.function_serial_numbe"
    "r\"\307\001\n\020batch_verify_ans\022\025\n\rresult_status\030"
    "\001 \001(\005\022\027\n\017inquire_session\030\002 \001(\014\022)\n\004list\030\003"
    " \003(\0132\033.AFP_main_frame.verify_info\022 \n\005err"
    "or\030\004 \001(\0132\021.common.errorinfo\0226\n\006number\030\005 "
    "\003(\0162&.AFP_main_frame.function_serial_num"
    "ber\"*\n\tarea_name\022\017\n\007area_id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\014\"\206\003\n\010bid_info\022\022\n\nborrow_bid\030\001 \001(\014"
    "\022\020\n\010bid_name\030\002 \001(\014\022\023\n\013borrow_time\030\003 \001(\014\022"
    "\031\n\021borrower_nickname\030\004 \001(\014\022\027\n\017borrow_des"
    "cribe\030\005 \001(\014\022\024\n\014borrow_money\030\006 \001(\002\022\023\n\013bor"
    "row_rate\030\007 \001(\002\022\025\n\rmortgage_term\030\010 \001(\005\022\031\n"
    "\021mode_of_repayment\030\t \001(\014\022\017\n\007LP_user\030\n \001("
    "\014\022\031\n\021amount_guaranteed\030\013 \001(\002\022\023\n\013rob_LP_t"
    "ime\030\014 \001(\014\022\017\n\007LP_time\030\r \001(\014\022\022\n\nLP_address"
    "\030\016 \001(\014\022\024\n\014is_indeed_LP\030\017 \001(\005\022\035\n\025Reasons_"
    "for_guarantee\030\020 \001(\014\022\023\n\013picture_url\030\021 \003(\014"
    "\"\214\003\n\024detail_early_warning\022\022\n\nuserstatus\030"
    "\001 \001(\014\022\014\n\004name\030\002 \001(\014\022\024\n\014mobile_phone\030\003 \001("
    "\014\022\r\n\005id_no\030\004 \001(\014\022\030\n\003sex\030\005 \001(\0162\013.common.s"
    "ex\022\013\n\003age\030\006 \001(\005\022\020\n\010province\030\007 \001(\014\022\014\n\004cit"
    "y\030\010 \001(\014\022\027\n\017loan_bid_amount\030\t \001(\005\022\035\n\025qiao"
    "_qiao_loan_amount\030\n \001(\005\022\021\n\twarn_type\030\013 \001"
    "(\014\022\021\n\twarn_time\030\014 \001(\014\022\034\n\024status_early_wa"
    "rning\030\r \001(\005\022\016\n\006remark\030\016 \001(\014\022\020\n\010operater\030"
    "\017 \001(\014\022\025\n\roperator_time\030\020 \001(\014\022\n\n\002id\030\021 \001(\005"
    "\022\020\n\010nickname\030\022 \001(\014\022\023\n\013warn_reason\030\023 \001(\014\""
    "N\n\035statistical_Intel_warning_ask\022-\n\nask_"
    "header\030\001 \001(\0132\031.common.common_ask_header\""
    "\311\001\n\035statistical_early_warning_ans\022\033\n\023bor"
    "row_bid_quantity\030\001 \001(\005\022\"\n\032early_warning_"
    "bid_quantity\030\002 \001(\005\022\036\n\026early_warning_and_"
    "risk\030\003 \001(\002\022\"\n\032early_warning_overdue_rate"
    "\030\004 \001(\002\022#\n\006result\030\005 \001(\0132\023.common.result_i"
    "nfo\"\313\001\n\035statistical_Intel_warning_ans\022#\n"
    "\006result\030\001 \001(\0132\023.common.result_info\022\027\n\017cu"
    "r_user_amount\030\002 \001(\005\022\030\n\020qiandabao_amount\030"
    "\003 \001(\005\022\027\n\017weidabao_amount\030\004 \001(\005\022\034\n\024credit"
    "_borrow_amount\030\005 \001(\005\022\033\n\023qiaoqiao_bid_amo"
    "unt\030\006 \001(\005\"\211\002\n\030detail_early_warning_ask\022\020"
    "\n\010province\030\001 \001(\014\022\014\n\004city\030\002 \001(\014\022\024\n\014mobile"
    "_phone\030\003 \001(\014\022\r\n\005id_no\030\004 \001(\014\022\022\n\nstart_dat"
    "e\030\005 \001(\014\022\020\n\010end_date\030\006 \001(\014\022\020\n\010page_num\030\007 "
    "\001(\005\022\020\n\010cur_page\030\010 \001(\005\022\021\n\twarn_type\030\t \001(\005"
    "\022\034\n\024status_early_warning\030\n \001(\005\022-\n\nask_he"
    "ader\030\013 \001(\0132\031.common.common_ask_header\"\211\001"
    "\n\030detail_early_warning_ans\022\024\n\014total_numb"
    "er\030\001 \001(\005\0222\n\004info\030\002 \003(\0132$.AFP_main_frame."
    "detail_early_warning\022#\n\006result\030\003 \001(\0132\023.c"
    "ommon.result_info\"\201\001\n\026cancel_the_warning"
    "_ask\022\022\n\nborrow_bid\030\001 \001(\014\022$\n\034cancel_the_w"
    "arning_operation\030\002 \001(\014\022-\n\nask_header\030\003 \001"
    "(\0132\031.common.common_ask_header\"\260\001\n\026cancel"
    "_the_warning_ans\022 \n\005error\030\001 \001(\0132\021.common"
    ".errorinfo\022\022\n\nborrow_bid\030\002 \001(\014\022\034\n\024status"
    "_early_warning\030\003 \001(\005\022\034\n\024cancel_the_warn_"
    "time\030\004 \001(\014\022$\n\034cancel_the_warning_operati"
    "on\030\005 \001(\014\"\215\001\n\027modify_save_warning_ask\022-\n\n"
    "ask_header\030\001 \001(\0132\031.common.common_ask_hea"
    "der\022\n\n\002id\030\002 \001(\005\022\020\n\010operater\030\003 \001(\014\022\025\n\rope"
    "rater_time\030\004 \001(\014\022\016\n\006remark\030\005 \001(\014\">\n\027modi"
    "fy_save_warning_ans\022#\n\006result\030\001 \001(\0132\023.co"
    "mmon.result_info\"p\n\016bid_detail_ask\022-\n\nas"
    "k_header\030\001 \001(\0132\031.common.common_ask_heade"
    "r\022\n\n\002id\030\002 \001(\005\022\024\n\014mobile_phone\030\003 \001(\014\022\r\n\005i"
    "d_no\030\004 \001(\014\"\246\003\n\026borrow_bid_detail_info\022\022\n"
    "\nborrow_bid\030\001 \001(\014\022\020\n\010bid_name\030\002 \001(\014\022\024\n\014b"
    "orrow_money\030\003 \001(\002\022\023\n\013borrow_rate\030\004 \001(\002\022\027"
    "\n\017guaranteed_rate\030\005 \001(\002\022\023\n\013borrow_time\030\006"
    " \001(\014\022\027\n\017borrow_bid_type\030\007 \001(\014\022\031\n\021borrow_"
    "bid_status\030\010 \001(\014\022\024\n\014jindiao_nick\030\t \001(\014\022\031"
    "\n\021amount_guaranteed\030\n \001(\002\022\017\n\007LP_time\030\013 \001"
    "(\014\022\024\n\014is_indeed_LP\030\014 \001(\005\022\035\n\025already_reba"
    "ck_amount\030\r \001(\014\022\032\n\022wait_reback_amount\030\016 "
    "\001(\014\022\022\n\nLP_address\030\017 \001(\014\022\035\n\025Reasons_for_g"
    "uarantee\030\020 \001(\014\022\023\n\013picture_url\030\021 \003(\014\"\270\001\n\021"
    "qiaoqiao_bid_info\022\022\n\nborrow_bid\030\001 \001(\014\022\020\n"
    "\010bid_name\030\002 \001(\014\022\024\n\014borrow_money\030\003 \001(\002\022\023\n"
    "\013borrow_rate\030\004 \001(\002\022\032\n\022repayment_deadtime"
    "\030\005 \001(\014\022\033\n\023publish_borrow_time\030\006 \001(\014\022\031\n\021b"
    "orrow_bid_status\030\007 \001(\014\"r\n\025borrow_bid_det"
    "ail_ans\022#\n\006result\030\001 \001(\0132\023.common.result_"
    "info\0224\n\004info\030\002 \003(\0132&.AFP_main_frame.borr"
    "ow_bid_detail_info\"h\n\020qiaoqiao_bid_ans\022#"
    "\n\006result\030\001 \001(\0132\023.common.result_info\022/\n\004i"
    "nfo\030\002 \003(\0132!.AFP_main_frame.qiaoqiao_bid_"
    "info\"V\n\031province_city_inquire_ask\022\n\n\002id\030"
    "\001 \001(\005\022-\n\nask_header\030\002 \001(\0132\031.common.commo"
    "n_ask_header\"u\n\031province_city_inquire_an"
    "s\0223\n\020province_or_city\030\001 \003(\0132\031.AFP_main_f"
    "rame.area_name\022#\n\006result\030\002 \001(\0132\023.common."
    "result_info\"j\n\013friend_info\022\021\n\tfriend_id\030"
    "\001 \001(\014\022\022\n\nfriend_uid\030\002 \001(\014\022\020\n\010nickname\030\003 "
    "\001(\014\022\016\n\006avatar\030\004 \001(\014\022\022\n\nupdatetime\030\005 \001(\014\""
    "W\n\ngroup_info\022\013\n\003gid\030\001 \001(\014\022\024\n\014qun_nickna"
    "me\030\002 \001(\014\022\022\n\navatar_url\030\003 \001(\014\022\022\n\nupdateti"
    "me\030\004 \001(\014\"{\n\021friendqunList_ask\022\023\n\013mobileP"
    "hone\030\001 \001(\014\022\017\n\007id_card\030\002 \001(\014\022-\n\nask_heade"
    "r\030\003 \001(\0132\031.common.common_ask_header\022\021\n\tis"
    "_normal\030\004 \001(\014\"\327\001\n\021friendqunList_ans\022\017\n\007u"
    "ser_id\030\001 \001(\014\022\013\n\003uid\030\002 \001(\014\022\020\n\010nickname\030\003 "
    "\001(\014\022\016\n\006avatar\030\004 \001(\014\0220\n\013friend_list\030\005 \003(\013"
    "2\033.AFP_main_frame.friend_info\022.\n\ngroup_l"
    "ist\030\006 \003(\0132\032.AFP_main_frame.group_info\022 \n"
    "\005error\030\007 \001(\0132\021.common.errorinfo\"\244\002\n\010msg_"
    "info\022\016\n\006msg_id\030\001 \001(\014\022\020\n\010nickname\030\002 \001(\014\022\022"
    "\n\navatar_url\030\003 \001(\014\022\022\n\nupdatetime\030\004 \001(\014\022\017"
    "\n\007send_id\030\005 \001(\014\022\017\n\007recv_id\030\006 \001(\014\022\014\n\004type"
    "\030\007 \001(\005\022\013\n\003msg\030\010 \001(\014\022\017\n\007msg_url\030\t \001(\014\022\021\n\t"
    "voice_len\030\n \001(\005\022\021\n\tlongitude\030\013 \001(\002\022\020\n\010la"
    "titude\030\014 \001(\002\022\023\n\013thumb_width\030\r \001(\002\022\023\n\013thu"
    "mb_hight\030\016 \001(\002\022\013\n\003uid\030\017 \001(\014\022\021\n\tjson_body"
    "\030\020 \001(\014\"\253\001\n\016single_msg_ask\022\017\n\007user_id\030\001 \001"
    "(\014\022\014\n\004u_id\030\002 \001(\014\022\021\n\tfriend_id\030\003 \001(\014\022\022\n\nf"
    "riend_uid\030\004 \001(\014\022\022\n\nstart_time\030\005 \001(\014\022\020\n\010e"
    "nd_time\030\006 \001(\014\022-\n\nask_header\030\007 \001(\0132\031.comm"
    "on.common_ask_header\"\334\001\n\016single_msg_ans\022"
    "\017\n\007user_id\030\001 \001(\014\022\014\n\004u_id\030\002 \001(\014\022\020\n\010nickna"
    "me\030\003 \001(\014\022\021\n\tfriend_id\030\004 \001(\014\022\022\n\nfriend_ui"
    "d\030\005 \001(\014\022\022\n\nstart_time\030\006 \001(\014\022\020\n\010end_time\030"
    "\007 \001(\014\022*\n\010msg_list\030\010 \003(\0132\030.AFP_main_frame"
    ".msg_info\022 \n\005error\030\t \001(\0132\021.common.errori"
    "nfo\"\225\001\n\rgroup_msg_ask\022\017\n\007user_id\030\001 \001(\014\022\014"
    "\n\004u_id\030\002 \001(\014\022\020\n\010group_id\030\003 \001(\014\022\022\n\nstart_"
    "time\030\004 \001(\014\022\020\n\010end_time\030\005 \001(\014\022-\n\nask_head"
    "er\030\006 \001(\0132\031.common.common_ask_header\"\223\001\n\r"
    "group_msg_ans\022\017\n\007user_id\030\001 \001(\014\022\014\n\004u_id\030\002"
    " \001(\014\022\020\n\010group_id\030\003 \001(\014\022/\n\rgroupmsg_list\030"
    "\004 \003(\0132\030.AFP_main_frame.msg_info\022 \n\005error"
    "\030\005 \001(\0132\021.common.errorinfo\"R\n\020usebasicinf"
    "o_ask\022\017\n\007user_id\030\001 \001(\014\022-\n\nask_header\030\002 \001"
    "(\0132\031.common.common_ask_header\"\256\001\n\020usebas"
    "icinfo_ans\022\020\n\010nickname\030\001 \001(\014\022\023\n\013mobilePh"
    "one\030\002 \001(\014\022\017\n\007id_card\030\003 \001(\014\022\022\n\navatar_url"
    "\030\004 \001(\014\022\030\n\003sex\030\005 \001(\0162\013.common.sex\022\022\n\nis_o"
    "verdue\030\006 \001(\005\022 \n\005error\030\007 \001(\0132\021.common.err"
    "orinfo\"\305\001\n\016afp_detail_ask\022\022\n\nstart_time\030"
    "\001 \001(\014\022\020\n\010end_time\030\002 \001(\014\022\023\n\013mobilePhone\030\003"
    " \001(\014\022\017\n\007id_card\030\004 \001(\014\022\024\n\014model_result\030\005 "
    "\001(\005\022\020\n\010page_num\030\006 \001(\005\022\020\n\010cur_page\030\007 \001(\005\022"
    "-\n\nask_header\030\010 \001(\0132\031.common.common_ask_"
    "header\"\364\001\n\nafp_detail\022\021\n\treal_name\030\001 \001(\014"
    "\022\023\n\013mobilePhone\030\002 \001(\014\022\017\n\007id_card\030\003 \001(\014\022\023"
    "\n\013result_time\030\004 \001(\014\022\022\n\nmodel_name\030\005 \001(\014\022"
    "\024\n\014model_result\030\006 \001(\005\022\016\n\006status\030\007 \001(\005\022\022\n"
    "\nerror_info\030\010 \001(\014\022\016\n\006app_id\030\t \001(\014\022\024\n\014req"
    "uest_json\030\n \001(\014\022\023\n\013result_json\030\013 \001(\014\022\017\n\007"
    "version\030\014 \001(\014\"}\n\016afp_detail_ans\0223\n\017afp_d"
    "etail_list\030\001 \003(\0132\032.AFP_main_frame.afp_de"
    "tail\022\024\n\014total_number\030\002 \001(\005\022 \n\005error\030\003 \001("
    "\0132\021.common.errorinfo\"\257\001\n\016ccs_detail_ask\022"
    "\022\n\nstart_time\030\001 \001(\014\022\020\n\010end_time\030\002 \001(\014\022\023\n"
    "\013mobilePhone\030\003 \001(\014\022\017\n\007id_card\030\004 \001(\014\022-\n\na"
    "sk_header\030\005 \001(\0132\031.common.common_ask_head"
    "er\022\020\n\010page_num\030\006 \001(\005\022\020\n\010cur_page\030\007 \001(\005\"\343"
    "\001\n\nccs_detail\022\021\n\treal_name\030\001 \001(\014\022\023\n\013mobi"
    "lePhone\030\002 \001(\014\022\017\n\007id_card\030\003 \001(\014\022\023\n\013result"
    "_time\030\004 \001(\014\022\021\n\tuser_type\030\005 \001(\005\022\022\n\nis_suc"
    "cess\030\006 \001(\005\022\022\n\ncur_credit\030\007 \001(\005\022\020\n\010sum_in"
    "fo\030\010 \001(\014\022\024\n\014request_json\030\t \001(\014\022\023\n\013result"
    "_json\030\n \001(\014\022\017\n\007version\030\013 \001(\014\"}\n\016ccs_deta"
    "il_ans\0223\n\017ccs_detail_list\030\001 \003(\0132\032.AFP_ma"
    "in_frame.ccs_detail\022 \n\005error\030\002 \001(\0132\021.com"
    "mon.errorinfo\022\024\n\014total_number\030\003 \001(\005\"\265\001\n\024"
    "weidanbao_detail_ask\022\022\n\nstart_time\030\001 \001(\014"
    "\022\020\n\010end_time\030\002 \001(\014\022\023\n\013mobilePhone\030\003 \001(\014\022"
    "\017\n\007id_card\030\004 \001(\014\022-\n\nask_header\030\005 \001(\0132\031.c"
    "ommon.common_ask_header\022\020\n\010page_num\030\006 \001("
    "\005\022\020\n\010cur_page\030\007 \001(\005\"\326\001\n\020weidanbao_detail"
    "\022\021\n\treal_name\030\001 \001(\014\022\023\n\013mobilePhone\030\002 \001(\014"
    "\022\017\n\007id_card\030\003 \001(\014\022\023\n\013update_time\030\004 \001(\014\022\022"
    "\n\nis_success\030\005 \001(\005\022\022\n\ncur_credit\030\006 \001(\005\022\020"
    "\n\010sum_info\030\007 \001(\014\022\024\n\014request_json\030\010 \001(\014\022\023"
    "\n\013result_json\030\t \001(\014\022\017\n\007version\030\n \001(\014\"\217\001\n"
    "\024weidanbao_detail_ans\022\?\n\025weidanbao_detai"
    "l_list\030\001 \003(\0132 .AFP_main_frame.weidanbao_"
    "detail\022 \n\005error\030\002 \001(\0132\021.common.errorinfo"
    "\022\024\n\014total_number\030\003 \001(\005\"\267\001\n\026qiaoqiaoccs_d"
    "etail_ask\022\022\n\nstart_time\030\001 \001(\014\022\020\n\010end_tim"
    "e\030\002 \001(\014\022\023\n\013mobilePhone\030\003 \001(\014\022\017\n\007id_card\030"
    "\004 \001(\014\022-\n\nask_header\030\005 \001(\0132\031.common.commo"
    "n_ask_header\022\020\n\010page_num\030\006 \001(\005\022\020\n\010cur_pa"
    "ge\030\007 \001(\005\"\312\001\n\022qiaoqiaoccs_detail\022\021\n\treal_"
    "name\030\001 \001(\014\022\023\n\013mobilePhone\030\002 \001(\014\022\017\n\007id_ca"
    "rd\030\003 \001(\014\022\022\n\ncur_credit\030\004 \001(\005\022\031\n\021friendsh"
    "ip_credit\030\005 \001(\002\022\024\n\014worth_credit\030\006 \001(\002\022\023\n"
    "\013risk_credit\030\007 \001(\002\022\020\n\010sum_info\030\010 \001(\014\022\017\n\007"
    "version\030\t \001(\014\"\225\001\n\026qiaoqiaoccs_detail_ans"
    "\022C\n\027qiaoqiaoccs_detail_list\030\001 \003(\0132\".AFP_"
    "main_frame.qiaoqiaoccs_detail\022 \n\005error\030\002"
    " \001(\0132\021.common.errorinfo\022\024\n\014total_number\030"
    "\003 \001(\005\"`\n\032credit_request_monitor_ask\022\023\n\013h"
    "andle_type\030\001 \001(\005\022-\n\nask_header\030\002 \001(\0132\031.c"
    "ommon.common_ask_header\"\202\001\n\032credit_reque"
    "st_monitor_ans\022\n\n\002id\030\001 \001(\005\022\023\n\013update_tim"
    "e\030\002 \001(\014\022\023\n\013handle_type\030\003 \001(\005\022\014\n\004json\030\004 \001"
    "(\014\022 \n\005error\030\005 \001(\0132\021.common.errorinfo\"a\n\033"
    "credit_response_monitor_ask\022\023\n\013handle_ty"
    "pe\030\001 \001(\005\022-\n\nask_header\030\002 \001(\0132\031.common.co"
    "mmon_ask_header\"m\n\033credit_response_monit"
    "or_ans\022\n\n\002id\030\001 \001(\005\022\022\n\ninset_time\030\002 \001(\014\022\014"
    "\n\004json\030\003 \001(\014\022 \n\005error\030\004 \001(\0132\021.common.err"
    "orinfo\"}\n\035user_verification_history_ask\022"
    "-\n\nask_header\030\001 \001(\0132\031.common.common_ask_"
    "header\022-\n\004info\030\002 \001(\0132\037.QDP_basic_info.us"
    "er_basic_info\"\200\001\n\035user_verification_hist"
    "ory_ans\022 \n\005error\030\001 \001(\0132\021.common.errorinf"
    "o\022=\n\nfucver_out\030\002 \003(\0132).AFP_main_frame.f"
    "unction_verification_out*S\n\rplatform_typ"
    "e\022\017\n\013niiwoo_type\020\001\022\020\n\014tuandai_type\020\002\022\r\n\t"
    "both_type\020\003\022\020\n\014neither_type\020\004*c\n\014overdue"
    "_type\022\027\n\023borrow_overdue_type\020\001\022\027\n\023dianfu"
    "_overdue_type\020\002\022\020\n\014both_overdue\020\003\022\017\n\013not"
    "_overdue\020\004*\327\010\n\026function_serial_number\022\022\n"
    "\016ENUM_ZHIMA_FEN\020\000\022\034\n\030ENUM_ZHIMA_XUELIREN"
    "ZHENG\020\001\022\034\n\030ENUM_ZHIMA_XUEJIRENZHENG\020\002\022\036\n"
    "\032ENUM_ZHIMA_FENGXIANMINGDAN\020\003\022\035\n\031ENUM_ZH"
    "IMA_SHENFENMAOYONG\020\004\022\033\n\027ENUM_ZHIMA_DIZHI"
    "PANDING\020\005\022\033\n\027ENUM_ZHIMA_SHENFENPIPEI\020\006\022!"
    "\n\035ENUM_ZHIMA_SHOUJIHAOMAPANDING\020\007\022\037\n\033ENU"
    "M_ZHIMA_YINHANGKAPANDING\020\010\022\032\n\026ENUM_ZHIMA"
    "_KXHJFXYZ_IP\020\t\022\035\n\031ENUM_ZHIMA_KXHJFXYZ_SJ"
    "SBH\020\n\022\033\n\027ENUM_ZHIMA_KXHJFXYZ_MAC\020\013\022\024\n\020EN"
    "UM_ZHIMA_GXRRZ\020\014\022 \n\034ENUM_YUANJIN_SHENFEN"
    "YANZHENG\020\r\022\035\n\031ENUM_TONGDUN_ZHUCESHIJIAN\020"
    "\016\022\036\n\032ENUM_TONGDUN_DENGLUSHIJIAN\020\017\022\035\n\031ENU"
    "M_TONGDUN_ZHIFUSHIJIAN\020\020\022 \n\034ENUM_TONGDUN"
    "_CHONGZHISHIJIAN\020\021\022\037\n\033ENUM_TONGDUN_JIEKU"
    "ANSHIJIAN\020\022\022\036\n\032ENUM_TONGDUN_TIXIANSHIJIA"
    "N\020\023\022\036\n\032ENUM_TONGDUN_XIUGAISHIJIAN\020\024\022#\n\037E"
    "NUM_QIANHAIZHENGXIN_HEIMINGDAN\020\025\022\"\n\036ENUM"
    "_QIANHAIZHENGXIN_PINGFENKA\020\026\022\033\n\027ENUM_PEN"
    "GYUAN_GRSFJFXYZ\020\027\022\031\n\025ENUM_PENGYUAN_SJHSM"
    "RZ\020\030\022\030\n\024ENUM_PENGYUAN_YHLSRZ\020\031\022\025\n\021ENUM_B"
    "AIRONG_FXGD\020\032\022\032\n\026ENUM_ANRONG_MSP_BAOGAO\020"
    "\033\022\"\n\036ENUM_FAYUANLAOLAI_LAOLAICHAXUN\020\034\022\024\n"
    "\020ENUM_WDHMD_HMDCX\020\035\022\023\n\017ENUM_ZHIMA_INFO\020\036"
    "\022\026\n\022ENUM_YUANJING_INFO\020\037\022\026\n\022ENUM_PENGYUA"
    "N_INFO\020 \022\025\n\021ENUM_TONGDUN_INFO\020!\022\025\n\021ENUM_"
    "QIANHAI_INFO\020\"\022\025\n\021ENUM_BAIRONG_INFO\020#\022\024\n"
    "\020ENUM_LAOLAI_INFO\020$\022\027\n\023ENUM_BLACKLIST_IN"
    "FO\020%", 20084);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AFP_main_frame.proto", &protobuf_RegisterTypes);
  interface_info_ask::default_instance_ = new interface_info_ask();
  interface_info_ans::default_instance_ = new interface_info_ans();
  emergency_contact::default_instance_ = new emergency_contact();
  blacklist_user_info::default_instance_ = new blacklist_user_info();
  data_sources_info::default_instance_ = new data_sources_info();
  platform_info::default_instance_ = new platform_info();
  platform_service::default_instance_ = new platform_service();
  model_hit_statistics_info::default_instance_ = new model_hit_statistics_info();
  hit_user_info::default_instance_ = new hit_user_info();
  hit_user_analyze_info::default_instance_ = new hit_user_analyze_info();
  hit_rule_analyze_info::default_instance_ = new hit_rule_analyze_info();
  hit_detail_info::default_instance_ = new hit_detail_info();
  blacklist_data_sources_ask::default_instance_ = new blacklist_data_sources_ask();
  blacklist_data_sources_ans::default_instance_ = new blacklist_data_sources_ans();
  blacklist_query_ask::default_instance_ = new blacklist_query_ask();
  blacklist_query_ans::default_instance_ = new blacklist_query_ans();
  blacklist_detail_ask::default_instance_ = new blacklist_detail_ask();
  blacklist_detail_ans::default_instance_ = new blacklist_detail_ans();
  blacklist_save_ask::default_instance_ = new blacklist_save_ask();
  blacklist_save_ans::default_instance_ = new blacklist_save_ans();
  blacklist_remove_ask::default_instance_ = new blacklist_remove_ask();
  blacklist_remove_ans::default_instance_ = new blacklist_remove_ans();
  auto_trace_info::default_instance_ = new auto_trace_info();
  auto_trace_ask::default_instance_ = new auto_trace_ask();
  auto_trace_ans::default_instance_ = new auto_trace_ans();
  credit_score_interval_info::default_instance_ = new credit_score_interval_info();
  credit_score_statistics_ask::default_instance_ = new credit_score_statistics_ask();
  credit_score_statistics_ans::default_instance_ = new credit_score_statistics_ans();
  credit_ask::default_instance_ = new credit_ask();
  credit_info::default_instance_ = new credit_info();
  credit_ans::default_instance_ = new credit_ans();
  verify_model_info::default_instance_ = new verify_model_info();
  verify_detail_info::default_instance_ = new verify_detail_info();
  verify_model_ask::default_instance_ = new verify_model_ask();
  verify_model_ans::default_instance_ = new verify_model_ans();
  verify_detail_ask::default_instance_ = new verify_detail_ask();
  verify_detail_ans::default_instance_ = new verify_detail_ans();
  afp_verify_info::default_instance_ = new afp_verify_info();
  afp_model_verify_ask::default_instance_ = new afp_model_verify_ask();
  afp_model_verify_ans::default_instance_ = new afp_model_verify_ans();
  third_platform_verify_info::default_instance_ = new third_platform_verify_info();
  identity_sync_ask::default_instance_ = new identity_sync_ask();
  identity_sync_ans::default_instance_ = new identity_sync_ans();
  model_verify_info::default_instance_ = new model_verify_info();
  model_verify_ask::default_instance_ = new model_verify_ask();
  model_verify_ans::default_instance_ = new model_verify_ans();
  platform_info_ask::default_instance_ = new platform_info_ask();
  platform_info_ans::default_instance_ = new platform_info_ans();
  model_hit_statistics_ask::default_instance_ = new model_hit_statistics_ask();
  model_hit_statistics_ans::default_instance_ = new model_hit_statistics_ans();
  hit_list_ask::default_instance_ = new hit_list_ask();
  hit_list_ans::default_instance_ = new hit_list_ans();
  hit_user_property_analyze_ask::default_instance_ = new hit_user_property_analyze_ask();
  hit_user_property_analyze_ans::default_instance_ = new hit_user_property_analyze_ans();
  hit_rule_analyze_ask::default_instance_ = new hit_rule_analyze_ask();
  hit_rule_analyze_ans::default_instance_ = new hit_rule_analyze_ans();
  hit_detail_ask::default_instance_ = new hit_detail_ask();
  hit_detail_ans::default_instance_ = new hit_detail_ans();
  user_location_track_info::default_instance_ = new user_location_track_info();
  user_location_track_ask::default_instance_ = new user_location_track_ask();
  user_location_track_ans::default_instance_ = new user_location_track_ans();
  by_inquirers::default_instance_ = new by_inquirers();
  user_info_ask::default_instance_ = new user_info_ask();
  user_info_ans::default_instance_ = new user_info_ans();
  AFP_LandedAccount::default_instance_ = new AFP_LandedAccount();
  phone_contacts_info::default_instance_ = new phone_contacts_info();
  platform_register_user_info::default_instance_ = new platform_register_user_info();
  phone_info::default_instance_ = new phone_info();
  yuliu_common_user_info::default_instance_ = new yuliu_common_user_info();
  yuliu_platform_user_info::default_instance_ = new yuliu_platform_user_info();
  phones_info::default_instance_ = new phones_info();
  phone_contacts_analyze_ask::default_instance_ = new phone_contacts_analyze_ask();
  phone_contacts_analyze_ans::default_instance_ = new phone_contacts_analyze_ans();
  function_verification_in::default_instance_ = new function_verification_in();
  function_verification_out::default_instance_ = new function_verification_out();
  user_verification_list_ask::default_instance_ = new user_verification_list_ask();
  user_verification_list_ans::default_instance_ = new user_verification_list_ans();
  verify_info::default_instance_ = new verify_info();
  batch_verify_ask::default_instance_ = new batch_verify_ask();
  batch_verify_ans::default_instance_ = new batch_verify_ans();
  area_name::default_instance_ = new area_name();
  bid_info::default_instance_ = new bid_info();
  detail_early_warning::default_instance_ = new detail_early_warning();
  statistical_Intel_warning_ask::default_instance_ = new statistical_Intel_warning_ask();
  statistical_early_warning_ans::default_instance_ = new statistical_early_warning_ans();
  statistical_Intel_warning_ans::default_instance_ = new statistical_Intel_warning_ans();
  detail_early_warning_ask::default_instance_ = new detail_early_warning_ask();
  detail_early_warning_ans::default_instance_ = new detail_early_warning_ans();
  cancel_the_warning_ask::default_instance_ = new cancel_the_warning_ask();
  cancel_the_warning_ans::default_instance_ = new cancel_the_warning_ans();
  modify_save_warning_ask::default_instance_ = new modify_save_warning_ask();
  modify_save_warning_ans::default_instance_ = new modify_save_warning_ans();
  bid_detail_ask::default_instance_ = new bid_detail_ask();
  borrow_bid_detail_info::default_instance_ = new borrow_bid_detail_info();
  qiaoqiao_bid_info::default_instance_ = new qiaoqiao_bid_info();
  borrow_bid_detail_ans::default_instance_ = new borrow_bid_detail_ans();
  qiaoqiao_bid_ans::default_instance_ = new qiaoqiao_bid_ans();
  province_city_inquire_ask::default_instance_ = new province_city_inquire_ask();
  province_city_inquire_ans::default_instance_ = new province_city_inquire_ans();
  friend_info::default_instance_ = new friend_info();
  group_info::default_instance_ = new group_info();
  friendqunList_ask::default_instance_ = new friendqunList_ask();
  friendqunList_ans::default_instance_ = new friendqunList_ans();
  msg_info::default_instance_ = new msg_info();
  single_msg_ask::default_instance_ = new single_msg_ask();
  single_msg_ans::default_instance_ = new single_msg_ans();
  group_msg_ask::default_instance_ = new group_msg_ask();
  group_msg_ans::default_instance_ = new group_msg_ans();
  usebasicinfo_ask::default_instance_ = new usebasicinfo_ask();
  usebasicinfo_ans::default_instance_ = new usebasicinfo_ans();
  afp_detail_ask::default_instance_ = new afp_detail_ask();
  afp_detail::default_instance_ = new afp_detail();
  afp_detail_ans::default_instance_ = new afp_detail_ans();
  ccs_detail_ask::default_instance_ = new ccs_detail_ask();
  ccs_detail::default_instance_ = new ccs_detail();
  ccs_detail_ans::default_instance_ = new ccs_detail_ans();
  weidanbao_detail_ask::default_instance_ = new weidanbao_detail_ask();
  weidanbao_detail::default_instance_ = new weidanbao_detail();
  weidanbao_detail_ans::default_instance_ = new weidanbao_detail_ans();
  qiaoqiaoccs_detail_ask::default_instance_ = new qiaoqiaoccs_detail_ask();
  qiaoqiaoccs_detail::default_instance_ = new qiaoqiaoccs_detail();
  qiaoqiaoccs_detail_ans::default_instance_ = new qiaoqiaoccs_detail_ans();
  credit_request_monitor_ask::default_instance_ = new credit_request_monitor_ask();
  credit_request_monitor_ans::default_instance_ = new credit_request_monitor_ans();
  credit_response_monitor_ask::default_instance_ = new credit_response_monitor_ask();
  credit_response_monitor_ans::default_instance_ = new credit_response_monitor_ans();
  user_verification_history_ask::default_instance_ = new user_verification_history_ask();
  user_verification_history_ans::default_instance_ = new user_verification_history_ans();
  interface_info_ask::default_instance_->InitAsDefaultInstance();
  interface_info_ans::default_instance_->InitAsDefaultInstance();
  emergency_contact::default_instance_->InitAsDefaultInstance();
  blacklist_user_info::default_instance_->InitAsDefaultInstance();
  data_sources_info::default_instance_->InitAsDefaultInstance();
  platform_info::default_instance_->InitAsDefaultInstance();
  platform_service::default_instance_->InitAsDefaultInstance();
  model_hit_statistics_info::default_instance_->InitAsDefaultInstance();
  hit_user_info::default_instance_->InitAsDefaultInstance();
  hit_user_analyze_info::default_instance_->InitAsDefaultInstance();
  hit_rule_analyze_info::default_instance_->InitAsDefaultInstance();
  hit_detail_info::default_instance_->InitAsDefaultInstance();
  blacklist_data_sources_ask::default_instance_->InitAsDefaultInstance();
  blacklist_data_sources_ans::default_instance_->InitAsDefaultInstance();
  blacklist_query_ask::default_instance_->InitAsDefaultInstance();
  blacklist_query_ans::default_instance_->InitAsDefaultInstance();
  blacklist_detail_ask::default_instance_->InitAsDefaultInstance();
  blacklist_detail_ans::default_instance_->InitAsDefaultInstance();
  blacklist_save_ask::default_instance_->InitAsDefaultInstance();
  blacklist_save_ans::default_instance_->InitAsDefaultInstance();
  blacklist_remove_ask::default_instance_->InitAsDefaultInstance();
  blacklist_remove_ans::default_instance_->InitAsDefaultInstance();
  auto_trace_info::default_instance_->InitAsDefaultInstance();
  auto_trace_ask::default_instance_->InitAsDefaultInstance();
  auto_trace_ans::default_instance_->InitAsDefaultInstance();
  credit_score_interval_info::default_instance_->InitAsDefaultInstance();
  credit_score_statistics_ask::default_instance_->InitAsDefaultInstance();
  credit_score_statistics_ans::default_instance_->InitAsDefaultInstance();
  credit_ask::default_instance_->InitAsDefaultInstance();
  credit_info::default_instance_->InitAsDefaultInstance();
  credit_ans::default_instance_->InitAsDefaultInstance();
  verify_model_info::default_instance_->InitAsDefaultInstance();
  verify_detail_info::default_instance_->InitAsDefaultInstance();
  verify_model_ask::default_instance_->InitAsDefaultInstance();
  verify_model_ans::default_instance_->InitAsDefaultInstance();
  verify_detail_ask::default_instance_->InitAsDefaultInstance();
  verify_detail_ans::default_instance_->InitAsDefaultInstance();
  afp_verify_info::default_instance_->InitAsDefaultInstance();
  afp_model_verify_ask::default_instance_->InitAsDefaultInstance();
  afp_model_verify_ans::default_instance_->InitAsDefaultInstance();
  third_platform_verify_info::default_instance_->InitAsDefaultInstance();
  identity_sync_ask::default_instance_->InitAsDefaultInstance();
  identity_sync_ans::default_instance_->InitAsDefaultInstance();
  model_verify_info::default_instance_->InitAsDefaultInstance();
  model_verify_ask::default_instance_->InitAsDefaultInstance();
  model_verify_ans::default_instance_->InitAsDefaultInstance();
  platform_info_ask::default_instance_->InitAsDefaultInstance();
  platform_info_ans::default_instance_->InitAsDefaultInstance();
  model_hit_statistics_ask::default_instance_->InitAsDefaultInstance();
  model_hit_statistics_ans::default_instance_->InitAsDefaultInstance();
  hit_list_ask::default_instance_->InitAsDefaultInstance();
  hit_list_ans::default_instance_->InitAsDefaultInstance();
  hit_user_property_analyze_ask::default_instance_->InitAsDefaultInstance();
  hit_user_property_analyze_ans::default_instance_->InitAsDefaultInstance();
  hit_rule_analyze_ask::default_instance_->InitAsDefaultInstance();
  hit_rule_analyze_ans::default_instance_->InitAsDefaultInstance();
  hit_detail_ask::default_instance_->InitAsDefaultInstance();
  hit_detail_ans::default_instance_->InitAsDefaultInstance();
  user_location_track_info::default_instance_->InitAsDefaultInstance();
  user_location_track_ask::default_instance_->InitAsDefaultInstance();
  user_location_track_ans::default_instance_->InitAsDefaultInstance();
  by_inquirers::default_instance_->InitAsDefaultInstance();
  user_info_ask::default_instance_->InitAsDefaultInstance();
  user_info_ans::default_instance_->InitAsDefaultInstance();
  AFP_LandedAccount::default_instance_->InitAsDefaultInstance();
  phone_contacts_info::default_instance_->InitAsDefaultInstance();
  platform_register_user_info::default_instance_->InitAsDefaultInstance();
  phone_info::default_instance_->InitAsDefaultInstance();
  yuliu_common_user_info::default_instance_->InitAsDefaultInstance();
  yuliu_platform_user_info::default_instance_->InitAsDefaultInstance();
  phones_info::default_instance_->InitAsDefaultInstance();
  phone_contacts_analyze_ask::default_instance_->InitAsDefaultInstance();
  phone_contacts_analyze_ans::default_instance_->InitAsDefaultInstance();
  function_verification_in::default_instance_->InitAsDefaultInstance();
  function_verification_out::default_instance_->InitAsDefaultInstance();
  user_verification_list_ask::default_instance_->InitAsDefaultInstance();
  user_verification_list_ans::default_instance_->InitAsDefaultInstance();
  verify_info::default_instance_->InitAsDefaultInstance();
  batch_verify_ask::default_instance_->InitAsDefaultInstance();
  batch_verify_ans::default_instance_->InitAsDefaultInstance();
  area_name::default_instance_->InitAsDefaultInstance();
  bid_info::default_instance_->InitAsDefaultInstance();
  detail_early_warning::default_instance_->InitAsDefaultInstance();
  statistical_Intel_warning_ask::default_instance_->InitAsDefaultInstance();
  statistical_early_warning_ans::default_instance_->InitAsDefaultInstance();
  statistical_Intel_warning_ans::default_instance_->InitAsDefaultInstance();
  detail_early_warning_ask::default_instance_->InitAsDefaultInstance();
  detail_early_warning_ans::default_instance_->InitAsDefaultInstance();
  cancel_the_warning_ask::default_instance_->InitAsDefaultInstance();
  cancel_the_warning_ans::default_instance_->InitAsDefaultInstance();
  modify_save_warning_ask::default_instance_->InitAsDefaultInstance();
  modify_save_warning_ans::default_instance_->InitAsDefaultInstance();
  bid_detail_ask::default_instance_->InitAsDefaultInstance();
  borrow_bid_detail_info::default_instance_->InitAsDefaultInstance();
  qiaoqiao_bid_info::default_instance_->InitAsDefaultInstance();
  borrow_bid_detail_ans::default_instance_->InitAsDefaultInstance();
  qiaoqiao_bid_ans::default_instance_->InitAsDefaultInstance();
  province_city_inquire_ask::default_instance_->InitAsDefaultInstance();
  province_city_inquire_ans::default_instance_->InitAsDefaultInstance();
  friend_info::default_instance_->InitAsDefaultInstance();
  group_info::default_instance_->InitAsDefaultInstance();
  friendqunList_ask::default_instance_->InitAsDefaultInstance();
  friendqunList_ans::default_instance_->InitAsDefaultInstance();
  msg_info::default_instance_->InitAsDefaultInstance();
  single_msg_ask::default_instance_->InitAsDefaultInstance();
  single_msg_ans::default_instance_->InitAsDefaultInstance();
  group_msg_ask::default_instance_->InitAsDefaultInstance();
  group_msg_ans::default_instance_->InitAsDefaultInstance();
  usebasicinfo_ask::default_instance_->InitAsDefaultInstance();
  usebasicinfo_ans::default_instance_->InitAsDefaultInstance();
  afp_detail_ask::default_instance_->InitAsDefaultInstance();
  afp_detail::default_instance_->InitAsDefaultInstance();
  afp_detail_ans::default_instance_->InitAsDefaultInstance();
  ccs_detail_ask::default_instance_->InitAsDefaultInstance();
  ccs_detail::default_instance_->InitAsDefaultInstance();
  ccs_detail_ans::default_instance_->InitAsDefaultInstance();
  weidanbao_detail_ask::default_instance_->InitAsDefaultInstance();
  weidanbao_detail::default_instance_->InitAsDefaultInstance();
  weidanbao_detail_ans::default_instance_->InitAsDefaultInstance();
  qiaoqiaoccs_detail_ask::default_instance_->InitAsDefaultInstance();
  qiaoqiaoccs_detail::default_instance_->InitAsDefaultInstance();
  qiaoqiaoccs_detail_ans::default_instance_->InitAsDefaultInstance();
  credit_request_monitor_ask::default_instance_->InitAsDefaultInstance();
  credit_request_monitor_ans::default_instance_->InitAsDefaultInstance();
  credit_response_monitor_ask::default_instance_->InitAsDefaultInstance();
  credit_response_monitor_ans::default_instance_->InitAsDefaultInstance();
  user_verification_history_ask::default_instance_->InitAsDefaultInstance();
  user_verification_history_ans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AFP_5fmain_5fframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AFP_5fmain_5fframe_2eproto {
  StaticDescriptorInitializer_AFP_5fmain_5fframe_2eproto() {
    protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  }
} static_descriptor_initializer_AFP_5fmain_5fframe_2eproto_;
const ::google::protobuf::EnumDescriptor* platform_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_type_descriptor_;
}
bool platform_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* overdue_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return overdue_type_descriptor_;
}
bool overdue_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* function_serial_number_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return function_serial_number_descriptor_;
}
bool function_serial_number_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int interface_info_ask::kJsonAskFieldNumber;
const int interface_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

interface_info_ask::interface_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.interface_info_ask)
}

void interface_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

interface_info_ask::interface_info_ask(const interface_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.interface_info_ask)
}

void interface_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_ask_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interface_info_ask::~interface_info_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.interface_info_ask)
  SharedDtor();
}

void interface_info_ask::SharedDtor() {
  if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ask_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void interface_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interface_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interface_info_ask_descriptor_;
}

const interface_info_ask& interface_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

interface_info_ask* interface_info_ask::default_instance_ = NULL;

interface_info_ask* interface_info_ask::New() const {
  return new interface_info_ask;
}

void interface_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_json_ask()) {
      if (json_ask_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_ask_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interface_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.interface_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_ask = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_ask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.interface_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.interface_info_ask)
  return false;
#undef DO_
}

void interface_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.interface_info_ask)
  // optional bytes json_ask = 1;
  if (has_json_ask()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_ask(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.interface_info_ask)
}

::google::protobuf::uint8* interface_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.interface_info_ask)
  // optional bytes json_ask = 1;
  if (has_json_ask()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_ask(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.interface_info_ask)
  return target;
}

int interface_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_ask = 1;
    if (has_json_ask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_ask());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interface_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interface_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interface_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interface_info_ask::MergeFrom(const interface_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_ask()) {
      set_json_ask(from.json_ask());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interface_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interface_info_ask::CopyFrom(const interface_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interface_info_ask::IsInitialized() const {

  return true;
}

void interface_info_ask::Swap(interface_info_ask* other) {
  if (other != this) {
    std::swap(json_ask_, other->json_ask_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interface_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interface_info_ask_descriptor_;
  metadata.reflection = interface_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int interface_info_ans::kJsonAnsFieldNumber;
const int interface_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

interface_info_ans::interface_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.interface_info_ans)
}

void interface_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

interface_info_ans::interface_info_ans(const interface_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.interface_info_ans)
}

void interface_info_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interface_info_ans::~interface_info_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.interface_info_ans)
  SharedDtor();
}

void interface_info_ans::SharedDtor() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void interface_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interface_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interface_info_ans_descriptor_;
}

const interface_info_ans& interface_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

interface_info_ans* interface_info_ans::default_instance_ = NULL;

interface_info_ans* interface_info_ans::New() const {
  return new interface_info_ans;
}

void interface_info_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_json_ans()) {
      if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_ans_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interface_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.interface_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_ans = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_ans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.interface_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.interface_info_ans)
  return false;
#undef DO_
}

void interface_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.interface_info_ans)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_ans(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.interface_info_ans)
}

::google::protobuf::uint8* interface_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.interface_info_ans)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_ans(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.interface_info_ans)
  return target;
}

int interface_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_ans = 1;
    if (has_json_ans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_ans());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interface_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interface_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interface_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interface_info_ans::MergeFrom(const interface_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_ans()) {
      set_json_ans(from.json_ans());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interface_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interface_info_ans::CopyFrom(const interface_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interface_info_ans::IsInitialized() const {

  return true;
}

void interface_info_ans::Swap(interface_info_ans* other) {
  if (other != this) {
    std::swap(json_ans_, other->json_ans_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interface_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interface_info_ans_descriptor_;
  metadata.reflection = interface_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emergency_contact::kAppellationFieldNumber;
const int emergency_contact::kKinNameFieldNumber;
const int emergency_contact::kKinPhoneFieldNumber;
#endif  // !_MSC_VER

emergency_contact::emergency_contact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.emergency_contact)
}

void emergency_contact::InitAsDefaultInstance() {
}

emergency_contact::emergency_contact(const emergency_contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.emergency_contact)
}

void emergency_contact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appellation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kin_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emergency_contact::~emergency_contact() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.emergency_contact)
  SharedDtor();
}

void emergency_contact::SharedDtor() {
  if (appellation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appellation_;
  }
  if (kin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kin_name_;
  }
  if (kin_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kin_phone_;
  }
  if (this != default_instance_) {
  }
}

void emergency_contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emergency_contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emergency_contact_descriptor_;
}

const emergency_contact& emergency_contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

emergency_contact* emergency_contact::default_instance_ = NULL;

emergency_contact* emergency_contact::New() const {
  return new emergency_contact;
}

void emergency_contact::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_appellation()) {
      if (appellation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appellation_->clear();
      }
    }
    if (has_kin_name()) {
      if (kin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kin_name_->clear();
      }
    }
    if (has_kin_phone()) {
      if (kin_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kin_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emergency_contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.emergency_contact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes appellation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appellation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kin_name;
        break;
      }

      // optional bytes kin_name = 2;
      case 2: {
        if (tag == 18) {
         parse_kin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kin_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kin_phone;
        break;
      }

      // optional bytes kin_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_kin_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kin_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.emergency_contact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.emergency_contact)
  return false;
#undef DO_
}

void emergency_contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.emergency_contact)
  // optional bytes appellation = 1;
  if (has_appellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->appellation(), output);
  }

  // optional bytes kin_name = 2;
  if (has_kin_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->kin_name(), output);
  }

  // optional bytes kin_phone = 3;
  if (has_kin_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->kin_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.emergency_contact)
}

::google::protobuf::uint8* emergency_contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.emergency_contact)
  // optional bytes appellation = 1;
  if (has_appellation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->appellation(), target);
  }

  // optional bytes kin_name = 2;
  if (has_kin_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->kin_name(), target);
  }

  // optional bytes kin_phone = 3;
  if (has_kin_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->kin_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.emergency_contact)
  return target;
}

int emergency_contact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes appellation = 1;
    if (has_appellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appellation());
    }

    // optional bytes kin_name = 2;
    if (has_kin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kin_name());
    }

    // optional bytes kin_phone = 3;
    if (has_kin_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kin_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emergency_contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emergency_contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emergency_contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emergency_contact::MergeFrom(const emergency_contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appellation()) {
      set_appellation(from.appellation());
    }
    if (from.has_kin_name()) {
      set_kin_name(from.kin_name());
    }
    if (from.has_kin_phone()) {
      set_kin_phone(from.kin_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emergency_contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emergency_contact::CopyFrom(const emergency_contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emergency_contact::IsInitialized() const {

  return true;
}

void emergency_contact::Swap(emergency_contact* other) {
  if (other != this) {
    std::swap(appellation_, other->appellation_);
    std::swap(kin_name_, other->kin_name_);
    std::swap(kin_phone_, other->kin_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emergency_contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emergency_contact_descriptor_;
  metadata.reflection = emergency_contact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_user_info::kUserInfoFieldNumber;
const int blacklist_user_info::kLoanTotalFieldNumber;
const int blacklist_user_info::kLoanCountFieldNumber;
const int blacklist_user_info::kAlsoTotalFieldNumber;
const int blacklist_user_info::kOverdueCountFieldNumber;
const int blacklist_user_info::kRepaymentStateFieldNumber;
const int blacklist_user_info::kOverdueDayFieldNumber;
const int blacklist_user_info::kCheatSeverityFieldNumber;
const int blacklist_user_info::kDataSourcesFieldNumber;
const int blacklist_user_info::kOperationPersonnelFieldNumber;
const int blacklist_user_info::kOperationTimeFieldNumber;
const int blacklist_user_info::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

blacklist_user_info::blacklist_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_user_info)
}

void blacklist_user_info::InitAsDefaultInstance() {
  user_info_ = const_cast< ::common::user_info*>(&::common::user_info::default_instance());
}

blacklist_user_info::blacklist_user_info(const blacklist_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_user_info)
}

void blacklist_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_info_ = NULL;
  loan_total_ = 0;
  loan_count_ = 0;
  also_total_ = 0;
  overdue_count_ = 0;
  repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overdue_day_ = 0;
  cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_personnel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_user_info::~blacklist_user_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_user_info)
  SharedDtor();
}

void blacklist_user_info::SharedDtor() {
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (operation_personnel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_personnel_;
  }
  if (operation_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_time_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (this != default_instance_) {
    delete user_info_;
  }
}

void blacklist_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_user_info_descriptor_;
}

const blacklist_user_info& blacklist_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_user_info* blacklist_user_info::default_instance_ = NULL;

blacklist_user_info* blacklist_user_info::New() const {
  return new blacklist_user_info;
}

void blacklist_user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<blacklist_user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(loan_total_, overdue_count_);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_info::Clear();
    }
    if (has_repayment_state()) {
      if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repayment_state_->clear();
      }
    }
    overdue_day_ = 0;
    if (has_cheat_severity()) {
      if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cheat_severity_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_data_sources()) {
      if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_sources_->clear();
      }
    }
    if (has_operation_personnel()) {
      if (operation_personnel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operation_personnel_->clear();
      }
    }
    if (has_operation_time()) {
      if (operation_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operation_time_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_info user_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_loan_total;
        break;
      }

      // optional float loan_total = 2;
      case 2: {
        if (tag == 21) {
         parse_loan_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loan_total_)));
          set_has_loan_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loan_count;
        break;
      }

      // optional int32 loan_count = 3;
      case 3: {
        if (tag == 24) {
         parse_loan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loan_count_)));
          set_has_loan_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_also_total;
        break;
      }

      // optional float also_total = 4;
      case 4: {
        if (tag == 37) {
         parse_also_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &also_total_)));
          set_has_also_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_overdue_count;
        break;
      }

      // optional int32 overdue_count = 5;
      case 5: {
        if (tag == 40) {
         parse_overdue_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_count_)));
          set_has_overdue_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_repayment_state;
        break;
      }

      // optional bytes repayment_state = 6;
      case 6: {
        if (tag == 50) {
         parse_repayment_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repayment_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_overdue_day;
        break;
      }

      // optional int32 overdue_day = 7;
      case 7: {
        if (tag == 56) {
         parse_overdue_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overdue_day_)));
          set_has_overdue_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cheat_severity;
        break;
      }

      // optional bytes cheat_severity = 8;
      case 8: {
        if (tag == 66) {
         parse_cheat_severity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cheat_severity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data_sources;
        break;
      }

      // optional bytes data_sources = 9;
      case 9: {
        if (tag == 74) {
         parse_data_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_operation_personnel;
        break;
      }

      // optional bytes operation_personnel = 10;
      case 10: {
        if (tag == 82) {
         parse_operation_personnel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operation_personnel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_operation_time;
        break;
      }

      // optional bytes operation_time = 11;
      case 11: {
        if (tag == 90) {
         parse_operation_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operation_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 12;
      case 12: {
        if (tag == 98) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_user_info)
  return false;
#undef DO_
}

void blacklist_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_user_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional float loan_total = 2;
  if (has_loan_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->loan_total(), output);
  }

  // optional int32 loan_count = 3;
  if (has_loan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loan_count(), output);
  }

  // optional float also_total = 4;
  if (has_also_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->also_total(), output);
  }

  // optional int32 overdue_count = 5;
  if (has_overdue_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overdue_count(), output);
  }

  // optional bytes repayment_state = 6;
  if (has_repayment_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->repayment_state(), output);
  }

  // optional int32 overdue_day = 7;
  if (has_overdue_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->overdue_day(), output);
  }

  // optional bytes cheat_severity = 8;
  if (has_cheat_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->cheat_severity(), output);
  }

  // optional bytes data_sources = 9;
  if (has_data_sources()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data_sources(), output);
  }

  // optional bytes operation_personnel = 10;
  if (has_operation_personnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->operation_personnel(), output);
  }

  // optional bytes operation_time = 11;
  if (has_operation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->operation_time(), output);
  }

  // optional bytes update_time = 12;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_user_info)
}

::google::protobuf::uint8* blacklist_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_user_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional float loan_total = 2;
  if (has_loan_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->loan_total(), target);
  }

  // optional int32 loan_count = 3;
  if (has_loan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loan_count(), target);
  }

  // optional float also_total = 4;
  if (has_also_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->also_total(), target);
  }

  // optional int32 overdue_count = 5;
  if (has_overdue_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overdue_count(), target);
  }

  // optional bytes repayment_state = 6;
  if (has_repayment_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->repayment_state(), target);
  }

  // optional int32 overdue_day = 7;
  if (has_overdue_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overdue_day(), target);
  }

  // optional bytes cheat_severity = 8;
  if (has_cheat_severity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->cheat_severity(), target);
  }

  // optional bytes data_sources = 9;
  if (has_data_sources()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data_sources(), target);
  }

  // optional bytes operation_personnel = 10;
  if (has_operation_personnel()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->operation_personnel(), target);
  }

  // optional bytes operation_time = 11;
  if (has_operation_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->operation_time(), target);
  }

  // optional bytes update_time = 12;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_user_info)
  return target;
}

int blacklist_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_info user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional float loan_total = 2;
    if (has_loan_total()) {
      total_size += 1 + 4;
    }

    // optional int32 loan_count = 3;
    if (has_loan_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loan_count());
    }

    // optional float also_total = 4;
    if (has_also_total()) {
      total_size += 1 + 4;
    }

    // optional int32 overdue_count = 5;
    if (has_overdue_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_count());
    }

    // optional bytes repayment_state = 6;
    if (has_repayment_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repayment_state());
    }

    // optional int32 overdue_day = 7;
    if (has_overdue_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overdue_day());
    }

    // optional bytes cheat_severity = 8;
    if (has_cheat_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cheat_severity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes data_sources = 9;
    if (has_data_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_sources());
    }

    // optional bytes operation_personnel = 10;
    if (has_operation_personnel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operation_personnel());
    }

    // optional bytes operation_time = 11;
    if (has_operation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operation_time());
    }

    // optional bytes update_time = 12;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_user_info::MergeFrom(const blacklist_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_info::MergeFrom(from.user_info());
    }
    if (from.has_loan_total()) {
      set_loan_total(from.loan_total());
    }
    if (from.has_loan_count()) {
      set_loan_count(from.loan_count());
    }
    if (from.has_also_total()) {
      set_also_total(from.also_total());
    }
    if (from.has_overdue_count()) {
      set_overdue_count(from.overdue_count());
    }
    if (from.has_repayment_state()) {
      set_repayment_state(from.repayment_state());
    }
    if (from.has_overdue_day()) {
      set_overdue_day(from.overdue_day());
    }
    if (from.has_cheat_severity()) {
      set_cheat_severity(from.cheat_severity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data_sources()) {
      set_data_sources(from.data_sources());
    }
    if (from.has_operation_personnel()) {
      set_operation_personnel(from.operation_personnel());
    }
    if (from.has_operation_time()) {
      set_operation_time(from.operation_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_user_info::CopyFrom(const blacklist_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_user_info::IsInitialized() const {

  return true;
}

void blacklist_user_info::Swap(blacklist_user_info* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(loan_total_, other->loan_total_);
    std::swap(loan_count_, other->loan_count_);
    std::swap(also_total_, other->also_total_);
    std::swap(overdue_count_, other->overdue_count_);
    std::swap(repayment_state_, other->repayment_state_);
    std::swap(overdue_day_, other->overdue_day_);
    std::swap(cheat_severity_, other->cheat_severity_);
    std::swap(data_sources_, other->data_sources_);
    std::swap(operation_personnel_, other->operation_personnel_);
    std::swap(operation_time_, other->operation_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_user_info_descriptor_;
  metadata.reflection = blacklist_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int data_sources_info::kSourcesNoFieldNumber;
const int data_sources_info::kSourcesNameFieldNumber;
#endif  // !_MSC_VER

data_sources_info::data_sources_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.data_sources_info)
}

void data_sources_info::InitAsDefaultInstance() {
}

data_sources_info::data_sources_info(const data_sources_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.data_sources_info)
}

void data_sources_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sources_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sources_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

data_sources_info::~data_sources_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.data_sources_info)
  SharedDtor();
}

void data_sources_info::SharedDtor() {
  if (sources_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sources_no_;
  }
  if (sources_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sources_name_;
  }
  if (this != default_instance_) {
  }
}

void data_sources_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data_sources_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return data_sources_info_descriptor_;
}

const data_sources_info& data_sources_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

data_sources_info* data_sources_info::default_instance_ = NULL;

data_sources_info* data_sources_info::New() const {
  return new data_sources_info;
}

void data_sources_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sources_no()) {
      if (sources_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sources_no_->clear();
      }
    }
    if (has_sources_name()) {
      if (sources_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sources_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool data_sources_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.data_sources_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sources_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sources_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sources_name;
        break;
      }

      // optional bytes sources_name = 2;
      case 2: {
        if (tag == 18) {
         parse_sources_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sources_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.data_sources_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.data_sources_info)
  return false;
#undef DO_
}

void data_sources_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.data_sources_info)
  // optional bytes sources_no = 1;
  if (has_sources_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sources_no(), output);
  }

  // optional bytes sources_name = 2;
  if (has_sources_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sources_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.data_sources_info)
}

::google::protobuf::uint8* data_sources_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.data_sources_info)
  // optional bytes sources_no = 1;
  if (has_sources_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sources_no(), target);
  }

  // optional bytes sources_name = 2;
  if (has_sources_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sources_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.data_sources_info)
  return target;
}

int data_sources_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sources_no = 1;
    if (has_sources_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sources_no());
    }

    // optional bytes sources_name = 2;
    if (has_sources_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sources_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data_sources_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const data_sources_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const data_sources_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void data_sources_info::MergeFrom(const data_sources_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sources_no()) {
      set_sources_no(from.sources_no());
    }
    if (from.has_sources_name()) {
      set_sources_name(from.sources_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void data_sources_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_sources_info::CopyFrom(const data_sources_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_sources_info::IsInitialized() const {

  return true;
}

void data_sources_info::Swap(data_sources_info* other) {
  if (other != this) {
    std::swap(sources_no_, other->sources_no_);
    std::swap(sources_name_, other->sources_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata data_sources_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = data_sources_info_descriptor_;
  metadata.reflection = data_sources_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_info::kPlatformNoFieldNumber;
const int platform_info::kPlatformNameFieldNumber;
#endif  // !_MSC_VER

platform_info::platform_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.platform_info)
}

void platform_info::InitAsDefaultInstance() {
}

platform_info::platform_info(const platform_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.platform_info)
}

void platform_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_info::~platform_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.platform_info)
  SharedDtor();
}

void platform_info::SharedDtor() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_name_;
  }
  if (this != default_instance_) {
  }
}

void platform_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_info_descriptor_;
}

const platform_info& platform_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

platform_info* platform_info::default_instance_ = NULL;

platform_info* platform_info::New() const {
  return new platform_info;
}

void platform_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_platform_no()) {
      if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_no_->clear();
      }
    }
    if (has_platform_name()) {
      if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.platform_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_name;
        break;
      }

      // optional bytes platform_name = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.platform_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.platform_info)
  return false;
#undef DO_
}

void platform_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.platform_info)
  // optional bytes platform_no = 1;
  if (has_platform_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_no(), output);
  }

  // optional bytes platform_name = 2;
  if (has_platform_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.platform_info)
}

::google::protobuf::uint8* platform_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.platform_info)
  // optional bytes platform_no = 1;
  if (has_platform_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_no(), target);
  }

  // optional bytes platform_name = 2;
  if (has_platform_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->platform_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.platform_info)
  return target;
}

int platform_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_no = 1;
    if (has_platform_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_no());
    }

    // optional bytes platform_name = 2;
    if (has_platform_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_info::MergeFrom(const platform_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_no()) {
      set_platform_no(from.platform_no());
    }
    if (from.has_platform_name()) {
      set_platform_name(from.platform_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_info::CopyFrom(const platform_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_info::IsInitialized() const {

  return true;
}

void platform_info::Swap(platform_info* other) {
  if (other != this) {
    std::swap(platform_no_, other->platform_no_);
    std::swap(platform_name_, other->platform_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_info_descriptor_;
  metadata.reflection = platform_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_service::kSerivceIdFieldNumber;
const int platform_service::kServiceNameFieldNumber;
#endif  // !_MSC_VER

platform_service::platform_service()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.platform_service)
}

void platform_service::InitAsDefaultInstance() {
}

platform_service::platform_service(const platform_service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.platform_service)
}

void platform_service::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_service::~platform_service() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.platform_service)
  SharedDtor();
}

void platform_service::SharedDtor() {
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serivce_id_;
  }
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void platform_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_service_descriptor_;
}

const platform_service& platform_service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

platform_service* platform_service::default_instance_ = NULL;

platform_service* platform_service::New() const {
  return new platform_service;
}

void platform_service::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serivce_id()) {
      if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serivce_id_->clear();
      }
    }
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.platform_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serivce_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serivce_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_name;
        break;
      }

      // optional bytes service_name = 2;
      case 2: {
        if (tag == 18) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.platform_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.platform_service)
  return false;
#undef DO_
}

void platform_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.platform_service)
  // optional bytes serivce_id = 1;
  if (has_serivce_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serivce_id(), output);
  }

  // optional bytes service_name = 2;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->service_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.platform_service)
}

::google::protobuf::uint8* platform_service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.platform_service)
  // optional bytes serivce_id = 1;
  if (has_serivce_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serivce_id(), target);
  }

  // optional bytes service_name = 2;
  if (has_service_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->service_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.platform_service)
  return target;
}

int platform_service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes serivce_id = 1;
    if (has_serivce_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serivce_id());
    }

    // optional bytes service_name = 2;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->service_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_service::MergeFrom(const platform_service& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serivce_id()) {
      set_serivce_id(from.serivce_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_service::CopyFrom(const platform_service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_service::IsInitialized() const {

  return true;
}

void platform_service::Swap(platform_service* other) {
  if (other != this) {
    std::swap(serivce_id_, other->serivce_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_service_descriptor_;
  metadata.reflection = platform_service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_hit_statistics_info::kPlatformNameFieldNumber;
const int model_hit_statistics_info::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

model_hit_statistics_info::model_hit_statistics_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_hit_statistics_info)
}

void model_hit_statistics_info::InitAsDefaultInstance() {
}

model_hit_statistics_info::model_hit_statistics_info(const model_hit_statistics_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_hit_statistics_info)
}

void model_hit_statistics_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_hit_statistics_info::~model_hit_statistics_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_hit_statistics_info)
  SharedDtor();
}

void model_hit_statistics_info::SharedDtor() {
  if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_name_;
  }
  if (this != default_instance_) {
  }
}

void model_hit_statistics_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_hit_statistics_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_hit_statistics_info_descriptor_;
}

const model_hit_statistics_info& model_hit_statistics_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_hit_statistics_info* model_hit_statistics_info::default_instance_ = NULL;

model_hit_statistics_info* model_hit_statistics_info::New() const {
  return new model_hit_statistics_info;
}

void model_hit_statistics_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_platform_name()) {
      if (platform_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_name_->clear();
      }
    }
    total_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_hit_statistics_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_hit_statistics_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_hit_statistics_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_hit_statistics_info)
  return false;
#undef DO_
}

void model_hit_statistics_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_hit_statistics_info)
  // optional bytes platform_name = 1;
  if (has_platform_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_name(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_hit_statistics_info)
}

::google::protobuf::uint8* model_hit_statistics_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_hit_statistics_info)
  // optional bytes platform_name = 1;
  if (has_platform_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_name(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_hit_statistics_info)
  return target;
}

int model_hit_statistics_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_name = 1;
    if (has_platform_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_name());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_hit_statistics_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_hit_statistics_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_hit_statistics_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_hit_statistics_info::MergeFrom(const model_hit_statistics_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_name()) {
      set_platform_name(from.platform_name());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_hit_statistics_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_hit_statistics_info::CopyFrom(const model_hit_statistics_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_hit_statistics_info::IsInitialized() const {

  return true;
}

void model_hit_statistics_info::Swap(model_hit_statistics_info* other) {
  if (other != this) {
    std::swap(platform_name_, other->platform_name_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_hit_statistics_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_hit_statistics_info_descriptor_;
  metadata.reflection = model_hit_statistics_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_user_info::kPlatformFieldNumber;
const int hit_user_info::kRealNameFieldNumber;
const int hit_user_info::kIdCardFieldNumber;
const int hit_user_info::kMobilePhoneFieldNumber;
const int hit_user_info::kPlatformServiceFieldNumber;
const int hit_user_info::kHitResultFieldNumber;
#endif  // !_MSC_VER

hit_user_info::hit_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_user_info)
}

void hit_user_info::InitAsDefaultInstance() {
  platform_ = const_cast< ::AFP_main_frame::platform_info*>(&::AFP_main_frame::platform_info::default_instance());
}

hit_user_info::hit_user_info(const hit_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_user_info)
}

void hit_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_ = NULL;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_service_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hit_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_user_info::~hit_user_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_user_info)
  SharedDtor();
}

void hit_user_info::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (platform_service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_service_;
  }
  if (hit_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hit_result_;
  }
  if (this != default_instance_) {
    delete platform_;
  }
}

void hit_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_user_info_descriptor_;
}

const hit_user_info& hit_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_user_info* hit_user_info::default_instance_ = NULL;

hit_user_info* hit_user_info::New() const {
  return new hit_user_info;
}

void hit_user_info::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_platform()) {
      if (platform_ != NULL) platform_->::AFP_main_frame::platform_info::Clear();
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_platform_service()) {
      if (platform_service_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_service_->clear();
      }
    }
    if (has_hit_result()) {
      if (hit_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hit_result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.platform_info platform = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 2;
      case 2: {
        if (tag == 18) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platform_service;
        break;
      }

      // optional bytes platform_service = 5;
      case 5: {
        if (tag == 42) {
         parse_platform_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_service()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hit_result;
        break;
      }

      // optional bytes hit_result = 6;
      case 6: {
        if (tag == 50) {
         parse_hit_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hit_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_user_info)
  return false;
#undef DO_
}

void hit_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_user_info)
  // optional .AFP_main_frame.platform_info platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platform(), output);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->real_name(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile_phone(), output);
  }

  // optional bytes platform_service = 5;
  if (has_platform_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->platform_service(), output);
  }

  // optional bytes hit_result = 6;
  if (has_hit_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->hit_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_user_info)
}

::google::protobuf::uint8* hit_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_user_info)
  // optional .AFP_main_frame.platform_info platform = 1;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platform(), target);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->real_name(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile_phone(), target);
  }

  // optional bytes platform_service = 5;
  if (has_platform_service()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->platform_service(), target);
  }

  // optional bytes hit_result = 6;
  if (has_hit_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->hit_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_user_info)
  return target;
}

int hit_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.platform_info platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platform());
    }

    // optional bytes real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes mobile_phone = 4;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes platform_service = 5;
    if (has_platform_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_service());
    }

    // optional bytes hit_result = 6;
    if (has_hit_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hit_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_user_info::MergeFrom(const hit_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      mutable_platform()->::AFP_main_frame::platform_info::MergeFrom(from.platform());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_platform_service()) {
      set_platform_service(from.platform_service());
    }
    if (from.has_hit_result()) {
      set_hit_result(from.hit_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_user_info::CopyFrom(const hit_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_user_info::IsInitialized() const {

  return true;
}

void hit_user_info::Swap(hit_user_info* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(real_name_, other->real_name_);
    std::swap(id_card_, other->id_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(platform_service_, other->platform_service_);
    std::swap(hit_result_, other->hit_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_user_info_descriptor_;
  metadata.reflection = hit_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_user_analyze_info::kPropertyValFieldNumber;
const int hit_user_analyze_info::kTotalNumberFieldNumber;
const int hit_user_analyze_info::kPercentFieldNumber;
#endif  // !_MSC_VER

hit_user_analyze_info::hit_user_analyze_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_user_analyze_info)
}

void hit_user_analyze_info::InitAsDefaultInstance() {
}

hit_user_analyze_info::hit_user_analyze_info(const hit_user_analyze_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_user_analyze_info)
}

void hit_user_analyze_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  property_val_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_user_analyze_info::~hit_user_analyze_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_user_analyze_info)
  SharedDtor();
}

void hit_user_analyze_info::SharedDtor() {
  if (property_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_val_;
  }
  if (this != default_instance_) {
  }
}

void hit_user_analyze_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_user_analyze_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_user_analyze_info_descriptor_;
}

const hit_user_analyze_info& hit_user_analyze_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_user_analyze_info* hit_user_analyze_info::default_instance_ = NULL;

hit_user_analyze_info* hit_user_analyze_info::New() const {
  return new hit_user_analyze_info;
}

void hit_user_analyze_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hit_user_analyze_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(total_number_, percent_);
    if (has_property_val()) {
      if (property_val_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        property_val_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_user_analyze_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_user_analyze_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes property_val = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_percent;
        break;
      }

      // optional float percent = 3;
      case 3: {
        if (tag == 29) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_user_analyze_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_user_analyze_info)
  return false;
#undef DO_
}

void hit_user_analyze_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_user_analyze_info)
  // optional bytes property_val = 1;
  if (has_property_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_val(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional float percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_user_analyze_info)
}

::google::protobuf::uint8* hit_user_analyze_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_user_analyze_info)
  // optional bytes property_val = 1;
  if (has_property_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_val(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional float percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_user_analyze_info)
  return target;
}

int hit_user_analyze_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes property_val = 1;
    if (has_property_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_val());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional float percent = 3;
    if (has_percent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_user_analyze_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_user_analyze_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_user_analyze_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_user_analyze_info::MergeFrom(const hit_user_analyze_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_val()) {
      set_property_val(from.property_val());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_user_analyze_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_user_analyze_info::CopyFrom(const hit_user_analyze_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_user_analyze_info::IsInitialized() const {

  return true;
}

void hit_user_analyze_info::Swap(hit_user_analyze_info* other) {
  if (other != this) {
    std::swap(property_val_, other->property_val_);
    std::swap(total_number_, other->total_number_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_user_analyze_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_user_analyze_info_descriptor_;
  metadata.reflection = hit_user_analyze_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_rule_analyze_info::kRuleFieldNumber;
const int hit_rule_analyze_info::kThirdServiceNameFieldNumber;
const int hit_rule_analyze_info::kTotalNumberFieldNumber;
const int hit_rule_analyze_info::kPercentFieldNumber;
#endif  // !_MSC_VER

hit_rule_analyze_info::hit_rule_analyze_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_rule_analyze_info)
}

void hit_rule_analyze_info::InitAsDefaultInstance() {
}

hit_rule_analyze_info::hit_rule_analyze_info(const hit_rule_analyze_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_rule_analyze_info)
}

void hit_rule_analyze_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  third_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_rule_analyze_info::~hit_rule_analyze_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_rule_analyze_info)
  SharedDtor();
}

void hit_rule_analyze_info::SharedDtor() {
  if (rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rule_;
  }
  if (third_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete third_service_name_;
  }
  if (this != default_instance_) {
  }
}

void hit_rule_analyze_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_rule_analyze_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_rule_analyze_info_descriptor_;
}

const hit_rule_analyze_info& hit_rule_analyze_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_rule_analyze_info* hit_rule_analyze_info::default_instance_ = NULL;

hit_rule_analyze_info* hit_rule_analyze_info::New() const {
  return new hit_rule_analyze_info;
}

void hit_rule_analyze_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hit_rule_analyze_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(total_number_, percent_);
    if (has_rule()) {
      if (rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rule_->clear();
      }
    }
    if (has_third_service_name()) {
      if (third_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        third_service_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_rule_analyze_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_rule_analyze_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rule = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_third_service_name;
        break;
      }

      // optional bytes third_service_name = 2;
      case 2: {
        if (tag == 18) {
         parse_third_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_third_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 3;
      case 3: {
        if (tag == 24) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_percent;
        break;
      }

      // optional float percent = 4;
      case 4: {
        if (tag == 37) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_rule_analyze_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_rule_analyze_info)
  return false;
#undef DO_
}

void hit_rule_analyze_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_rule_analyze_info)
  // optional bytes rule = 1;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rule(), output);
  }

  // optional bytes third_service_name = 2;
  if (has_third_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->third_service_name(), output);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_number(), output);
  }

  // optional float percent = 4;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_rule_analyze_info)
}

::google::protobuf::uint8* hit_rule_analyze_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_rule_analyze_info)
  // optional bytes rule = 1;
  if (has_rule()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rule(), target);
  }

  // optional bytes third_service_name = 2;
  if (has_third_service_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->third_service_name(), target);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_number(), target);
  }

  // optional float percent = 4;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_rule_analyze_info)
  return target;
}

int hit_rule_analyze_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes rule = 1;
    if (has_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rule());
    }

    // optional bytes third_service_name = 2;
    if (has_third_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->third_service_name());
    }

    // optional int32 total_number = 3;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional float percent = 4;
    if (has_percent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_rule_analyze_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_rule_analyze_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_rule_analyze_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_rule_analyze_info::MergeFrom(const hit_rule_analyze_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rule()) {
      set_rule(from.rule());
    }
    if (from.has_third_service_name()) {
      set_third_service_name(from.third_service_name());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_rule_analyze_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_rule_analyze_info::CopyFrom(const hit_rule_analyze_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_rule_analyze_info::IsInitialized() const {

  return true;
}

void hit_rule_analyze_info::Swap(hit_rule_analyze_info* other) {
  if (other != this) {
    std::swap(rule_, other->rule_);
    std::swap(third_service_name_, other->third_service_name_);
    std::swap(total_number_, other->total_number_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_rule_analyze_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_rule_analyze_info_descriptor_;
  metadata.reflection = hit_rule_analyze_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_detail_info::kUserInfoFieldNumber;
const int hit_detail_info::kPlatformFieldNumber;
const int hit_detail_info::kHitRuleFieldNumber;
#endif  // !_MSC_VER

hit_detail_info::hit_detail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_detail_info)
}

void hit_detail_info::InitAsDefaultInstance() {
  user_info_ = const_cast< ::common::user_info*>(&::common::user_info::default_instance());
  platform_ = const_cast< ::AFP_main_frame::platform_info*>(&::AFP_main_frame::platform_info::default_instance());
}

hit_detail_info::hit_detail_info(const hit_detail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_detail_info)
}

void hit_detail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_info_ = NULL;
  platform_ = NULL;
  hit_rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_detail_info::~hit_detail_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_detail_info)
  SharedDtor();
}

void hit_detail_info::SharedDtor() {
  if (hit_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hit_rule_;
  }
  if (this != default_instance_) {
    delete user_info_;
    delete platform_;
  }
}

void hit_detail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_detail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_detail_info_descriptor_;
}

const hit_detail_info& hit_detail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_detail_info* hit_detail_info::default_instance_ = NULL;

hit_detail_info* hit_detail_info::New() const {
  return new hit_detail_info;
}

void hit_detail_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_info::Clear();
    }
    if (has_platform()) {
      if (platform_ != NULL) platform_->::AFP_main_frame::platform_info::Clear();
    }
    if (has_hit_rule()) {
      if (hit_rule_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hit_rule_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_detail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_detail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_info user_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform;
        break;
      }

      // optional .AFP_main_frame.platform_info platform = 2;
      case 2: {
        if (tag == 18) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hit_rule;
        break;
      }

      // optional bytes hit_rule = 3;
      case 3: {
        if (tag == 26) {
         parse_hit_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hit_rule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_detail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_detail_info)
  return false;
#undef DO_
}

void hit_detail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_detail_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional .AFP_main_frame.platform_info platform = 2;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->platform(), output);
  }

  // optional bytes hit_rule = 3;
  if (has_hit_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hit_rule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_detail_info)
}

::google::protobuf::uint8* hit_detail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_detail_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional .AFP_main_frame.platform_info platform = 2;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->platform(), target);
  }

  // optional bytes hit_rule = 3;
  if (has_hit_rule()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hit_rule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_detail_info)
  return target;
}

int hit_detail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_info user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional .AFP_main_frame.platform_info platform = 2;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platform());
    }

    // optional bytes hit_rule = 3;
    if (has_hit_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hit_rule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_detail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_detail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_detail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_detail_info::MergeFrom(const hit_detail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_info::MergeFrom(from.user_info());
    }
    if (from.has_platform()) {
      mutable_platform()->::AFP_main_frame::platform_info::MergeFrom(from.platform());
    }
    if (from.has_hit_rule()) {
      set_hit_rule(from.hit_rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_detail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_detail_info::CopyFrom(const hit_detail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_detail_info::IsInitialized() const {

  return true;
}

void hit_detail_info::Swap(hit_detail_info* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(platform_, other->platform_);
    std::swap(hit_rule_, other->hit_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_detail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_detail_info_descriptor_;
  metadata.reflection = hit_detail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_data_sources_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_data_sources_ask::blacklist_data_sources_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_data_sources_ask)
}

void blacklist_data_sources_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_data_sources_ask::blacklist_data_sources_ask(const blacklist_data_sources_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_data_sources_ask)
}

void blacklist_data_sources_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_data_sources_ask::~blacklist_data_sources_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_data_sources_ask)
  SharedDtor();
}

void blacklist_data_sources_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_data_sources_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_data_sources_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_data_sources_ask_descriptor_;
}

const blacklist_data_sources_ask& blacklist_data_sources_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_data_sources_ask* blacklist_data_sources_ask::default_instance_ = NULL;

blacklist_data_sources_ask* blacklist_data_sources_ask::New() const {
  return new blacklist_data_sources_ask;
}

void blacklist_data_sources_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_data_sources_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_data_sources_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_data_sources_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_data_sources_ask)
  return false;
#undef DO_
}

void blacklist_data_sources_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_data_sources_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_data_sources_ask)
}

::google::protobuf::uint8* blacklist_data_sources_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_data_sources_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_data_sources_ask)
  return target;
}

int blacklist_data_sources_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_data_sources_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_data_sources_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_data_sources_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_data_sources_ask::MergeFrom(const blacklist_data_sources_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_data_sources_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_data_sources_ask::CopyFrom(const blacklist_data_sources_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_data_sources_ask::IsInitialized() const {

  return true;
}

void blacklist_data_sources_ask::Swap(blacklist_data_sources_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_data_sources_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_data_sources_ask_descriptor_;
  metadata.reflection = blacklist_data_sources_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_data_sources_ans::kListFieldNumber;
const int blacklist_data_sources_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_data_sources_ans::blacklist_data_sources_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_data_sources_ans)
}

void blacklist_data_sources_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_data_sources_ans::blacklist_data_sources_ans(const blacklist_data_sources_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_data_sources_ans)
}

void blacklist_data_sources_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_data_sources_ans::~blacklist_data_sources_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_data_sources_ans)
  SharedDtor();
}

void blacklist_data_sources_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_data_sources_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_data_sources_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_data_sources_ans_descriptor_;
}

const blacklist_data_sources_ans& blacklist_data_sources_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_data_sources_ans* blacklist_data_sources_ans::default_instance_ = NULL;

blacklist_data_sources_ans* blacklist_data_sources_ans::New() const {
  return new blacklist_data_sources_ans;
}

void blacklist_data_sources_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_data_sources_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_data_sources_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.data_sources_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_data_sources_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_data_sources_ans)
  return false;
#undef DO_
}

void blacklist_data_sources_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_data_sources_ans)
  // repeated .AFP_main_frame.data_sources_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_data_sources_ans)
}

::google::protobuf::uint8* blacklist_data_sources_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_data_sources_ans)
  // repeated .AFP_main_frame.data_sources_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_data_sources_ans)
  return target;
}

int blacklist_data_sources_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.data_sources_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_data_sources_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_data_sources_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_data_sources_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_data_sources_ans::MergeFrom(const blacklist_data_sources_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_data_sources_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_data_sources_ans::CopyFrom(const blacklist_data_sources_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_data_sources_ans::IsInitialized() const {

  return true;
}

void blacklist_data_sources_ans::Swap(blacklist_data_sources_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_data_sources_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_data_sources_ans_descriptor_;
  metadata.reflection = blacklist_data_sources_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_query_ask::kRealNameFieldNumber;
const int blacklist_query_ask::kMobilePhoneFieldNumber;
const int blacklist_query_ask::kIdNoFieldNumber;
const int blacklist_query_ask::kMinOverdueCountFieldNumber;
const int blacklist_query_ask::kMaxOverdueCountFieldNumber;
const int blacklist_query_ask::kMinAlsoTotalFieldNumber;
const int blacklist_query_ask::kMaxAlsoTotalFieldNumber;
const int blacklist_query_ask::kRepaymentStateFieldNumber;
const int blacklist_query_ask::kMinOverdueDayFieldNumber;
const int blacklist_query_ask::kMaxOverdueDayFieldNumber;
const int blacklist_query_ask::kCheatSeverityFieldNumber;
const int blacklist_query_ask::kDataSourcesFieldNumber;
const int blacklist_query_ask::kPageNumFieldNumber;
const int blacklist_query_ask::kCurPageFieldNumber;
const int blacklist_query_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_query_ask::blacklist_query_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_query_ask)
}

void blacklist_query_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_query_ask::blacklist_query_ask(const blacklist_query_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_query_ask)
}

void blacklist_query_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_overdue_count_ = 0;
  max_overdue_count_ = 0;
  min_also_total_ = 0;
  max_also_total_ = 0;
  repayment_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_overdue_day_ = 0;
  max_overdue_day_ = 0;
  cheat_severity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_sources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_query_ask::~blacklist_query_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_query_ask)
  SharedDtor();
}

void blacklist_query_ask::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_state_;
  }
  if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cheat_severity_;
  }
  if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_sources_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_query_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_query_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_query_ask_descriptor_;
}

const blacklist_query_ask& blacklist_query_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_query_ask* blacklist_query_ask::default_instance_ = NULL;

blacklist_query_ask* blacklist_query_ask::New() const {
  return new blacklist_query_ask;
}

void blacklist_query_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<blacklist_query_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(min_overdue_count_, max_also_total_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_repayment_state()) {
      if (repayment_state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repayment_state_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(min_overdue_day_, max_overdue_day_);
    ZR_(page_num_, cur_page_);
    if (has_cheat_severity()) {
      if (cheat_severity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cheat_severity_->clear();
      }
    }
    if (has_data_sources()) {
      if (data_sources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_sources_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_query_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_query_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_min_overdue_count;
        break;
      }

      // optional int32 min_overdue_count = 6;
      case 6: {
        if (tag == 48) {
         parse_min_overdue_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_overdue_count_)));
          set_has_min_overdue_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_overdue_count;
        break;
      }

      // optional int32 max_overdue_count = 7;
      case 7: {
        if (tag == 56) {
         parse_max_overdue_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_overdue_count_)));
          set_has_max_overdue_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_min_also_total;
        break;
      }

      // optional float min_also_total = 8;
      case 8: {
        if (tag == 69) {
         parse_min_also_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_also_total_)));
          set_has_min_also_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_max_also_total;
        break;
      }

      // optional float max_also_total = 9;
      case 9: {
        if (tag == 77) {
         parse_max_also_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_also_total_)));
          set_has_max_also_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_repayment_state;
        break;
      }

      // optional bytes repayment_state = 10;
      case 10: {
        if (tag == 82) {
         parse_repayment_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repayment_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_min_overdue_day;
        break;
      }

      // optional int32 min_overdue_day = 11;
      case 11: {
        if (tag == 88) {
         parse_min_overdue_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_overdue_day_)));
          set_has_min_overdue_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_max_overdue_day;
        break;
      }

      // optional int32 max_overdue_day = 12;
      case 12: {
        if (tag == 96) {
         parse_max_overdue_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_overdue_day_)));
          set_has_max_overdue_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cheat_severity;
        break;
      }

      // optional bytes cheat_severity = 13;
      case 13: {
        if (tag == 106) {
         parse_cheat_severity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cheat_severity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_data_sources;
        break;
      }

      // optional bytes data_sources = 14;
      case 14: {
        if (tag == 114) {
         parse_data_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 15;
      case 15: {
        if (tag == 120) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 16;
      case 16: {
        if (tag == 128) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 17;
      case 17: {
        if (tag == 138) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_query_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_query_ask)
  return false;
#undef DO_
}

void blacklist_query_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_query_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // optional int32 min_overdue_count = 6;
  if (has_min_overdue_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->min_overdue_count(), output);
  }

  // optional int32 max_overdue_count = 7;
  if (has_max_overdue_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_overdue_count(), output);
  }

  // optional float min_also_total = 8;
  if (has_min_also_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_also_total(), output);
  }

  // optional float max_also_total = 9;
  if (has_max_also_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_also_total(), output);
  }

  // optional bytes repayment_state = 10;
  if (has_repayment_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->repayment_state(), output);
  }

  // optional int32 min_overdue_day = 11;
  if (has_min_overdue_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->min_overdue_day(), output);
  }

  // optional int32 max_overdue_day = 12;
  if (has_max_overdue_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_overdue_day(), output);
  }

  // optional bytes cheat_severity = 13;
  if (has_cheat_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->cheat_severity(), output);
  }

  // optional bytes data_sources = 14;
  if (has_data_sources()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->data_sources(), output);
  }

  // optional int32 page_num = 15;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->page_num(), output);
  }

  // optional int32 cur_page = 16;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 17;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_query_ask)
}

::google::protobuf::uint8* blacklist_query_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_query_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // optional int32 min_overdue_count = 6;
  if (has_min_overdue_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->min_overdue_count(), target);
  }

  // optional int32 max_overdue_count = 7;
  if (has_max_overdue_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_overdue_count(), target);
  }

  // optional float min_also_total = 8;
  if (has_min_also_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_also_total(), target);
  }

  // optional float max_also_total = 9;
  if (has_max_also_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->max_also_total(), target);
  }

  // optional bytes repayment_state = 10;
  if (has_repayment_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->repayment_state(), target);
  }

  // optional int32 min_overdue_day = 11;
  if (has_min_overdue_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->min_overdue_day(), target);
  }

  // optional int32 max_overdue_day = 12;
  if (has_max_overdue_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_overdue_day(), target);
  }

  // optional bytes cheat_severity = 13;
  if (has_cheat_severity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->cheat_severity(), target);
  }

  // optional bytes data_sources = 14;
  if (has_data_sources()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->data_sources(), target);
  }

  // optional int32 page_num = 15;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->page_num(), target);
  }

  // optional int32 cur_page = 16;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 17;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_query_ask)
  return target;
}

int blacklist_query_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional int32 min_overdue_count = 6;
    if (has_min_overdue_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_overdue_count());
    }

    // optional int32 max_overdue_count = 7;
    if (has_max_overdue_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_overdue_count());
    }

    // optional float min_also_total = 8;
    if (has_min_also_total()) {
      total_size += 1 + 4;
    }

    // optional float max_also_total = 9;
    if (has_max_also_total()) {
      total_size += 1 + 4;
    }

    // optional bytes repayment_state = 10;
    if (has_repayment_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repayment_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 min_overdue_day = 11;
    if (has_min_overdue_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_overdue_day());
    }

    // optional int32 max_overdue_day = 12;
    if (has_max_overdue_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_overdue_day());
    }

    // optional bytes cheat_severity = 13;
    if (has_cheat_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cheat_severity());
    }

    // optional bytes data_sources = 14;
    if (has_data_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_sources());
    }

    // optional int32 page_num = 15;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 16;
    if (has_cur_page()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 17;
    if (has_ask_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_query_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_query_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_query_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_query_ask::MergeFrom(const blacklist_query_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_min_overdue_count()) {
      set_min_overdue_count(from.min_overdue_count());
    }
    if (from.has_max_overdue_count()) {
      set_max_overdue_count(from.max_overdue_count());
    }
    if (from.has_min_also_total()) {
      set_min_also_total(from.min_also_total());
    }
    if (from.has_max_also_total()) {
      set_max_also_total(from.max_also_total());
    }
    if (from.has_repayment_state()) {
      set_repayment_state(from.repayment_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_overdue_day()) {
      set_min_overdue_day(from.min_overdue_day());
    }
    if (from.has_max_overdue_day()) {
      set_max_overdue_day(from.max_overdue_day());
    }
    if (from.has_cheat_severity()) {
      set_cheat_severity(from.cheat_severity());
    }
    if (from.has_data_sources()) {
      set_data_sources(from.data_sources());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_query_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_query_ask::CopyFrom(const blacklist_query_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_query_ask::IsInitialized() const {

  return true;
}

void blacklist_query_ask::Swap(blacklist_query_ask* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(min_overdue_count_, other->min_overdue_count_);
    std::swap(max_overdue_count_, other->max_overdue_count_);
    std::swap(min_also_total_, other->min_also_total_);
    std::swap(max_also_total_, other->max_also_total_);
    std::swap(repayment_state_, other->repayment_state_);
    std::swap(min_overdue_day_, other->min_overdue_day_);
    std::swap(max_overdue_day_, other->max_overdue_day_);
    std::swap(cheat_severity_, other->cheat_severity_);
    std::swap(data_sources_, other->data_sources_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_query_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_query_ask_descriptor_;
  metadata.reflection = blacklist_query_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_query_ans::kListFieldNumber;
const int blacklist_query_ans::kTotalNumberFieldNumber;
const int blacklist_query_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_query_ans::blacklist_query_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_query_ans)
}

void blacklist_query_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_query_ans::blacklist_query_ans(const blacklist_query_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_query_ans)
}

void blacklist_query_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_query_ans::~blacklist_query_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_query_ans)
  SharedDtor();
}

void blacklist_query_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_query_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_query_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_query_ans_descriptor_;
}

const blacklist_query_ans& blacklist_query_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_query_ans* blacklist_query_ans::default_instance_ = NULL;

blacklist_query_ans* blacklist_query_ans::New() const {
  return new blacklist_query_ans;
}

void blacklist_query_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_query_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_query_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.blacklist_user_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_query_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_query_ans)
  return false;
#undef DO_
}

void blacklist_query_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_query_ans)
  // repeated .AFP_main_frame.blacklist_user_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_query_ans)
}

::google::protobuf::uint8* blacklist_query_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_query_ans)
  // repeated .AFP_main_frame.blacklist_user_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_query_ans)
  return target;
}

int blacklist_query_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.blacklist_user_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_query_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_query_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_query_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_query_ans::MergeFrom(const blacklist_query_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_query_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_query_ans::CopyFrom(const blacklist_query_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_query_ans::IsInitialized() const {

  return true;
}

void blacklist_query_ans::Swap(blacklist_query_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_query_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_query_ans_descriptor_;
  metadata.reflection = blacklist_query_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_detail_ask::kUserIdFieldNumber;
const int blacklist_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_detail_ask::blacklist_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_detail_ask)
}

void blacklist_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_detail_ask::blacklist_detail_ask(const blacklist_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_detail_ask)
}

void blacklist_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_detail_ask::~blacklist_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_detail_ask)
  SharedDtor();
}

void blacklist_detail_ask::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_detail_ask_descriptor_;
}

const blacklist_detail_ask& blacklist_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_detail_ask* blacklist_detail_ask::default_instance_ = NULL;

blacklist_detail_ask* blacklist_detail_ask::New() const {
  return new blacklist_detail_ask;
}

void blacklist_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_detail_ask)
  return false;
#undef DO_
}

void blacklist_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_detail_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_detail_ask)
}

::google::protobuf::uint8* blacklist_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_detail_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_detail_ask)
  return target;
}

int blacklist_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_detail_ask::MergeFrom(const blacklist_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_detail_ask::CopyFrom(const blacklist_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_detail_ask::IsInitialized() const {

  return true;
}

void blacklist_detail_ask::Swap(blacklist_detail_ask* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_detail_ask_descriptor_;
  metadata.reflection = blacklist_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_detail_ans::kBlacklistFieldNumber;
const int blacklist_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_detail_ans::blacklist_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_detail_ans)
}

void blacklist_detail_ans::InitAsDefaultInstance() {
  blacklist_ = const_cast< ::AFP_main_frame::blacklist_user_info*>(&::AFP_main_frame::blacklist_user_info::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_detail_ans::blacklist_detail_ans(const blacklist_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_detail_ans)
}

void blacklist_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  blacklist_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_detail_ans::~blacklist_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_detail_ans)
  SharedDtor();
}

void blacklist_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete blacklist_;
    delete error_;
  }
}

void blacklist_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_detail_ans_descriptor_;
}

const blacklist_detail_ans& blacklist_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_detail_ans* blacklist_detail_ans::default_instance_ = NULL;

blacklist_detail_ans* blacklist_detail_ans::New() const {
  return new blacklist_detail_ans;
}

void blacklist_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_blacklist()) {
      if (blacklist_ != NULL) blacklist_->::AFP_main_frame::blacklist_user_info::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_detail_ans)
  return false;
#undef DO_
}

void blacklist_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_detail_ans)
  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  if (has_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blacklist(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_detail_ans)
}

::google::protobuf::uint8* blacklist_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_detail_ans)
  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  if (has_blacklist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blacklist(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_detail_ans)
  return target;
}

int blacklist_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
    if (has_blacklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklist());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_detail_ans::MergeFrom(const blacklist_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blacklist()) {
      mutable_blacklist()->::AFP_main_frame::blacklist_user_info::MergeFrom(from.blacklist());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_detail_ans::CopyFrom(const blacklist_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_detail_ans::IsInitialized() const {

  return true;
}

void blacklist_detail_ans::Swap(blacklist_detail_ans* other) {
  if (other != this) {
    std::swap(blacklist_, other->blacklist_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_detail_ans_descriptor_;
  metadata.reflection = blacklist_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_save_ask::kBlacklistFieldNumber;
const int blacklist_save_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_save_ask::blacklist_save_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_save_ask)
}

void blacklist_save_ask::InitAsDefaultInstance() {
  blacklist_ = const_cast< ::AFP_main_frame::blacklist_user_info*>(&::AFP_main_frame::blacklist_user_info::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_save_ask::blacklist_save_ask(const blacklist_save_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_save_ask)
}

void blacklist_save_ask::SharedCtor() {
  _cached_size_ = 0;
  blacklist_ = NULL;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_save_ask::~blacklist_save_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_save_ask)
  SharedDtor();
}

void blacklist_save_ask::SharedDtor() {
  if (this != default_instance_) {
    delete blacklist_;
    delete ask_header_;
  }
}

void blacklist_save_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_save_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_save_ask_descriptor_;
}

const blacklist_save_ask& blacklist_save_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_save_ask* blacklist_save_ask::default_instance_ = NULL;

blacklist_save_ask* blacklist_save_ask::New() const {
  return new blacklist_save_ask;
}

void blacklist_save_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_blacklist()) {
      if (blacklist_ != NULL) blacklist_->::AFP_main_frame::blacklist_user_info::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_save_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_save_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blacklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_save_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_save_ask)
  return false;
#undef DO_
}

void blacklist_save_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_save_ask)
  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  if (has_blacklist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blacklist(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_save_ask)
}

::google::protobuf::uint8* blacklist_save_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_save_ask)
  // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
  if (has_blacklist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blacklist(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_save_ask)
  return target;
}

int blacklist_save_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.blacklist_user_info blacklist = 1;
    if (has_blacklist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklist());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_save_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_save_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_save_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_save_ask::MergeFrom(const blacklist_save_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blacklist()) {
      mutable_blacklist()->::AFP_main_frame::blacklist_user_info::MergeFrom(from.blacklist());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_save_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_save_ask::CopyFrom(const blacklist_save_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_save_ask::IsInitialized() const {

  return true;
}

void blacklist_save_ask::Swap(blacklist_save_ask* other) {
  if (other != this) {
    std::swap(blacklist_, other->blacklist_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_save_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_save_ask_descriptor_;
  metadata.reflection = blacklist_save_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_save_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_save_ans::blacklist_save_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_save_ans)
}

void blacklist_save_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_save_ans::blacklist_save_ans(const blacklist_save_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_save_ans)
}

void blacklist_save_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_save_ans::~blacklist_save_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_save_ans)
  SharedDtor();
}

void blacklist_save_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_save_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_save_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_save_ans_descriptor_;
}

const blacklist_save_ans& blacklist_save_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_save_ans* blacklist_save_ans::default_instance_ = NULL;

blacklist_save_ans* blacklist_save_ans::New() const {
  return new blacklist_save_ans;
}

void blacklist_save_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_save_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_save_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_save_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_save_ans)
  return false;
#undef DO_
}

void blacklist_save_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_save_ans)
}

::google::protobuf::uint8* blacklist_save_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_save_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_save_ans)
  return target;
}

int blacklist_save_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_save_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_save_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_save_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_save_ans::MergeFrom(const blacklist_save_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_save_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_save_ans::CopyFrom(const blacklist_save_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_save_ans::IsInitialized() const {

  return true;
}

void blacklist_save_ans::Swap(blacklist_save_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_save_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_save_ans_descriptor_;
  metadata.reflection = blacklist_save_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_remove_ask::kUserIdFieldNumber;
const int blacklist_remove_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

blacklist_remove_ask::blacklist_remove_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_remove_ask)
}

void blacklist_remove_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

blacklist_remove_ask::blacklist_remove_ask(const blacklist_remove_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_remove_ask)
}

void blacklist_remove_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_remove_ask::~blacklist_remove_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_remove_ask)
  SharedDtor();
}

void blacklist_remove_ask::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void blacklist_remove_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_remove_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_remove_ask_descriptor_;
}

const blacklist_remove_ask& blacklist_remove_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_remove_ask* blacklist_remove_ask::default_instance_ = NULL;

blacklist_remove_ask* blacklist_remove_ask::New() const {
  return new blacklist_remove_ask;
}

void blacklist_remove_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_remove_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_remove_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_remove_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_remove_ask)
  return false;
#undef DO_
}

void blacklist_remove_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_remove_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_remove_ask)
}

::google::protobuf::uint8* blacklist_remove_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_remove_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_remove_ask)
  return target;
}

int blacklist_remove_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_remove_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_remove_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_remove_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_remove_ask::MergeFrom(const blacklist_remove_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_remove_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_remove_ask::CopyFrom(const blacklist_remove_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_remove_ask::IsInitialized() const {

  return true;
}

void blacklist_remove_ask::Swap(blacklist_remove_ask* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_remove_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_remove_ask_descriptor_;
  metadata.reflection = blacklist_remove_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int blacklist_remove_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

blacklist_remove_ans::blacklist_remove_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.blacklist_remove_ans)
}

void blacklist_remove_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

blacklist_remove_ans::blacklist_remove_ans(const blacklist_remove_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.blacklist_remove_ans)
}

void blacklist_remove_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

blacklist_remove_ans::~blacklist_remove_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.blacklist_remove_ans)
  SharedDtor();
}

void blacklist_remove_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void blacklist_remove_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* blacklist_remove_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return blacklist_remove_ans_descriptor_;
}

const blacklist_remove_ans& blacklist_remove_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

blacklist_remove_ans* blacklist_remove_ans::default_instance_ = NULL;

blacklist_remove_ans* blacklist_remove_ans::New() const {
  return new blacklist_remove_ans;
}

void blacklist_remove_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool blacklist_remove_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.blacklist_remove_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.blacklist_remove_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.blacklist_remove_ans)
  return false;
#undef DO_
}

void blacklist_remove_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.blacklist_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.blacklist_remove_ans)
}

::google::protobuf::uint8* blacklist_remove_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.blacklist_remove_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.blacklist_remove_ans)
  return target;
}

int blacklist_remove_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void blacklist_remove_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const blacklist_remove_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const blacklist_remove_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void blacklist_remove_ans::MergeFrom(const blacklist_remove_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void blacklist_remove_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void blacklist_remove_ans::CopyFrom(const blacklist_remove_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blacklist_remove_ans::IsInitialized() const {

  return true;
}

void blacklist_remove_ans::Swap(blacklist_remove_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata blacklist_remove_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = blacklist_remove_ans_descriptor_;
  metadata.reflection = blacklist_remove_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_trace_info::kRealNameFieldNumber;
const int auto_trace_info::kMobilePhoneFieldNumber;
const int auto_trace_info::kIdNoFieldNumber;
const int auto_trace_info::kTraceDateFieldNumber;
const int auto_trace_info::kOwnBlacklistHitFieldNumber;
const int auto_trace_info::kQhzhBlacklistHitFieldNumber;
const int auto_trace_info::kTdBlacklistHitFieldNumber;
const int auto_trace_info::kAreaFieldNumber;
#endif  // !_MSC_VER

auto_trace_info::auto_trace_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.auto_trace_info)
}

void auto_trace_info::InitAsDefaultInstance() {
}

auto_trace_info::auto_trace_info(const auto_trace_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.auto_trace_info)
}

void auto_trace_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  own_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qhzh_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  td_blacklist_hit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_trace_info::~auto_trace_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.auto_trace_info)
  SharedDtor();
}

void auto_trace_info::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (trace_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_date_;
  }
  if (own_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete own_blacklist_hit_;
  }
  if (qhzh_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qhzh_blacklist_hit_;
  }
  if (td_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete td_blacklist_hit_;
  }
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (this != default_instance_) {
  }
}

void auto_trace_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_trace_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_trace_info_descriptor_;
}

const auto_trace_info& auto_trace_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

auto_trace_info* auto_trace_info::default_instance_ = NULL;

auto_trace_info* auto_trace_info::New() const {
  return new auto_trace_info;
}

void auto_trace_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_trace_date()) {
      if (trace_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_date_->clear();
      }
    }
    if (has_own_blacklist_hit()) {
      if (own_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        own_blacklist_hit_->clear();
      }
    }
    if (has_qhzh_blacklist_hit()) {
      if (qhzh_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qhzh_blacklist_hit_->clear();
      }
    }
    if (has_td_blacklist_hit()) {
      if (td_blacklist_hit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        td_blacklist_hit_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        area_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_trace_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.auto_trace_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trace_date;
        break;
      }

      // optional bytes trace_date = 4;
      case 4: {
        if (tag == 34) {
         parse_trace_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trace_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_own_blacklist_hit;
        break;
      }

      // optional bytes own_blacklist_hit = 5;
      case 5: {
        if (tag == 42) {
         parse_own_blacklist_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_own_blacklist_hit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_qhzh_blacklist_hit;
        break;
      }

      // optional bytes qhzh_blacklist_hit = 6;
      case 6: {
        if (tag == 50) {
         parse_qhzh_blacklist_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qhzh_blacklist_hit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_td_blacklist_hit;
        break;
      }

      // optional bytes td_blacklist_hit = 7;
      case 7: {
        if (tag == 58) {
         parse_td_blacklist_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_td_blacklist_hit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_area;
        break;
      }

      // optional bytes area = 8;
      case 8: {
        if (tag == 66) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.auto_trace_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.auto_trace_info)
  return false;
#undef DO_
}

void auto_trace_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.auto_trace_info)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // optional bytes trace_date = 4;
  if (has_trace_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->trace_date(), output);
  }

  // optional bytes own_blacklist_hit = 5;
  if (has_own_blacklist_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->own_blacklist_hit(), output);
  }

  // optional bytes qhzh_blacklist_hit = 6;
  if (has_qhzh_blacklist_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->qhzh_blacklist_hit(), output);
  }

  // optional bytes td_blacklist_hit = 7;
  if (has_td_blacklist_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->td_blacklist_hit(), output);
  }

  // optional bytes area = 8;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.auto_trace_info)
}

::google::protobuf::uint8* auto_trace_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.auto_trace_info)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // optional bytes trace_date = 4;
  if (has_trace_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->trace_date(), target);
  }

  // optional bytes own_blacklist_hit = 5;
  if (has_own_blacklist_hit()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->own_blacklist_hit(), target);
  }

  // optional bytes qhzh_blacklist_hit = 6;
  if (has_qhzh_blacklist_hit()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->qhzh_blacklist_hit(), target);
  }

  // optional bytes td_blacklist_hit = 7;
  if (has_td_blacklist_hit()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->td_blacklist_hit(), target);
  }

  // optional bytes area = 8;
  if (has_area()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.auto_trace_info)
  return target;
}

int auto_trace_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes trace_date = 4;
    if (has_trace_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trace_date());
    }

    // optional bytes own_blacklist_hit = 5;
    if (has_own_blacklist_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->own_blacklist_hit());
    }

    // optional bytes qhzh_blacklist_hit = 6;
    if (has_qhzh_blacklist_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qhzh_blacklist_hit());
    }

    // optional bytes td_blacklist_hit = 7;
    if (has_td_blacklist_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->td_blacklist_hit());
    }

    // optional bytes area = 8;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_trace_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_trace_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_trace_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_trace_info::MergeFrom(const auto_trace_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_trace_date()) {
      set_trace_date(from.trace_date());
    }
    if (from.has_own_blacklist_hit()) {
      set_own_blacklist_hit(from.own_blacklist_hit());
    }
    if (from.has_qhzh_blacklist_hit()) {
      set_qhzh_blacklist_hit(from.qhzh_blacklist_hit());
    }
    if (from.has_td_blacklist_hit()) {
      set_td_blacklist_hit(from.td_blacklist_hit());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_trace_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_trace_info::CopyFrom(const auto_trace_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_trace_info::IsInitialized() const {

  return true;
}

void auto_trace_info::Swap(auto_trace_info* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(trace_date_, other->trace_date_);
    std::swap(own_blacklist_hit_, other->own_blacklist_hit_);
    std::swap(qhzh_blacklist_hit_, other->qhzh_blacklist_hit_);
    std::swap(td_blacklist_hit_, other->td_blacklist_hit_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_trace_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_trace_info_descriptor_;
  metadata.reflection = auto_trace_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_trace_ask::kTraceInfoFieldNumber;
const int auto_trace_ask::kPageNumFieldNumber;
const int auto_trace_ask::kCurPageFieldNumber;
const int auto_trace_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

auto_trace_ask::auto_trace_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.auto_trace_ask)
}

void auto_trace_ask::InitAsDefaultInstance() {
  trace_info_ = const_cast< ::AFP_main_frame::auto_trace_info*>(&::AFP_main_frame::auto_trace_info::default_instance());
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

auto_trace_ask::auto_trace_ask(const auto_trace_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.auto_trace_ask)
}

void auto_trace_ask::SharedCtor() {
  _cached_size_ = 0;
  trace_info_ = NULL;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_trace_ask::~auto_trace_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.auto_trace_ask)
  SharedDtor();
}

void auto_trace_ask::SharedDtor() {
  if (this != default_instance_) {
    delete trace_info_;
    delete ask_header_;
  }
}

void auto_trace_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_trace_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_trace_ask_descriptor_;
}

const auto_trace_ask& auto_trace_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

auto_trace_ask* auto_trace_ask::default_instance_ = NULL;

auto_trace_ask* auto_trace_ask::New() const {
  return new auto_trace_ask;
}

void auto_trace_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<auto_trace_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(page_num_, cur_page_);
    if (has_trace_info()) {
      if (trace_info_ != NULL) trace_info_->::AFP_main_frame::auto_trace_info::Clear();
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_trace_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.auto_trace_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.auto_trace_info trace_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 2;
      case 2: {
        if (tag == 16) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.auto_trace_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.auto_trace_ask)
  return false;
#undef DO_
}

void auto_trace_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.auto_trace_ask)
  // optional .AFP_main_frame.auto_trace_info trace_info = 1;
  if (has_trace_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trace_info(), output);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_num(), output);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.auto_trace_ask)
}

::google::protobuf::uint8* auto_trace_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.auto_trace_ask)
  // optional .AFP_main_frame.auto_trace_info trace_info = 1;
  if (has_trace_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trace_info(), target);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_num(), target);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.auto_trace_ask)
  return target;
}

int auto_trace_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.auto_trace_info trace_info = 1;
    if (has_trace_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace_info());
    }

    // optional int32 page_num = 2;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 3;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_trace_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_trace_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_trace_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_trace_ask::MergeFrom(const auto_trace_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trace_info()) {
      mutable_trace_info()->::AFP_main_frame::auto_trace_info::MergeFrom(from.trace_info());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_trace_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_trace_ask::CopyFrom(const auto_trace_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_trace_ask::IsInitialized() const {

  return true;
}

void auto_trace_ask::Swap(auto_trace_ask* other) {
  if (other != this) {
    std::swap(trace_info_, other->trace_info_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_trace_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_trace_ask_descriptor_;
  metadata.reflection = auto_trace_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_trace_ans::kListFieldNumber;
const int auto_trace_ans::kTotalNumberFieldNumber;
const int auto_trace_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

auto_trace_ans::auto_trace_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.auto_trace_ans)
}

void auto_trace_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

auto_trace_ans::auto_trace_ans(const auto_trace_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.auto_trace_ans)
}

void auto_trace_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_trace_ans::~auto_trace_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.auto_trace_ans)
  SharedDtor();
}

void auto_trace_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void auto_trace_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_trace_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_trace_ans_descriptor_;
}

const auto_trace_ans& auto_trace_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

auto_trace_ans* auto_trace_ans::default_instance_ = NULL;

auto_trace_ans* auto_trace_ans::New() const {
  return new auto_trace_ans;
}

void auto_trace_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_trace_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.auto_trace_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.auto_trace_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.auto_trace_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.auto_trace_ans)
  return false;
#undef DO_
}

void auto_trace_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.auto_trace_ans)
  // repeated .AFP_main_frame.auto_trace_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.auto_trace_ans)
}

::google::protobuf::uint8* auto_trace_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.auto_trace_ans)
  // repeated .AFP_main_frame.auto_trace_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.auto_trace_ans)
  return target;
}

int auto_trace_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.auto_trace_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_trace_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_trace_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_trace_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_trace_ans::MergeFrom(const auto_trace_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_trace_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_trace_ans::CopyFrom(const auto_trace_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_trace_ans::IsInitialized() const {

  return true;
}

void auto_trace_ans::Swap(auto_trace_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_trace_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_trace_ans_descriptor_;
  metadata.reflection = auto_trace_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_score_interval_info::kScoreIntervalFieldNumber;
const int credit_score_interval_info::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

credit_score_interval_info::credit_score_interval_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_score_interval_info)
}

void credit_score_interval_info::InitAsDefaultInstance() {
}

credit_score_interval_info::credit_score_interval_info(const credit_score_interval_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_score_interval_info)
}

void credit_score_interval_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_score_interval_info::~credit_score_interval_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_score_interval_info)
  SharedDtor();
}

void credit_score_interval_info::SharedDtor() {
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete score_interval_;
  }
  if (this != default_instance_) {
  }
}

void credit_score_interval_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_score_interval_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_score_interval_info_descriptor_;
}

const credit_score_interval_info& credit_score_interval_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_score_interval_info* credit_score_interval_info::default_instance_ = NULL;

credit_score_interval_info* credit_score_interval_info::New() const {
  return new credit_score_interval_info;
}

void credit_score_interval_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_score_interval()) {
      if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        score_interval_->clear();
      }
    }
    total_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_score_interval_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_score_interval_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes score_interval = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_score_interval_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_score_interval_info)
  return false;
#undef DO_
}

void credit_score_interval_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_score_interval_info)
  // optional bytes score_interval = 1;
  if (has_score_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->score_interval(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_score_interval_info)
}

::google::protobuf::uint8* credit_score_interval_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_score_interval_info)
  // optional bytes score_interval = 1;
  if (has_score_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->score_interval(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_score_interval_info)
  return target;
}

int credit_score_interval_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes score_interval = 1;
    if (has_score_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->score_interval());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_score_interval_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_score_interval_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_score_interval_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_score_interval_info::MergeFrom(const credit_score_interval_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_interval()) {
      set_score_interval(from.score_interval());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_score_interval_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_score_interval_info::CopyFrom(const credit_score_interval_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_score_interval_info::IsInitialized() const {

  return true;
}

void credit_score_interval_info::Swap(credit_score_interval_info* other) {
  if (other != this) {
    std::swap(score_interval_, other->score_interval_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_score_interval_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_score_interval_info_descriptor_;
  metadata.reflection = credit_score_interval_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_score_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_score_statistics_ask::credit_score_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_score_statistics_ask)
}

void credit_score_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_score_statistics_ask::credit_score_statistics_ask(const credit_score_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_score_statistics_ask)
}

void credit_score_statistics_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_score_statistics_ask::~credit_score_statistics_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_score_statistics_ask)
  SharedDtor();
}

void credit_score_statistics_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_score_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_score_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_score_statistics_ask_descriptor_;
}

const credit_score_statistics_ask& credit_score_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_score_statistics_ask* credit_score_statistics_ask::default_instance_ = NULL;

credit_score_statistics_ask* credit_score_statistics_ask::New() const {
  return new credit_score_statistics_ask;
}

void credit_score_statistics_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_score_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_score_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_score_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_score_statistics_ask)
  return false;
#undef DO_
}

void credit_score_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_score_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_score_statistics_ask)
}

::google::protobuf::uint8* credit_score_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_score_statistics_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_score_statistics_ask)
  return target;
}

int credit_score_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_score_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_score_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_score_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_score_statistics_ask::MergeFrom(const credit_score_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_score_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_score_statistics_ask::CopyFrom(const credit_score_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_score_statistics_ask::IsInitialized() const {

  return true;
}

void credit_score_statistics_ask::Swap(credit_score_statistics_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_score_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_score_statistics_ask_descriptor_;
  metadata.reflection = credit_score_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_score_statistics_ans::kListFieldNumber;
const int credit_score_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_score_statistics_ans::credit_score_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_score_statistics_ans)
}

void credit_score_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_score_statistics_ans::credit_score_statistics_ans(const credit_score_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_score_statistics_ans)
}

void credit_score_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_score_statistics_ans::~credit_score_statistics_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_score_statistics_ans)
  SharedDtor();
}

void credit_score_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_score_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_score_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_score_statistics_ans_descriptor_;
}

const credit_score_statistics_ans& credit_score_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_score_statistics_ans* credit_score_statistics_ans::default_instance_ = NULL;

credit_score_statistics_ans* credit_score_statistics_ans::New() const {
  return new credit_score_statistics_ans;
}

void credit_score_statistics_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_score_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_score_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.credit_score_interval_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_score_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_score_statistics_ans)
  return false;
#undef DO_
}

void credit_score_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_score_statistics_ans)
  // repeated .AFP_main_frame.credit_score_interval_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_score_statistics_ans)
}

::google::protobuf::uint8* credit_score_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_score_statistics_ans)
  // repeated .AFP_main_frame.credit_score_interval_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_score_statistics_ans)
  return target;
}

int credit_score_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.credit_score_interval_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_score_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_score_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_score_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_score_statistics_ans::MergeFrom(const credit_score_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_score_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_score_statistics_ans::CopyFrom(const credit_score_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_score_statistics_ans::IsInitialized() const {

  return true;
}

void credit_score_statistics_ans::Swap(credit_score_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_score_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_score_statistics_ans_descriptor_;
  metadata.reflection = credit_score_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_ask::kRealNameFieldNumber;
const int credit_ask::kMobilePhoneFieldNumber;
const int credit_ask::kIdNoFieldNumber;
const int credit_ask::kAreaFieldNumber;
const int credit_ask::kScoreIntervalFieldNumber;
const int credit_ask::kPageNumFieldNumber;
const int credit_ask::kCurPageFieldNumber;
const int credit_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_ask::credit_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_ask)
}

void credit_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_ask::credit_ask(const credit_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_ask)
}

void credit_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_interval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_ask::~credit_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_ask)
  SharedDtor();
}

void credit_ask::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete area_;
  }
  if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete score_interval_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_ask_descriptor_;
}

const credit_ask& credit_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_ask* credit_ask::default_instance_ = NULL;

credit_ask* credit_ask::New() const {
  return new credit_ask;
}

void credit_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<credit_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(page_num_, cur_page_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_area()) {
      if (area_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        area_->clear();
      }
    }
    if (has_score_interval()) {
      if (score_interval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        score_interval_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_area;
        break;
      }

      // optional bytes area = 4;
      case 4: {
        if (tag == 34) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_score_interval;
        break;
      }

      // optional bytes score_interval = 5;
      case 5: {
        if (tag == 42) {
         parse_score_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_score_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 6;
      case 6: {
        if (tag == 48) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 8;
      case 8: {
        if (tag == 66) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_ask)
  return false;
#undef DO_
}

void credit_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // optional bytes area = 4;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->area(), output);
  }

  // optional bytes score_interval = 5;
  if (has_score_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->score_interval(), output);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_num(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 8;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_ask)
}

::google::protobuf::uint8* credit_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // optional bytes area = 4;
  if (has_area()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->area(), target);
  }

  // optional bytes score_interval = 5;
  if (has_score_interval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->score_interval(), target);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_num(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 8;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_ask)
  return target;
}

int credit_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes area = 4;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->area());
    }

    // optional bytes score_interval = 5;
    if (has_score_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->score_interval());
    }

    // optional int32 page_num = 6;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 8;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_ask::MergeFrom(const credit_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_score_interval()) {
      set_score_interval(from.score_interval());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_ask::CopyFrom(const credit_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_ask::IsInitialized() const {

  return true;
}

void credit_ask::Swap(credit_ask* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(area_, other->area_);
    std::swap(score_interval_, other->score_interval_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_ask_descriptor_;
  metadata.reflection = credit_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_info::kUserInfoFieldNumber;
const int credit_info::kCreditScoreFieldNumber;
#endif  // !_MSC_VER

credit_info::credit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_info)
}

void credit_info::InitAsDefaultInstance() {
  user_info_ = const_cast< ::common::user_info*>(&::common::user_info::default_instance());
}

credit_info::credit_info(const credit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_info)
}

void credit_info::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  credit_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_info::~credit_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_info)
  SharedDtor();
}

void credit_info::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
  }
}

void credit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_info_descriptor_;
}

const credit_info& credit_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_info* credit_info::default_instance_ = NULL;

credit_info* credit_info::New() const {
  return new credit_info;
}

void credit_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::common::user_info::Clear();
    }
    credit_score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.user_info user_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credit_score;
        break;
      }

      // optional int32 credit_score = 2;
      case 2: {
        if (tag == 16) {
         parse_credit_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_score_)));
          set_has_credit_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_info)
  return false;
#undef DO_
}

void credit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  // optional int32 credit_score = 2;
  if (has_credit_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_info)
}

::google::protobuf::uint8* credit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_info)
  // optional .common.user_info user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  // optional int32 credit_score = 2;
  if (has_credit_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_info)
  return target;
}

int credit_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.user_info user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional int32 credit_score = 2;
    if (has_credit_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_info::MergeFrom(const credit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::common::user_info::MergeFrom(from.user_info());
    }
    if (from.has_credit_score()) {
      set_credit_score(from.credit_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_info::CopyFrom(const credit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_info::IsInitialized() const {

  return true;
}

void credit_info::Swap(credit_info* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(credit_score_, other->credit_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_info_descriptor_;
  metadata.reflection = credit_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_ans::kListFieldNumber;
const int credit_ans::kTotalNumberFieldNumber;
const int credit_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_ans::credit_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_ans)
}

void credit_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_ans::credit_ans(const credit_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_ans)
}

void credit_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_ans::~credit_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_ans)
  SharedDtor();
}

void credit_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_ans_descriptor_;
}

const credit_ans& credit_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_ans* credit_ans::default_instance_ = NULL;

credit_ans* credit_ans::New() const {
  return new credit_ans;
}

void credit_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.credit_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_ans)
  return false;
#undef DO_
}

void credit_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_ans)
  // repeated .AFP_main_frame.credit_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_ans)
}

::google::protobuf::uint8* credit_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_ans)
  // repeated .AFP_main_frame.credit_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_ans)
  return target;
}

int credit_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.credit_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_ans::MergeFrom(const credit_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_ans::CopyFrom(const credit_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_ans::IsInitialized() const {

  return true;
}

void credit_ans::Swap(credit_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_ans_descriptor_;
  metadata.reflection = credit_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_model_info::kModelNoFieldNumber;
const int verify_model_info::kModelNameFieldNumber;
const int verify_model_info::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

verify_model_info::verify_model_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_model_info)
}

void verify_model_info::InitAsDefaultInstance() {
}

verify_model_info::verify_model_info(const verify_model_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_model_info)
}

void verify_model_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_model_info::~verify_model_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_model_info)
  SharedDtor();
}

void verify_model_info::SharedDtor() {
  if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_no_;
  }
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void verify_model_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_model_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_model_info_descriptor_;
}

const verify_model_info& verify_model_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_model_info* verify_model_info::default_instance_ = NULL;

verify_model_info* verify_model_info::New() const {
  return new verify_model_info;
}

void verify_model_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_model_no()) {
      if (model_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_no_->clear();
      }
    }
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_name_->clear();
      }
    }
    total_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_model_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_model_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes model_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_name;
        break;
      }

      // optional bytes model_name = 2;
      case 2: {
        if (tag == 18) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 3;
      case 3: {
        if (tag == 24) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_model_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_model_info)
  return false;
#undef DO_
}

void verify_model_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_model_info)
  // optional bytes model_no = 1;
  if (has_model_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->model_no(), output);
  }

  // optional bytes model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->model_name(), output);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_model_info)
}

::google::protobuf::uint8* verify_model_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_model_info)
  // optional bytes model_no = 1;
  if (has_model_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->model_no(), target);
  }

  // optional bytes model_name = 2;
  if (has_model_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->model_name(), target);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_model_info)
  return target;
}

int verify_model_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes model_no = 1;
    if (has_model_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_no());
    }

    // optional bytes model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_name());
    }

    // optional int32 total_number = 3;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_model_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_model_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_model_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_model_info::MergeFrom(const verify_model_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_no()) {
      set_model_no(from.model_no());
    }
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_model_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_model_info::CopyFrom(const verify_model_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_model_info::IsInitialized() const {

  return true;
}

void verify_model_info::Swap(verify_model_info* other) {
  if (other != this) {
    std::swap(model_no_, other->model_no_);
    std::swap(model_name_, other->model_name_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_model_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_model_info_descriptor_;
  metadata.reflection = verify_model_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_detail_info::kModelNameFieldNumber;
const int verify_detail_info::kTotalNumberFieldNumber;
const int verify_detail_info::kPassNumberFieldNumber;
const int verify_detail_info::kPassPercentFieldNumber;
const int verify_detail_info::kNoPassNumberFieldNumber;
const int verify_detail_info::kNoPassPercentFieldNumber;
const int verify_detail_info::kHumanReviewNumberFieldNumber;
const int verify_detail_info::kHumanReviewPercentFieldNumber;
#endif  // !_MSC_VER

verify_detail_info::verify_detail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_detail_info)
}

void verify_detail_info::InitAsDefaultInstance() {
}

verify_detail_info::verify_detail_info(const verify_detail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_detail_info)
}

void verify_detail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_number_ = 0;
  pass_number_ = 0;
  pass_percent_ = 0;
  no_pass_number_ = 0;
  no_pass_percent_ = 0;
  human_review_number_ = 0;
  human_review_percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_detail_info::~verify_detail_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_detail_info)
  SharedDtor();
}

void verify_detail_info::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void verify_detail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_detail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_detail_info_descriptor_;
}

const verify_detail_info& verify_detail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_detail_info* verify_detail_info::default_instance_ = NULL;

verify_detail_info* verify_detail_info::New() const {
  return new verify_detail_info;
}

void verify_detail_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<verify_detail_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(total_number_, human_review_percent_);
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_detail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_detail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pass_number;
        break;
      }

      // optional int32 pass_number = 3;
      case 3: {
        if (tag == 24) {
         parse_pass_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_number_)));
          set_has_pass_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pass_percent;
        break;
      }

      // optional float pass_percent = 4;
      case 4: {
        if (tag == 37) {
         parse_pass_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pass_percent_)));
          set_has_pass_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_no_pass_number;
        break;
      }

      // optional int32 no_pass_number = 5;
      case 5: {
        if (tag == 40) {
         parse_no_pass_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_pass_number_)));
          set_has_no_pass_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_no_pass_percent;
        break;
      }

      // optional float no_pass_percent = 6;
      case 6: {
        if (tag == 53) {
         parse_no_pass_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &no_pass_percent_)));
          set_has_no_pass_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_human_review_number;
        break;
      }

      // optional int32 human_review_number = 7;
      case 7: {
        if (tag == 56) {
         parse_human_review_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &human_review_number_)));
          set_has_human_review_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_human_review_percent;
        break;
      }

      // optional float human_review_percent = 8;
      case 8: {
        if (tag == 69) {
         parse_human_review_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &human_review_percent_)));
          set_has_human_review_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_detail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_detail_info)
  return false;
#undef DO_
}

void verify_detail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_detail_info)
  // optional bytes model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->model_name(), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional int32 pass_number = 3;
  if (has_pass_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_number(), output);
  }

  // optional float pass_percent = 4;
  if (has_pass_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pass_percent(), output);
  }

  // optional int32 no_pass_number = 5;
  if (has_no_pass_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->no_pass_number(), output);
  }

  // optional float no_pass_percent = 6;
  if (has_no_pass_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->no_pass_percent(), output);
  }

  // optional int32 human_review_number = 7;
  if (has_human_review_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->human_review_number(), output);
  }

  // optional float human_review_percent = 8;
  if (has_human_review_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->human_review_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_detail_info)
}

::google::protobuf::uint8* verify_detail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_detail_info)
  // optional bytes model_name = 1;
  if (has_model_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->model_name(), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional int32 pass_number = 3;
  if (has_pass_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_number(), target);
  }

  // optional float pass_percent = 4;
  if (has_pass_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pass_percent(), target);
  }

  // optional int32 no_pass_number = 5;
  if (has_no_pass_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->no_pass_number(), target);
  }

  // optional float no_pass_percent = 6;
  if (has_no_pass_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->no_pass_percent(), target);
  }

  // optional int32 human_review_number = 7;
  if (has_human_review_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->human_review_number(), target);
  }

  // optional float human_review_percent = 8;
  if (has_human_review_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->human_review_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_detail_info)
  return target;
}

int verify_detail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_name());
    }

    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional int32 pass_number = 3;
    if (has_pass_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_number());
    }

    // optional float pass_percent = 4;
    if (has_pass_percent()) {
      total_size += 1 + 4;
    }

    // optional int32 no_pass_number = 5;
    if (has_no_pass_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_pass_number());
    }

    // optional float no_pass_percent = 6;
    if (has_no_pass_percent()) {
      total_size += 1 + 4;
    }

    // optional int32 human_review_number = 7;
    if (has_human_review_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->human_review_number());
    }

    // optional float human_review_percent = 8;
    if (has_human_review_percent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_detail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_detail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_detail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_detail_info::MergeFrom(const verify_detail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_pass_number()) {
      set_pass_number(from.pass_number());
    }
    if (from.has_pass_percent()) {
      set_pass_percent(from.pass_percent());
    }
    if (from.has_no_pass_number()) {
      set_no_pass_number(from.no_pass_number());
    }
    if (from.has_no_pass_percent()) {
      set_no_pass_percent(from.no_pass_percent());
    }
    if (from.has_human_review_number()) {
      set_human_review_number(from.human_review_number());
    }
    if (from.has_human_review_percent()) {
      set_human_review_percent(from.human_review_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_detail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_detail_info::CopyFrom(const verify_detail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_detail_info::IsInitialized() const {

  return true;
}

void verify_detail_info::Swap(verify_detail_info* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(total_number_, other->total_number_);
    std::swap(pass_number_, other->pass_number_);
    std::swap(pass_percent_, other->pass_percent_);
    std::swap(no_pass_number_, other->no_pass_number_);
    std::swap(no_pass_percent_, other->no_pass_percent_);
    std::swap(human_review_number_, other->human_review_number_);
    std::swap(human_review_percent_, other->human_review_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_detail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_detail_info_descriptor_;
  metadata.reflection = verify_detail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_model_ask::kStartDateFieldNumber;
const int verify_model_ask::kEndDateFieldNumber;
const int verify_model_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

verify_model_ask::verify_model_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_model_ask)
}

void verify_model_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

verify_model_ask::verify_model_ask(const verify_model_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_model_ask)
}

void verify_model_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_model_ask::~verify_model_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_model_ask)
  SharedDtor();
}

void verify_model_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void verify_model_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_model_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_model_ask_descriptor_;
}

const verify_model_ask& verify_model_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_model_ask* verify_model_ask::default_instance_ = NULL;

verify_model_ask* verify_model_ask::New() const {
  return new verify_model_ask;
}

void verify_model_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_model_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_model_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_model_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_model_ask)
  return false;
#undef DO_
}

void verify_model_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_model_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_model_ask)
}

::google::protobuf::uint8* verify_model_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_model_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_model_ask)
  return target;
}

int verify_model_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_model_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_model_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_model_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_model_ask::MergeFrom(const verify_model_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_model_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_model_ask::CopyFrom(const verify_model_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_model_ask::IsInitialized() const {

  return true;
}

void verify_model_ask::Swap(verify_model_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_model_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_model_ask_descriptor_;
  metadata.reflection = verify_model_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_model_ans::kListFieldNumber;
const int verify_model_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

verify_model_ans::verify_model_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_model_ans)
}

void verify_model_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

verify_model_ans::verify_model_ans(const verify_model_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_model_ans)
}

void verify_model_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_model_ans::~verify_model_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_model_ans)
  SharedDtor();
}

void verify_model_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void verify_model_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_model_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_model_ans_descriptor_;
}

const verify_model_ans& verify_model_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_model_ans* verify_model_ans::default_instance_ = NULL;

verify_model_ans* verify_model_ans::New() const {
  return new verify_model_ans;
}

void verify_model_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_model_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_model_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.verify_model_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_model_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_model_ans)
  return false;
#undef DO_
}

void verify_model_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_model_ans)
  // repeated .AFP_main_frame.verify_model_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_model_ans)
}

::google::protobuf::uint8* verify_model_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_model_ans)
  // repeated .AFP_main_frame.verify_model_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_model_ans)
  return target;
}

int verify_model_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.verify_model_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_model_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_model_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_model_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_model_ans::MergeFrom(const verify_model_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_model_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_model_ans::CopyFrom(const verify_model_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_model_ans::IsInitialized() const {

  return true;
}

void verify_model_ans::Swap(verify_model_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_model_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_model_ans_descriptor_;
  metadata.reflection = verify_model_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_detail_ask::kStartDateFieldNumber;
const int verify_detail_ask::kEndDateFieldNumber;
const int verify_detail_ask::kPageNumFieldNumber;
const int verify_detail_ask::kCurPageFieldNumber;
const int verify_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

verify_detail_ask::verify_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_detail_ask)
}

void verify_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

verify_detail_ask::verify_detail_ask(const verify_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_detail_ask)
}

void verify_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_detail_ask::~verify_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_detail_ask)
  SharedDtor();
}

void verify_detail_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void verify_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_detail_ask_descriptor_;
}

const verify_detail_ask& verify_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_detail_ask* verify_detail_ask::default_instance_ = NULL;

verify_detail_ask* verify_detail_ask::New() const {
  return new verify_detail_ask;
}

void verify_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<verify_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 3;
      case 3: {
        if (tag == 24) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_detail_ask)
  return false;
#undef DO_
}

void verify_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional int32 page_num = 3;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_num(), output);
  }

  // optional int32 cur_page = 4;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_detail_ask)
}

::google::protobuf::uint8* verify_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional int32 page_num = 3;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_num(), target);
  }

  // optional int32 cur_page = 4;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_detail_ask)
  return target;
}

int verify_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional int32 page_num = 3;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 4;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_detail_ask::MergeFrom(const verify_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_detail_ask::CopyFrom(const verify_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_detail_ask::IsInitialized() const {

  return true;
}

void verify_detail_ask::Swap(verify_detail_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_detail_ask_descriptor_;
  metadata.reflection = verify_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_detail_ans::kListFieldNumber;
const int verify_detail_ans::kTotalNumberFieldNumber;
const int verify_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

verify_detail_ans::verify_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_detail_ans)
}

void verify_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

verify_detail_ans::verify_detail_ans(const verify_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_detail_ans)
}

void verify_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_detail_ans::~verify_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_detail_ans)
  SharedDtor();
}

void verify_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void verify_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_detail_ans_descriptor_;
}

const verify_detail_ans& verify_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_detail_ans* verify_detail_ans::default_instance_ = NULL;

verify_detail_ans* verify_detail_ans::New() const {
  return new verify_detail_ans;
}

void verify_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.verify_detail_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_detail_ans)
  return false;
#undef DO_
}

void verify_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_detail_ans)
  // repeated .AFP_main_frame.verify_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_detail_ans)
}

::google::protobuf::uint8* verify_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_detail_ans)
  // repeated .AFP_main_frame.verify_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_detail_ans)
  return target;
}

int verify_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.verify_detail_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_detail_ans::MergeFrom(const verify_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_detail_ans::CopyFrom(const verify_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_detail_ans::IsInitialized() const {

  return true;
}

void verify_detail_ans::Swap(verify_detail_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_detail_ans_descriptor_;
  metadata.reflection = verify_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_verify_info::kModelInfoFieldNumber;
const int afp_verify_info::kVerifyResultFieldNumber;
#endif  // !_MSC_VER

afp_verify_info::afp_verify_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_verify_info)
}

void afp_verify_info::InitAsDefaultInstance() {
  model_info_ = const_cast< ::AFP_main_frame::verify_model_info*>(&::AFP_main_frame::verify_model_info::default_instance());
}

afp_verify_info::afp_verify_info(const afp_verify_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_verify_info)
}

void afp_verify_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_info_ = NULL;
  verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_verify_info::~afp_verify_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_verify_info)
  SharedDtor();
}

void afp_verify_info::SharedDtor() {
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_result_;
  }
  if (this != default_instance_) {
    delete model_info_;
  }
}

void afp_verify_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_verify_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_verify_info_descriptor_;
}

const afp_verify_info& afp_verify_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_verify_info* afp_verify_info::default_instance_ = NULL;

afp_verify_info* afp_verify_info::New() const {
  return new afp_verify_info;
}

void afp_verify_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_model_info()) {
      if (model_info_ != NULL) model_info_->::AFP_main_frame::verify_model_info::Clear();
    }
    if (has_verify_result()) {
      if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verify_result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_verify_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_verify_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.verify_model_info model_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_verify_result;
        break;
      }

      // optional bytes verify_result = 2;
      case 2: {
        if (tag == 18) {
         parse_verify_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_verify_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_verify_info)
  return false;
#undef DO_
}

void afp_verify_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_verify_info)
  // optional .AFP_main_frame.verify_model_info model_info = 1;
  if (has_model_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model_info(), output);
  }

  // optional bytes verify_result = 2;
  if (has_verify_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->verify_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_verify_info)
}

::google::protobuf::uint8* afp_verify_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_verify_info)
  // optional .AFP_main_frame.verify_model_info model_info = 1;
  if (has_model_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model_info(), target);
  }

  // optional bytes verify_result = 2;
  if (has_verify_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verify_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_verify_info)
  return target;
}

int afp_verify_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.verify_model_info model_info = 1;
    if (has_model_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_info());
    }

    // optional bytes verify_result = 2;
    if (has_verify_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verify_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_verify_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_verify_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_verify_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_verify_info::MergeFrom(const afp_verify_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_info()) {
      mutable_model_info()->::AFP_main_frame::verify_model_info::MergeFrom(from.model_info());
    }
    if (from.has_verify_result()) {
      set_verify_result(from.verify_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_verify_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_verify_info::CopyFrom(const afp_verify_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_verify_info::IsInitialized() const {

  return true;
}

void afp_verify_info::Swap(afp_verify_info* other) {
  if (other != this) {
    std::swap(model_info_, other->model_info_);
    std::swap(verify_result_, other->verify_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_verify_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_verify_info_descriptor_;
  metadata.reflection = afp_verify_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_model_verify_ask::kRealNameFieldNumber;
const int afp_model_verify_ask::kMobilePhoneFieldNumber;
const int afp_model_verify_ask::kIdNoFieldNumber;
const int afp_model_verify_ask::kModelNosFieldNumber;
const int afp_model_verify_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

afp_model_verify_ask::afp_model_verify_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_model_verify_ask)
}

void afp_model_verify_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

afp_model_verify_ask::afp_model_verify_ask(const afp_model_verify_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_model_verify_ask)
}

void afp_model_verify_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_model_verify_ask::~afp_model_verify_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_model_verify_ask)
  SharedDtor();
}

void afp_model_verify_ask::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void afp_model_verify_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_model_verify_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_model_verify_ask_descriptor_;
}

const afp_model_verify_ask& afp_model_verify_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_model_verify_ask* afp_model_verify_ask::default_instance_ = NULL;

afp_model_verify_ask* afp_model_verify_ask::New() const {
  return new afp_model_verify_ask;
}

void afp_model_verify_ask::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  model_nos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_model_verify_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_model_verify_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model_nos;
        break;
      }

      // repeated bytes model_nos = 4;
      case 4: {
        if (tag == 34) {
         parse_model_nos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_model_nos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_model_nos;
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_model_verify_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_model_verify_ask)
  return false;
#undef DO_
}

void afp_model_verify_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_model_verify_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // repeated bytes model_nos = 4;
  for (int i = 0; i < this->model_nos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->model_nos(i), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_model_verify_ask)
}

::google::protobuf::uint8* afp_model_verify_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_model_verify_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // repeated bytes model_nos = 4;
  for (int i = 0; i < this->model_nos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->model_nos(i), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_model_verify_ask)
  return target;
}

int afp_model_verify_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated bytes model_nos = 4;
  total_size += 1 * this->model_nos_size();
  for (int i = 0; i < this->model_nos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->model_nos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_model_verify_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_model_verify_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_model_verify_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_model_verify_ask::MergeFrom(const afp_model_verify_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_nos_.MergeFrom(from.model_nos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_model_verify_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_model_verify_ask::CopyFrom(const afp_model_verify_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_model_verify_ask::IsInitialized() const {

  return true;
}

void afp_model_verify_ask::Swap(afp_model_verify_ask* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    model_nos_.Swap(&other->model_nos_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_model_verify_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_model_verify_ask_descriptor_;
  metadata.reflection = afp_model_verify_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_model_verify_ans::kRealNameFieldNumber;
const int afp_model_verify_ans::kMobilePhoneFieldNumber;
const int afp_model_verify_ans::kIdNoFieldNumber;
const int afp_model_verify_ans::kVerifyInfoFieldNumber;
const int afp_model_verify_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

afp_model_verify_ans::afp_model_verify_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_model_verify_ans)
}

void afp_model_verify_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

afp_model_verify_ans::afp_model_verify_ans(const afp_model_verify_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_model_verify_ans)
}

void afp_model_verify_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_model_verify_ans::~afp_model_verify_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_model_verify_ans)
  SharedDtor();
}

void afp_model_verify_ans::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void afp_model_verify_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_model_verify_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_model_verify_ans_descriptor_;
}

const afp_model_verify_ans& afp_model_verify_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_model_verify_ans* afp_model_verify_ans::default_instance_ = NULL;

afp_model_verify_ans* afp_model_verify_ans::New() const {
  return new afp_model_verify_ans;
}

void afp_model_verify_ans::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  verify_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_model_verify_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_model_verify_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_info;
        break;
      }

      // repeated .AFP_main_frame.afp_verify_info verify_info = 4;
      case 4: {
        if (tag == 34) {
         parse_verify_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verify_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_info;
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_model_verify_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_model_verify_ans)
  return false;
#undef DO_
}

void afp_model_verify_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_model_verify_ans)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // repeated .AFP_main_frame.afp_verify_info verify_info = 4;
  for (int i = 0; i < this->verify_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->verify_info(i), output);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_model_verify_ans)
}

::google::protobuf::uint8* afp_model_verify_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_model_verify_ans)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // repeated .AFP_main_frame.afp_verify_info verify_info = 4;
  for (int i = 0; i < this->verify_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->verify_info(i), target);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_model_verify_ans)
  return target;
}

int afp_model_verify_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.afp_verify_info verify_info = 4;
  total_size += 1 * this->verify_info_size();
  for (int i = 0; i < this->verify_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verify_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_model_verify_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_model_verify_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_model_verify_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_model_verify_ans::MergeFrom(const afp_model_verify_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  verify_info_.MergeFrom(from.verify_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_model_verify_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_model_verify_ans::CopyFrom(const afp_model_verify_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_model_verify_ans::IsInitialized() const {

  return true;
}

void afp_model_verify_ans::Swap(afp_model_verify_ans* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    verify_info_.Swap(&other->verify_info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_model_verify_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_model_verify_ans_descriptor_;
  metadata.reflection = afp_model_verify_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int third_platform_verify_info::kPlatformNoFieldNumber;
const int third_platform_verify_info::kSerivceIdFieldNumber;
const int third_platform_verify_info::kParam1FieldNumber;
const int third_platform_verify_info::kParam2FieldNumber;
const int third_platform_verify_info::kParam3FieldNumber;
const int third_platform_verify_info::kParam4FieldNumber;
const int third_platform_verify_info::kParam5FieldNumber;
const int third_platform_verify_info::kParam6FieldNumber;
const int third_platform_verify_info::kParam7FieldNumber;
const int third_platform_verify_info::kParam8FieldNumber;
const int third_platform_verify_info::kParam9FieldNumber;
const int third_platform_verify_info::kParam10FieldNumber;
#endif  // !_MSC_VER

third_platform_verify_info::third_platform_verify_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.third_platform_verify_info)
}

void third_platform_verify_info::InitAsDefaultInstance() {
}

third_platform_verify_info::third_platform_verify_info(const third_platform_verify_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.third_platform_verify_info)
}

void third_platform_verify_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivce_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param6_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param7_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param9_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param10_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

third_platform_verify_info::~third_platform_verify_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.third_platform_verify_info)
  SharedDtor();
}

void third_platform_verify_info::SharedDtor() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serivce_id_;
  }
  if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param2_;
  }
  if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param3_;
  }
  if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param4_;
  }
  if (param5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param5_;
  }
  if (param6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param6_;
  }
  if (param7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param7_;
  }
  if (param8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param8_;
  }
  if (param9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param9_;
  }
  if (param10_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param10_;
  }
  if (this != default_instance_) {
  }
}

void third_platform_verify_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* third_platform_verify_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return third_platform_verify_info_descriptor_;
}

const third_platform_verify_info& third_platform_verify_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

third_platform_verify_info* third_platform_verify_info::default_instance_ = NULL;

third_platform_verify_info* third_platform_verify_info::New() const {
  return new third_platform_verify_info;
}

void third_platform_verify_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_platform_no()) {
      if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_no_->clear();
      }
    }
    if (has_serivce_id()) {
      if (serivce_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serivce_id_->clear();
      }
    }
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param2_->clear();
      }
    }
    if (has_param3()) {
      if (param3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param3_->clear();
      }
    }
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param4_->clear();
      }
    }
    if (has_param5()) {
      if (param5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param5_->clear();
      }
    }
    if (has_param6()) {
      if (param6_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param6_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_param7()) {
      if (param7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param7_->clear();
      }
    }
    if (has_param8()) {
      if (param8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param8_->clear();
      }
    }
    if (has_param9()) {
      if (param9_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param9_->clear();
      }
    }
    if (has_param10()) {
      if (param10_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param10_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool third_platform_verify_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.third_platform_verify_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_no = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_serivce_id;
        break;
      }

      // optional bytes serivce_id = 5;
      case 5: {
        if (tag == 42) {
         parse_serivce_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serivce_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_param1;
        break;
      }

      // optional bytes param1 = 6;
      case 6: {
        if (tag == 50) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_param2;
        break;
      }

      // optional bytes param2 = 7;
      case 7: {
        if (tag == 58) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_param3;
        break;
      }

      // optional bytes param3 = 8;
      case 8: {
        if (tag == 66) {
         parse_param3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_param4;
        break;
      }

      // optional bytes param4 = 9;
      case 9: {
        if (tag == 74) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_param5;
        break;
      }

      // optional bytes param5 = 10;
      case 10: {
        if (tag == 82) {
         parse_param5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_param6;
        break;
      }

      // optional bytes param6 = 11;
      case 11: {
        if (tag == 90) {
         parse_param6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param6()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_param7;
        break;
      }

      // optional bytes param7 = 12;
      case 12: {
        if (tag == 98) {
         parse_param7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param7()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_param8;
        break;
      }

      // optional bytes param8 = 13;
      case 13: {
        if (tag == 106) {
         parse_param8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_param9;
        break;
      }

      // optional bytes param9 = 14;
      case 14: {
        if (tag == 114) {
         parse_param9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param9()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_param10;
        break;
      }

      // optional bytes param10 = 15;
      case 15: {
        if (tag == 122) {
         parse_param10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param10()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.third_platform_verify_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.third_platform_verify_info)
  return false;
#undef DO_
}

void third_platform_verify_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.third_platform_verify_info)
  // optional bytes platform_no = 4;
  if (has_platform_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->platform_no(), output);
  }

  // optional bytes serivce_id = 5;
  if (has_serivce_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->serivce_id(), output);
  }

  // optional bytes param1 = 6;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->param1(), output);
  }

  // optional bytes param2 = 7;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->param2(), output);
  }

  // optional bytes param3 = 8;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->param3(), output);
  }

  // optional bytes param4 = 9;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->param4(), output);
  }

  // optional bytes param5 = 10;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->param5(), output);
  }

  // optional bytes param6 = 11;
  if (has_param6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->param6(), output);
  }

  // optional bytes param7 = 12;
  if (has_param7()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->param7(), output);
  }

  // optional bytes param8 = 13;
  if (has_param8()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->param8(), output);
  }

  // optional bytes param9 = 14;
  if (has_param9()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->param9(), output);
  }

  // optional bytes param10 = 15;
  if (has_param10()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->param10(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.third_platform_verify_info)
}

::google::protobuf::uint8* third_platform_verify_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.third_platform_verify_info)
  // optional bytes platform_no = 4;
  if (has_platform_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->platform_no(), target);
  }

  // optional bytes serivce_id = 5;
  if (has_serivce_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->serivce_id(), target);
  }

  // optional bytes param1 = 6;
  if (has_param1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->param1(), target);
  }

  // optional bytes param2 = 7;
  if (has_param2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->param2(), target);
  }

  // optional bytes param3 = 8;
  if (has_param3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->param3(), target);
  }

  // optional bytes param4 = 9;
  if (has_param4()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->param4(), target);
  }

  // optional bytes param5 = 10;
  if (has_param5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->param5(), target);
  }

  // optional bytes param6 = 11;
  if (has_param6()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->param6(), target);
  }

  // optional bytes param7 = 12;
  if (has_param7()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->param7(), target);
  }

  // optional bytes param8 = 13;
  if (has_param8()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->param8(), target);
  }

  // optional bytes param9 = 14;
  if (has_param9()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->param9(), target);
  }

  // optional bytes param10 = 15;
  if (has_param10()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->param10(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.third_platform_verify_info)
  return target;
}

int third_platform_verify_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_no = 4;
    if (has_platform_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_no());
    }

    // optional bytes serivce_id = 5;
    if (has_serivce_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serivce_id());
    }

    // optional bytes param1 = 6;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param1());
    }

    // optional bytes param2 = 7;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param2());
    }

    // optional bytes param3 = 8;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param3());
    }

    // optional bytes param4 = 9;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param4());
    }

    // optional bytes param5 = 10;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param5());
    }

    // optional bytes param6 = 11;
    if (has_param6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param6());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes param7 = 12;
    if (has_param7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param7());
    }

    // optional bytes param8 = 13;
    if (has_param8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param8());
    }

    // optional bytes param9 = 14;
    if (has_param9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param9());
    }

    // optional bytes param10 = 15;
    if (has_param10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param10());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void third_platform_verify_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const third_platform_verify_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const third_platform_verify_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void third_platform_verify_info::MergeFrom(const third_platform_verify_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_no()) {
      set_platform_no(from.platform_no());
    }
    if (from.has_serivce_id()) {
      set_serivce_id(from.serivce_id());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_param6()) {
      set_param6(from.param6());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param7()) {
      set_param7(from.param7());
    }
    if (from.has_param8()) {
      set_param8(from.param8());
    }
    if (from.has_param9()) {
      set_param9(from.param9());
    }
    if (from.has_param10()) {
      set_param10(from.param10());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void third_platform_verify_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void third_platform_verify_info::CopyFrom(const third_platform_verify_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool third_platform_verify_info::IsInitialized() const {

  return true;
}

void third_platform_verify_info::Swap(third_platform_verify_info* other) {
  if (other != this) {
    std::swap(platform_no_, other->platform_no_);
    std::swap(serivce_id_, other->serivce_id_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(param6_, other->param6_);
    std::swap(param7_, other->param7_);
    std::swap(param8_, other->param8_);
    std::swap(param9_, other->param9_);
    std::swap(param10_, other->param10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata third_platform_verify_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = third_platform_verify_info_descriptor_;
  metadata.reflection = third_platform_verify_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int identity_sync_ask::kRealNameFieldNumber;
const int identity_sync_ask::kMobilePhoneFieldNumber;
const int identity_sync_ask::kIdNoFieldNumber;
const int identity_sync_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

identity_sync_ask::identity_sync_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.identity_sync_ask)
}

void identity_sync_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

identity_sync_ask::identity_sync_ask(const identity_sync_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.identity_sync_ask)
}

void identity_sync_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

identity_sync_ask::~identity_sync_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.identity_sync_ask)
  SharedDtor();
}

void identity_sync_ask::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void identity_sync_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* identity_sync_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return identity_sync_ask_descriptor_;
}

const identity_sync_ask& identity_sync_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

identity_sync_ask* identity_sync_ask::default_instance_ = NULL;

identity_sync_ask* identity_sync_ask::New() const {
  return new identity_sync_ask;
}

void identity_sync_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool identity_sync_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.identity_sync_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.identity_sync_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.identity_sync_ask)
  return false;
#undef DO_
}

void identity_sync_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.identity_sync_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.identity_sync_ask)
}

::google::protobuf::uint8* identity_sync_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.identity_sync_ask)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.identity_sync_ask)
  return target;
}

int identity_sync_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void identity_sync_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const identity_sync_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const identity_sync_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void identity_sync_ask::MergeFrom(const identity_sync_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void identity_sync_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void identity_sync_ask::CopyFrom(const identity_sync_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool identity_sync_ask::IsInitialized() const {

  return true;
}

void identity_sync_ask::Swap(identity_sync_ask* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata identity_sync_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = identity_sync_ask_descriptor_;
  metadata.reflection = identity_sync_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int identity_sync_ans::kVerifyInfoFieldNumber;
const int identity_sync_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

identity_sync_ans::identity_sync_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.identity_sync_ans)
}

void identity_sync_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

identity_sync_ans::identity_sync_ans(const identity_sync_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.identity_sync_ans)
}

void identity_sync_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

identity_sync_ans::~identity_sync_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.identity_sync_ans)
  SharedDtor();
}

void identity_sync_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void identity_sync_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* identity_sync_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return identity_sync_ans_descriptor_;
}

const identity_sync_ans& identity_sync_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

identity_sync_ans* identity_sync_ans::default_instance_ = NULL;

identity_sync_ans* identity_sync_ans::New() const {
  return new identity_sync_ans;
}

void identity_sync_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  verify_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool identity_sync_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.identity_sync_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
      case 1: {
        if (tag == 10) {
         parse_verify_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verify_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_verify_info;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.identity_sync_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.identity_sync_ans)
  return false;
#undef DO_
}

void identity_sync_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.identity_sync_ans)
  // repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
  for (int i = 0; i < this->verify_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->verify_info(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.identity_sync_ans)
}

::google::protobuf::uint8* identity_sync_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.identity_sync_ans)
  // repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
  for (int i = 0; i < this->verify_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->verify_info(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.identity_sync_ans)
  return target;
}

int identity_sync_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.third_platform_verify_info verify_info = 1;
  total_size += 1 * this->verify_info_size();
  for (int i = 0; i < this->verify_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verify_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void identity_sync_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const identity_sync_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const identity_sync_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void identity_sync_ans::MergeFrom(const identity_sync_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  verify_info_.MergeFrom(from.verify_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void identity_sync_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void identity_sync_ans::CopyFrom(const identity_sync_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool identity_sync_ans::IsInitialized() const {

  return true;
}

void identity_sync_ans::Swap(identity_sync_ans* other) {
  if (other != this) {
    verify_info_.Swap(&other->verify_info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata identity_sync_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = identity_sync_ans_descriptor_;
  metadata.reflection = identity_sync_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_verify_info::kServiceNameFieldNumber;
const int model_verify_info::kStatusFieldNumber;
#endif  // !_MSC_VER

model_verify_info::model_verify_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_verify_info)
}

void model_verify_info::InitAsDefaultInstance() {
}

model_verify_info::model_verify_info(const model_verify_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_verify_info)
}

void model_verify_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_verify_info::~model_verify_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_verify_info)
  SharedDtor();
}

void model_verify_info::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void model_verify_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_verify_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_verify_info_descriptor_;
}

const model_verify_info& model_verify_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_verify_info* model_verify_info::default_instance_ = NULL;

model_verify_info* model_verify_info::New() const {
  return new model_verify_info;
}

void model_verify_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_verify_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_verify_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional bytes status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_verify_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_verify_info)
  return false;
#undef DO_
}

void model_verify_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_verify_info)
  // optional bytes service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->service_name(), output);
  }

  // optional bytes status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_verify_info)
}

::google::protobuf::uint8* model_verify_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_verify_info)
  // optional bytes service_name = 1;
  if (has_service_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->service_name(), target);
  }

  // optional bytes status = 2;
  if (has_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_verify_info)
  return target;
}

int model_verify_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->service_name());
    }

    // optional bytes status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_verify_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_verify_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_verify_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_verify_info::MergeFrom(const model_verify_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_verify_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_verify_info::CopyFrom(const model_verify_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_verify_info::IsInitialized() const {

  return true;
}

void model_verify_info::Swap(model_verify_info* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_verify_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_verify_info_descriptor_;
  metadata.reflection = model_verify_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_verify_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

model_verify_ask::model_verify_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_verify_ask)
}

void model_verify_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

model_verify_ask::model_verify_ask(const model_verify_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_verify_ask)
}

void model_verify_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_verify_ask::~model_verify_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_verify_ask)
  SharedDtor();
}

void model_verify_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void model_verify_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_verify_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_verify_ask_descriptor_;
}

const model_verify_ask& model_verify_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_verify_ask* model_verify_ask::default_instance_ = NULL;

model_verify_ask* model_verify_ask::New() const {
  return new model_verify_ask;
}

void model_verify_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_verify_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_verify_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_verify_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_verify_ask)
  return false;
#undef DO_
}

void model_verify_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_verify_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_verify_ask)
}

::google::protobuf::uint8* model_verify_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_verify_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_verify_ask)
  return target;
}

int model_verify_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_verify_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_verify_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_verify_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_verify_ask::MergeFrom(const model_verify_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_verify_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_verify_ask::CopyFrom(const model_verify_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_verify_ask::IsInitialized() const {

  return true;
}

void model_verify_ask::Swap(model_verify_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_verify_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_verify_ask_descriptor_;
  metadata.reflection = model_verify_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_verify_ans::kListFieldNumber;
const int model_verify_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

model_verify_ans::model_verify_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_verify_ans)
}

void model_verify_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

model_verify_ans::model_verify_ans(const model_verify_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_verify_ans)
}

void model_verify_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_verify_ans::~model_verify_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_verify_ans)
  SharedDtor();
}

void model_verify_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void model_verify_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_verify_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_verify_ans_descriptor_;
}

const model_verify_ans& model_verify_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_verify_ans* model_verify_ans::default_instance_ = NULL;

model_verify_ans* model_verify_ans::New() const {
  return new model_verify_ans;
}

void model_verify_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_verify_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_verify_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.model_verify_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_verify_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_verify_ans)
  return false;
#undef DO_
}

void model_verify_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_verify_ans)
  // repeated .AFP_main_frame.model_verify_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_verify_ans)
}

::google::protobuf::uint8* model_verify_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_verify_ans)
  // repeated .AFP_main_frame.model_verify_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_verify_ans)
  return target;
}

int model_verify_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.model_verify_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_verify_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_verify_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_verify_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_verify_ans::MergeFrom(const model_verify_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_verify_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_verify_ans::CopyFrom(const model_verify_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_verify_ans::IsInitialized() const {

  return true;
}

void model_verify_ans::Swap(model_verify_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_verify_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_verify_ans_descriptor_;
  metadata.reflection = model_verify_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_info_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

platform_info_ask::platform_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.platform_info_ask)
}

void platform_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

platform_info_ask::platform_info_ask(const platform_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.platform_info_ask)
}

void platform_info_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_info_ask::~platform_info_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.platform_info_ask)
  SharedDtor();
}

void platform_info_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void platform_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_info_ask_descriptor_;
}

const platform_info_ask& platform_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

platform_info_ask* platform_info_ask::default_instance_ = NULL;

platform_info_ask* platform_info_ask::New() const {
  return new platform_info_ask;
}

void platform_info_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.platform_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.platform_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.platform_info_ask)
  return false;
#undef DO_
}

void platform_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.platform_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.platform_info_ask)
}

::google::protobuf::uint8* platform_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.platform_info_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.platform_info_ask)
  return target;
}

int platform_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_info_ask::MergeFrom(const platform_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_info_ask::CopyFrom(const platform_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_info_ask::IsInitialized() const {

  return true;
}

void platform_info_ask::Swap(platform_info_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_info_ask_descriptor_;
  metadata.reflection = platform_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_info_ans::kListFieldNumber;
const int platform_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

platform_info_ans::platform_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.platform_info_ans)
}

void platform_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

platform_info_ans::platform_info_ans(const platform_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.platform_info_ans)
}

void platform_info_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_info_ans::~platform_info_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.platform_info_ans)
  SharedDtor();
}

void platform_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void platform_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_info_ans_descriptor_;
}

const platform_info_ans& platform_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

platform_info_ans* platform_info_ans::default_instance_ = NULL;

platform_info_ans* platform_info_ans::New() const {
  return new platform_info_ans;
}

void platform_info_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.platform_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.platform_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.platform_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.platform_info_ans)
  return false;
#undef DO_
}

void platform_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.platform_info_ans)
  // repeated .AFP_main_frame.platform_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.platform_info_ans)
}

::google::protobuf::uint8* platform_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.platform_info_ans)
  // repeated .AFP_main_frame.platform_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.platform_info_ans)
  return target;
}

int platform_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.platform_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_info_ans::MergeFrom(const platform_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_info_ans::CopyFrom(const platform_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_info_ans::IsInitialized() const {

  return true;
}

void platform_info_ans::Swap(platform_info_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_info_ans_descriptor_;
  metadata.reflection = platform_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_hit_statistics_ask::kStartDateFieldNumber;
const int model_hit_statistics_ask::kEndDateFieldNumber;
const int model_hit_statistics_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

model_hit_statistics_ask::model_hit_statistics_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_hit_statistics_ask)
}

void model_hit_statistics_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

model_hit_statistics_ask::model_hit_statistics_ask(const model_hit_statistics_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_hit_statistics_ask)
}

void model_hit_statistics_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_hit_statistics_ask::~model_hit_statistics_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_hit_statistics_ask)
  SharedDtor();
}

void model_hit_statistics_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void model_hit_statistics_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_hit_statistics_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_hit_statistics_ask_descriptor_;
}

const model_hit_statistics_ask& model_hit_statistics_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_hit_statistics_ask* model_hit_statistics_ask::default_instance_ = NULL;

model_hit_statistics_ask* model_hit_statistics_ask::New() const {
  return new model_hit_statistics_ask;
}

void model_hit_statistics_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_hit_statistics_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_hit_statistics_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_hit_statistics_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_hit_statistics_ask)
  return false;
#undef DO_
}

void model_hit_statistics_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_hit_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_hit_statistics_ask)
}

::google::protobuf::uint8* model_hit_statistics_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_hit_statistics_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_hit_statistics_ask)
  return target;
}

int model_hit_statistics_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_hit_statistics_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_hit_statistics_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_hit_statistics_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_hit_statistics_ask::MergeFrom(const model_hit_statistics_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_hit_statistics_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_hit_statistics_ask::CopyFrom(const model_hit_statistics_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_hit_statistics_ask::IsInitialized() const {

  return true;
}

void model_hit_statistics_ask::Swap(model_hit_statistics_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_hit_statistics_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_hit_statistics_ask_descriptor_;
  metadata.reflection = model_hit_statistics_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int model_hit_statistics_ans::kListFieldNumber;
const int model_hit_statistics_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

model_hit_statistics_ans::model_hit_statistics_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.model_hit_statistics_ans)
}

void model_hit_statistics_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

model_hit_statistics_ans::model_hit_statistics_ans(const model_hit_statistics_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.model_hit_statistics_ans)
}

void model_hit_statistics_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

model_hit_statistics_ans::~model_hit_statistics_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.model_hit_statistics_ans)
  SharedDtor();
}

void model_hit_statistics_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void model_hit_statistics_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_hit_statistics_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_hit_statistics_ans_descriptor_;
}

const model_hit_statistics_ans& model_hit_statistics_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

model_hit_statistics_ans* model_hit_statistics_ans::default_instance_ = NULL;

model_hit_statistics_ans* model_hit_statistics_ans::New() const {
  return new model_hit_statistics_ans;
}

void model_hit_statistics_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool model_hit_statistics_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.model_hit_statistics_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.model_hit_statistics_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.model_hit_statistics_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.model_hit_statistics_ans)
  return false;
#undef DO_
}

void model_hit_statistics_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.model_hit_statistics_ans)
  // repeated .AFP_main_frame.model_hit_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.model_hit_statistics_ans)
}

::google::protobuf::uint8* model_hit_statistics_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.model_hit_statistics_ans)
  // repeated .AFP_main_frame.model_hit_statistics_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.model_hit_statistics_ans)
  return target;
}

int model_hit_statistics_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.model_hit_statistics_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_hit_statistics_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const model_hit_statistics_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const model_hit_statistics_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_hit_statistics_ans::MergeFrom(const model_hit_statistics_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void model_hit_statistics_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_hit_statistics_ans::CopyFrom(const model_hit_statistics_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_hit_statistics_ans::IsInitialized() const {

  return true;
}

void model_hit_statistics_ans::Swap(model_hit_statistics_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata model_hit_statistics_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_hit_statistics_ans_descriptor_;
  metadata.reflection = model_hit_statistics_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_list_ask::kStartDateFieldNumber;
const int hit_list_ask::kEndDateFieldNumber;
const int hit_list_ask::kPlatformNoFieldNumber;
const int hit_list_ask::kPageNumFieldNumber;
const int hit_list_ask::kCurPageFieldNumber;
const int hit_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

hit_list_ask::hit_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_list_ask)
}

void hit_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

hit_list_ask::hit_list_ask(const hit_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_list_ask)
}

void hit_list_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_list_ask::~hit_list_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_list_ask)
  SharedDtor();
}

void hit_list_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void hit_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_list_ask_descriptor_;
}

const hit_list_ask& hit_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_list_ask* hit_list_ask::default_instance_ = NULL;

hit_list_ask* hit_list_ask::New() const {
  return new hit_list_ask;
}

void hit_list_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hit_list_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_platform_no()) {
      if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platform_no;
        break;
      }

      // optional bytes platform_no = 3;
      case 3: {
        if (tag == 26) {
         parse_platform_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_list_ask)
  return false;
#undef DO_
}

void hit_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes platform_no = 3;
  if (has_platform_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->platform_no(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_list_ask)
}

::google::protobuf::uint8* hit_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_list_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes platform_no = 3;
  if (has_platform_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->platform_no(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_list_ask)
  return target;
}

int hit_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes platform_no = 3;
    if (has_platform_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_no());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_list_ask::MergeFrom(const hit_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_platform_no()) {
      set_platform_no(from.platform_no());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_list_ask::CopyFrom(const hit_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_list_ask::IsInitialized() const {

  return true;
}

void hit_list_ask::Swap(hit_list_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(platform_no_, other->platform_no_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_list_ask_descriptor_;
  metadata.reflection = hit_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_list_ans::kListFieldNumber;
const int hit_list_ans::kTotalNumberFieldNumber;
const int hit_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

hit_list_ans::hit_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_list_ans)
}

void hit_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

hit_list_ans::hit_list_ans(const hit_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_list_ans)
}

void hit_list_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_list_ans::~hit_list_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_list_ans)
  SharedDtor();
}

void hit_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void hit_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_list_ans_descriptor_;
}

const hit_list_ans& hit_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_list_ans* hit_list_ans::default_instance_ = NULL;

hit_list_ans* hit_list_ans::New() const {
  return new hit_list_ans;
}

void hit_list_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.hit_user_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_list_ans)
  return false;
#undef DO_
}

void hit_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_list_ans)
  // repeated .AFP_main_frame.hit_user_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_list_ans)
}

::google::protobuf::uint8* hit_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_list_ans)
  // repeated .AFP_main_frame.hit_user_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_list_ans)
  return target;
}

int hit_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.hit_user_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_list_ans::MergeFrom(const hit_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_list_ans::CopyFrom(const hit_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_list_ans::IsInitialized() const {

  return true;
}

void hit_list_ans::Swap(hit_list_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_list_ans_descriptor_;
  metadata.reflection = hit_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_user_property_analyze_ask::kPropertyFieldNumber;
const int hit_user_property_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

hit_user_property_analyze_ask::hit_user_property_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_user_property_analyze_ask)
}

void hit_user_property_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

hit_user_property_analyze_ask::hit_user_property_analyze_ask(const hit_user_property_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_user_property_analyze_ask)
}

void hit_user_property_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_user_property_analyze_ask::~hit_user_property_analyze_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_user_property_analyze_ask)
  SharedDtor();
}

void hit_user_property_analyze_ask::SharedDtor() {
  if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete property_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void hit_user_property_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_user_property_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_user_property_analyze_ask_descriptor_;
}

const hit_user_property_analyze_ask& hit_user_property_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_user_property_analyze_ask* hit_user_property_analyze_ask::default_instance_ = NULL;

hit_user_property_analyze_ask* hit_user_property_analyze_ask::New() const {
  return new hit_user_property_analyze_ask;
}

void hit_user_property_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        property_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_user_property_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_user_property_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes property = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_user_property_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_user_property_analyze_ask)
  return false;
#undef DO_
}

void hit_user_property_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_user_property_analyze_ask)
  // optional bytes property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_user_property_analyze_ask)
}

::google::protobuf::uint8* hit_user_property_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_user_property_analyze_ask)
  // optional bytes property = 1;
  if (has_property()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_user_property_analyze_ask)
  return target;
}

int hit_user_property_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_user_property_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_user_property_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_user_property_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_user_property_analyze_ask::MergeFrom(const hit_user_property_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_user_property_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_user_property_analyze_ask::CopyFrom(const hit_user_property_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_user_property_analyze_ask::IsInitialized() const {

  return true;
}

void hit_user_property_analyze_ask::Swap(hit_user_property_analyze_ask* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_user_property_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_user_property_analyze_ask_descriptor_;
  metadata.reflection = hit_user_property_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_user_property_analyze_ans::kListFieldNumber;
const int hit_user_property_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

hit_user_property_analyze_ans::hit_user_property_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_user_property_analyze_ans)
}

void hit_user_property_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

hit_user_property_analyze_ans::hit_user_property_analyze_ans(const hit_user_property_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_user_property_analyze_ans)
}

void hit_user_property_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_user_property_analyze_ans::~hit_user_property_analyze_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_user_property_analyze_ans)
  SharedDtor();
}

void hit_user_property_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void hit_user_property_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_user_property_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_user_property_analyze_ans_descriptor_;
}

const hit_user_property_analyze_ans& hit_user_property_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_user_property_analyze_ans* hit_user_property_analyze_ans::default_instance_ = NULL;

hit_user_property_analyze_ans* hit_user_property_analyze_ans::New() const {
  return new hit_user_property_analyze_ans;
}

void hit_user_property_analyze_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_user_property_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_user_property_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.hit_user_analyze_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_user_property_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_user_property_analyze_ans)
  return false;
#undef DO_
}

void hit_user_property_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_user_property_analyze_ans)
  // repeated .AFP_main_frame.hit_user_analyze_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_user_property_analyze_ans)
}

::google::protobuf::uint8* hit_user_property_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_user_property_analyze_ans)
  // repeated .AFP_main_frame.hit_user_analyze_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_user_property_analyze_ans)
  return target;
}

int hit_user_property_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.hit_user_analyze_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_user_property_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_user_property_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_user_property_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_user_property_analyze_ans::MergeFrom(const hit_user_property_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_user_property_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_user_property_analyze_ans::CopyFrom(const hit_user_property_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_user_property_analyze_ans::IsInitialized() const {

  return true;
}

void hit_user_property_analyze_ans::Swap(hit_user_property_analyze_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_user_property_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_user_property_analyze_ans_descriptor_;
  metadata.reflection = hit_user_property_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_rule_analyze_ask::kPlatformNoFieldNumber;
const int hit_rule_analyze_ask::kPageNumFieldNumber;
const int hit_rule_analyze_ask::kCurPageFieldNumber;
const int hit_rule_analyze_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

hit_rule_analyze_ask::hit_rule_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_rule_analyze_ask)
}

void hit_rule_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

hit_rule_analyze_ask::hit_rule_analyze_ask(const hit_rule_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_rule_analyze_ask)
}

void hit_rule_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_rule_analyze_ask::~hit_rule_analyze_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_rule_analyze_ask)
  SharedDtor();
}

void hit_rule_analyze_ask::SharedDtor() {
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void hit_rule_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_rule_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_rule_analyze_ask_descriptor_;
}

const hit_rule_analyze_ask& hit_rule_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_rule_analyze_ask* hit_rule_analyze_ask::default_instance_ = NULL;

hit_rule_analyze_ask* hit_rule_analyze_ask::New() const {
  return new hit_rule_analyze_ask;
}

void hit_rule_analyze_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hit_rule_analyze_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(page_num_, cur_page_);
    if (has_platform_no()) {
      if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_rule_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_rule_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 2;
      case 2: {
        if (tag == 16) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 4;
      case 4: {
        if (tag == 34) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_rule_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_rule_analyze_ask)
  return false;
#undef DO_
}

void hit_rule_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_rule_analyze_ask)
  // optional bytes platform_no = 1;
  if (has_platform_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_no(), output);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_num(), output);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_rule_analyze_ask)
}

::google::protobuf::uint8* hit_rule_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_rule_analyze_ask)
  // optional bytes platform_no = 1;
  if (has_platform_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_no(), target);
  }

  // optional int32 page_num = 2;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_num(), target);
  }

  // optional int32 cur_page = 3;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 4;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_rule_analyze_ask)
  return target;
}

int hit_rule_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_no = 1;
    if (has_platform_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_no());
    }

    // optional int32 page_num = 2;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 3;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 4;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_rule_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_rule_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_rule_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_rule_analyze_ask::MergeFrom(const hit_rule_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_no()) {
      set_platform_no(from.platform_no());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_rule_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_rule_analyze_ask::CopyFrom(const hit_rule_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_rule_analyze_ask::IsInitialized() const {

  return true;
}

void hit_rule_analyze_ask::Swap(hit_rule_analyze_ask* other) {
  if (other != this) {
    std::swap(platform_no_, other->platform_no_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_rule_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_rule_analyze_ask_descriptor_;
  metadata.reflection = hit_rule_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_rule_analyze_ans::kListFieldNumber;
const int hit_rule_analyze_ans::kTotalNumberFieldNumber;
const int hit_rule_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

hit_rule_analyze_ans::hit_rule_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_rule_analyze_ans)
}

void hit_rule_analyze_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

hit_rule_analyze_ans::hit_rule_analyze_ans(const hit_rule_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_rule_analyze_ans)
}

void hit_rule_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_rule_analyze_ans::~hit_rule_analyze_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_rule_analyze_ans)
  SharedDtor();
}

void hit_rule_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void hit_rule_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_rule_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_rule_analyze_ans_descriptor_;
}

const hit_rule_analyze_ans& hit_rule_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_rule_analyze_ans* hit_rule_analyze_ans::default_instance_ = NULL;

hit_rule_analyze_ans* hit_rule_analyze_ans::New() const {
  return new hit_rule_analyze_ans;
}

void hit_rule_analyze_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_rule_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_rule_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_rule_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_rule_analyze_ans)
  return false;
#undef DO_
}

void hit_rule_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_rule_analyze_ans)
  // repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_rule_analyze_ans)
}

::google::protobuf::uint8* hit_rule_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_rule_analyze_ans)
  // repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_rule_analyze_ans)
  return target;
}

int hit_rule_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.hit_rule_analyze_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_rule_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_rule_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_rule_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_rule_analyze_ans::MergeFrom(const hit_rule_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_rule_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_rule_analyze_ans::CopyFrom(const hit_rule_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_rule_analyze_ans::IsInitialized() const {

  return true;
}

void hit_rule_analyze_ans::Swap(hit_rule_analyze_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_rule_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_rule_analyze_ans_descriptor_;
  metadata.reflection = hit_rule_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_detail_ask::kStartDateFieldNumber;
const int hit_detail_ask::kEndDateFieldNumber;
const int hit_detail_ask::kPlatformNoFieldNumber;
const int hit_detail_ask::kPageNumFieldNumber;
const int hit_detail_ask::kCurPageFieldNumber;
const int hit_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

hit_detail_ask::hit_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_detail_ask)
}

void hit_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

hit_detail_ask::hit_detail_ask(const hit_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_detail_ask)
}

void hit_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_detail_ask::~hit_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_detail_ask)
  SharedDtor();
}

void hit_detail_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void hit_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_detail_ask_descriptor_;
}

const hit_detail_ask& hit_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_detail_ask* hit_detail_ask::default_instance_ = NULL;

hit_detail_ask* hit_detail_ask::New() const {
  return new hit_detail_ask;
}

void hit_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<hit_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(page_num_, cur_page_);
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_platform_no()) {
      if (platform_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_no_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platform_no;
        break;
      }

      // optional bytes platform_no = 3;
      case 3: {
        if (tag == 26) {
         parse_platform_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 4;
      case 4: {
        if (tag == 32) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 5;
      case 5: {
        if (tag == 40) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_detail_ask)
  return false;
#undef DO_
}

void hit_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes platform_no = 3;
  if (has_platform_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->platform_no(), output);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_num(), output);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_detail_ask)
}

::google::protobuf::uint8* hit_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_detail_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes platform_no = 3;
  if (has_platform_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->platform_no(), target);
  }

  // optional int32 page_num = 4;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page_num(), target);
  }

  // optional int32 cur_page = 5;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_detail_ask)
  return target;
}

int hit_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes platform_no = 3;
    if (has_platform_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_no());
    }

    // optional int32 page_num = 4;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 5;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_detail_ask::MergeFrom(const hit_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_platform_no()) {
      set_platform_no(from.platform_no());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_detail_ask::CopyFrom(const hit_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_detail_ask::IsInitialized() const {

  return true;
}

void hit_detail_ask::Swap(hit_detail_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(platform_no_, other->platform_no_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_detail_ask_descriptor_;
  metadata.reflection = hit_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hit_detail_ans::kListFieldNumber;
const int hit_detail_ans::kTotalNumberFieldNumber;
const int hit_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

hit_detail_ans::hit_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.hit_detail_ans)
}

void hit_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

hit_detail_ans::hit_detail_ans(const hit_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.hit_detail_ans)
}

void hit_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hit_detail_ans::~hit_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.hit_detail_ans)
  SharedDtor();
}

void hit_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void hit_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hit_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hit_detail_ans_descriptor_;
}

const hit_detail_ans& hit_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

hit_detail_ans* hit_detail_ans::default_instance_ = NULL;

hit_detail_ans* hit_detail_ans::New() const {
  return new hit_detail_ans;
}

void hit_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hit_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.hit_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.hit_detail_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.hit_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.hit_detail_ans)
  return false;
#undef DO_
}

void hit_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.hit_detail_ans)
  // repeated .AFP_main_frame.hit_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.hit_detail_ans)
}

::google::protobuf::uint8* hit_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.hit_detail_ans)
  // repeated .AFP_main_frame.hit_detail_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.hit_detail_ans)
  return target;
}

int hit_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.hit_detail_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hit_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hit_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hit_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hit_detail_ans::MergeFrom(const hit_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hit_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hit_detail_ans::CopyFrom(const hit_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hit_detail_ans::IsInitialized() const {

  return true;
}

void hit_detail_ans::Swap(hit_detail_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hit_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hit_detail_ans_descriptor_;
  metadata.reflection = hit_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_location_track_info::kTimeFieldNumber;
const int user_location_track_info::kLongitudeFieldNumber;
const int user_location_track_info::kLatitudeFieldNumber;
const int user_location_track_info::kLocationNameFieldNumber;
#endif  // !_MSC_VER

user_location_track_info::user_location_track_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_location_track_info)
}

void user_location_track_info::InitAsDefaultInstance() {
}

user_location_track_info::user_location_track_info(const user_location_track_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_location_track_info)
}

void user_location_track_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = 0;
  latitude_ = 0;
  location_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_location_track_info::~user_location_track_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_location_track_info)
  SharedDtor();
}

void user_location_track_info::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (location_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete location_name_;
  }
  if (this != default_instance_) {
  }
}

void user_location_track_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_location_track_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_location_track_info_descriptor_;
}

const user_location_track_info& user_location_track_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_location_track_info* user_location_track_info::default_instance_ = NULL;

user_location_track_info* user_location_track_info::New() const {
  return new user_location_track_info;
}

void user_location_track_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<user_location_track_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(longitude_, latitude_);
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    if (has_location_name()) {
      if (location_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        location_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_location_track_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_location_track_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // optional float longitude = 2;
      case 2: {
        if (tag == 21) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_latitude;
        break;
      }

      // optional float latitude = 3;
      case 3: {
        if (tag == 29) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location_name;
        break;
      }

      // optional bytes location_name = 4;
      case 4: {
        if (tag == 34) {
         parse_location_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_location_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_location_track_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_location_track_info)
  return false;
#undef DO_
}

void user_location_track_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_location_track_info)
  // optional bytes time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->time(), output);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // optional float latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // optional bytes location_name = 4;
  if (has_location_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->location_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_location_track_info)
}

::google::protobuf::uint8* user_location_track_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_location_track_info)
  // optional bytes time = 1;
  if (has_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->time(), target);
  }

  // optional float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // optional float latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // optional bytes location_name = 4;
  if (has_location_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->location_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_location_track_info)
  return target;
}

int user_location_track_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->time());
    }

    // optional float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional bytes location_name = 4;
    if (has_location_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->location_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_location_track_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_location_track_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_location_track_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_location_track_info::MergeFrom(const user_location_track_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_location_name()) {
      set_location_name(from.location_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_location_track_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_location_track_info::CopyFrom(const user_location_track_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_location_track_info::IsInitialized() const {

  return true;
}

void user_location_track_info::Swap(user_location_track_info* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(location_name_, other->location_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_location_track_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_location_track_info_descriptor_;
  metadata.reflection = user_location_track_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_location_track_ask::kStartDateFieldNumber;
const int user_location_track_ask::kEndDateFieldNumber;
const int user_location_track_ask::kIdentityCardFieldNumber;
const int user_location_track_ask::kMobilePhoneFieldNumber;
const int user_location_track_ask::kIsNormalFieldNumber;
const int user_location_track_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_location_track_ask::user_location_track_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_location_track_ask)
}

void user_location_track_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_location_track_ask::user_location_track_ask(const user_location_track_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_location_track_ask)
}

void user_location_track_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_location_track_ask::~user_location_track_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_location_track_ask)
  SharedDtor();
}

void user_location_track_ask::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_location_track_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_location_track_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_location_track_ask_descriptor_;
}

const user_location_track_ask& user_location_track_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_location_track_ask* user_location_track_ask::default_instance_ = NULL;

user_location_track_ask* user_location_track_ask::New() const {
  return new user_location_track_ask;
}

void user_location_track_ask::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_is_normal()) {
      if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        is_normal_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_location_track_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_location_track_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_identity_card;
        break;
      }

      // optional bytes identity_card = 3;
      case 3: {
        if (tag == 26) {
         parse_identity_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_is_normal;
        break;
      }

      // optional bytes is_normal = 5;
      case 5: {
        if (tag == 42) {
         parse_is_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_is_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_location_track_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_location_track_ask)
  return false;
#undef DO_
}

void user_location_track_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_location_track_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_date(), output);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_date(), output);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->identity_card(), output);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mobile_phone(), output);
  }

  // optional bytes is_normal = 5;
  if (has_is_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->is_normal(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_location_track_ask)
}

::google::protobuf::uint8* user_location_track_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_location_track_ask)
  // optional bytes start_date = 1;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_date(), target);
  }

  // optional bytes end_date = 2;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_date(), target);
  }

  // optional bytes identity_card = 3;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->identity_card(), target);
  }

  // optional bytes mobile_phone = 4;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mobile_phone(), target);
  }

  // optional bytes is_normal = 5;
  if (has_is_normal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->is_normal(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_location_track_ask)
  return target;
}

int user_location_track_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional bytes identity_card = 3;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes mobile_phone = 4;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes is_normal = 5;
    if (has_is_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->is_normal());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_location_track_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_location_track_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_location_track_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_location_track_ask::MergeFrom(const user_location_track_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_is_normal()) {
      set_is_normal(from.is_normal());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_location_track_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_location_track_ask::CopyFrom(const user_location_track_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_location_track_ask::IsInitialized() const {

  return true;
}

void user_location_track_ask::Swap(user_location_track_ask* other) {
  if (other != this) {
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(identity_card_, other->identity_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(is_normal_, other->is_normal_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_location_track_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_location_track_ask_descriptor_;
  metadata.reflection = user_location_track_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_location_track_ans::kListFieldNumber;
const int user_location_track_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_location_track_ans::user_location_track_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_location_track_ans)
}

void user_location_track_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_location_track_ans::user_location_track_ans(const user_location_track_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_location_track_ans)
}

void user_location_track_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_location_track_ans::~user_location_track_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_location_track_ans)
  SharedDtor();
}

void user_location_track_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_location_track_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_location_track_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_location_track_ans_descriptor_;
}

const user_location_track_ans& user_location_track_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_location_track_ans* user_location_track_ans::default_instance_ = NULL;

user_location_track_ans* user_location_track_ans::New() const {
  return new user_location_track_ans;
}

void user_location_track_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_location_track_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_location_track_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.user_location_track_info list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_location_track_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_location_track_ans)
  return false;
#undef DO_
}

void user_location_track_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_location_track_ans)
  // repeated .AFP_main_frame.user_location_track_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_location_track_ans)
}

::google::protobuf::uint8* user_location_track_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_location_track_ans)
  // repeated .AFP_main_frame.user_location_track_info list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_location_track_ans)
  return target;
}

int user_location_track_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.user_location_track_info list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_location_track_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_location_track_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_location_track_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_location_track_ans::MergeFrom(const user_location_track_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_location_track_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_location_track_ans::CopyFrom(const user_location_track_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_location_track_ans::IsInitialized() const {

  return true;
}

void user_location_track_ans::Swap(user_location_track_ans* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_location_track_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_location_track_ans_descriptor_;
  metadata.reflection = user_location_track_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int by_inquirers::kIdentityCardFieldNumber;
const int by_inquirers::kMobilePhoneFieldNumber;
const int by_inquirers::kRealNameFieldNumber;
#endif  // !_MSC_VER

by_inquirers::by_inquirers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.by_inquirers)
}

void by_inquirers::InitAsDefaultInstance() {
}

by_inquirers::by_inquirers(const by_inquirers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.by_inquirers)
}

void by_inquirers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

by_inquirers::~by_inquirers() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.by_inquirers)
  SharedDtor();
}

void by_inquirers::SharedDtor() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (this != default_instance_) {
  }
}

void by_inquirers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* by_inquirers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return by_inquirers_descriptor_;
}

const by_inquirers& by_inquirers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

by_inquirers* by_inquirers::default_instance_ = NULL;

by_inquirers* by_inquirers::New() const {
  return new by_inquirers;
}

void by_inquirers::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_identity_card()) {
      if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        identity_card_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool by_inquirers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.by_inquirers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes identity_card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_identity_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.by_inquirers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.by_inquirers)
  return false;
#undef DO_
}

void by_inquirers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.by_inquirers)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->identity_card(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.by_inquirers)
}

::google::protobuf::uint8* by_inquirers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.by_inquirers)
  // optional bytes identity_card = 1;
  if (has_identity_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->identity_card(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.by_inquirers)
  return target;
}

int by_inquirers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes identity_card = 1;
    if (has_identity_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->identity_card());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void by_inquirers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const by_inquirers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const by_inquirers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void by_inquirers::MergeFrom(const by_inquirers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identity_card()) {
      set_identity_card(from.identity_card());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void by_inquirers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void by_inquirers::CopyFrom(const by_inquirers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool by_inquirers::IsInitialized() const {

  return true;
}

void by_inquirers::Swap(by_inquirers* other) {
  if (other != this) {
    std::swap(identity_card_, other->identity_card_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(real_name_, other->real_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata by_inquirers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = by_inquirers_descriptor_;
  metadata.reflection = by_inquirers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info_ask::kInquirersFieldNumber;
const int user_info_ask::kAskHeaderFieldNumber;
const int user_info_ask::kIsNormalFieldNumber;
#endif  // !_MSC_VER

user_info_ask::user_info_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_info_ask)
}

void user_info_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_info_ask::user_info_ask(const user_info_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_info_ask)
}

void user_info_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info_ask::~user_info_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_info_ask)
  SharedDtor();
}

void user_info_ask::SharedDtor() {
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_info_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_ask_descriptor_;
}

const user_info_ask& user_info_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_info_ask* user_info_ask::default_instance_ = NULL;

user_info_ask* user_info_ask::New() const {
  return new user_info_ask;
}

void user_info_ask::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_is_normal()) {
      if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        is_normal_->clear();
      }
    }
  }
  inquirers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_info_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.by_inquirers inquirers = 1;
      case 1: {
        if (tag == 10) {
         parse_inquirers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inquirers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_inquirers;
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_is_normal;
        break;
      }

      // optional bytes is_normal = 3;
      case 3: {
        if (tag == 26) {
         parse_is_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_is_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_info_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_info_ask)
  return false;
#undef DO_
}

void user_info_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_info_ask)
  // repeated .AFP_main_frame.by_inquirers inquirers = 1;
  for (int i = 0; i < this->inquirers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inquirers(i), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  // optional bytes is_normal = 3;
  if (has_is_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->is_normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_info_ask)
}

::google::protobuf::uint8* user_info_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_info_ask)
  // repeated .AFP_main_frame.by_inquirers inquirers = 1;
  for (int i = 0; i < this->inquirers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inquirers(i), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  // optional bytes is_normal = 3;
  if (has_is_normal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->is_normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_info_ask)
  return target;
}

int user_info_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes is_normal = 3;
    if (has_is_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->is_normal());
    }

  }
  // repeated .AFP_main_frame.by_inquirers inquirers = 1;
  total_size += 1 * this->inquirers_size();
  for (int i = 0; i < this->inquirers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inquirers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info_ask::MergeFrom(const user_info_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  inquirers_.MergeFrom(from.inquirers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_is_normal()) {
      set_is_normal(from.is_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ask::CopyFrom(const user_info_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ask::IsInitialized() const {

  return true;
}

void user_info_ask::Swap(user_info_ask* other) {
  if (other != this) {
    inquirers_.Swap(&other->inquirers_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(is_normal_, other->is_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_ask_descriptor_;
  metadata.reflection = user_info_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_info_ans::kUserFieldNumber;
const int user_info_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_info_ans::user_info_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_info_ans)
}

void user_info_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_info_ans::user_info_ans(const user_info_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_info_ans)
}

void user_info_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info_ans::~user_info_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_info_ans)
  SharedDtor();
}

void user_info_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_info_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_ans_descriptor_;
}

const user_info_ans& user_info_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_info_ans* user_info_ans::default_instance_ = NULL;

user_info_ans* user_info_ans::New() const {
  return new user_info_ans;
}

void user_info_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_info_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.user_info user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_info_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_info_ans)
  return false;
#undef DO_
}

void user_info_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_info_ans)
  // repeated .common.user_info user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_info_ans)
}

::google::protobuf::uint8* user_info_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_info_ans)
  // repeated .common.user_info user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_info_ans)
  return target;
}

int user_info_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .common.user_info user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info_ans::MergeFrom(const user_info_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ans::CopyFrom(const user_info_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ans::IsInitialized() const {

  return true;
}

void user_info_ans::Swap(user_info_ans* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_ans_descriptor_;
  metadata.reflection = user_info_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AFP_LandedAccount::kNicknameFieldNumber;
const int AFP_LandedAccount::kRealNameFieldNumber;
const int AFP_LandedAccount::kIdFieldNumber;
const int AFP_LandedAccount::kSexFieldNumber;
const int AFP_LandedAccount::kAgeFieldNumber;
const int AFP_LandedAccount::kAvatarFieldNumber;
const int AFP_LandedAccount::kCommonTerminalFieldNumber;
const int AFP_LandedAccount::kMobilePhoneFieldNumber;
const int AFP_LandedAccount::kIsOverdueFieldNumber;
const int AFP_LandedAccount::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

AFP_LandedAccount::AFP_LandedAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.AFP_LandedAccount)
}

void AFP_LandedAccount::InitAsDefaultInstance() {
}

AFP_LandedAccount::AFP_LandedAccount(const AFP_LandedAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.AFP_LandedAccount)
}

void AFP_LandedAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  age_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_overdue_ = false;
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AFP_LandedAccount::~AFP_LandedAccount() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.AFP_LandedAccount)
  SharedDtor();
}

void AFP_LandedAccount::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete common_terminal_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (this != default_instance_) {
  }
}

void AFP_LandedAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AFP_LandedAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AFP_LandedAccount_descriptor_;
}

const AFP_LandedAccount& AFP_LandedAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

AFP_LandedAccount* AFP_LandedAccount::default_instance_ = NULL;

AFP_LandedAccount* AFP_LandedAccount::New() const {
  return new AFP_LandedAccount;
}

void AFP_LandedAccount::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    sex_ = 1;
    age_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_common_terminal()) {
      if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        common_terminal_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    is_overdue_ = false;
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_login_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AFP_LandedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.AFP_LandedAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 2;
      case 2: {
        if (tag == 18) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional bytes id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional int32 age = 5;
      case 5: {
        if (tag == 40) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_common_terminal;
        break;
      }

      // optional bytes common_terminal = 7;
      case 7: {
        if (tag == 58) {
         parse_common_terminal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_common_terminal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 8;
      case 8: {
        if (tag == 66) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_overdue;
        break;
      }

      // optional bool is_overdue = 9;
      case 9: {
        if (tag == 72) {
         parse_is_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_overdue_)));
          set_has_is_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_last_login_time;
        break;
      }

      // optional bytes last_login_time = 10;
      case 10: {
        if (tag == 82) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_login_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.AFP_LandedAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.AFP_LandedAccount)
  return false;
#undef DO_
}

void AFP_LandedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.AFP_LandedAccount)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nickname(), output);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->real_name(), output);
  }

  // optional bytes id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id(), output);
  }

  // optional .common.sex sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sex(), output);
  }

  // optional int32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->age(), output);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->avatar(), output);
  }

  // optional bytes common_terminal = 7;
  if (has_common_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->common_terminal(), output);
  }

  // optional bytes mobile_phone = 8;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->mobile_phone(), output);
  }

  // optional bool is_overdue = 9;
  if (has_is_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_overdue(), output);
  }

  // optional bytes last_login_time = 10;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->last_login_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.AFP_LandedAccount)
}

::google::protobuf::uint8* AFP_LandedAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.AFP_LandedAccount)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nickname(), target);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->real_name(), target);
  }

  // optional bytes id = 3;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id(), target);
  }

  // optional .common.sex sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sex(), target);
  }

  // optional int32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->age(), target);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->avatar(), target);
  }

  // optional bytes common_terminal = 7;
  if (has_common_terminal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->common_terminal(), target);
  }

  // optional bytes mobile_phone = 8;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->mobile_phone(), target);
  }

  // optional bool is_overdue = 9;
  if (has_is_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_overdue(), target);
  }

  // optional bytes last_login_time = 10;
  if (has_last_login_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->last_login_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.AFP_LandedAccount)
  return target;
}

int AFP_LandedAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional .common.sex sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional bytes avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes common_terminal = 7;
    if (has_common_terminal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->common_terminal());
    }

    // optional bytes mobile_phone = 8;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_overdue = 9;
    if (has_is_overdue()) {
      total_size += 1 + 1;
    }

    // optional bytes last_login_time = 10;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_login_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AFP_LandedAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AFP_LandedAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AFP_LandedAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AFP_LandedAccount::MergeFrom(const AFP_LandedAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_common_terminal()) {
      set_common_terminal(from.common_terminal());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_overdue()) {
      set_is_overdue(from.is_overdue());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AFP_LandedAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AFP_LandedAccount::CopyFrom(const AFP_LandedAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AFP_LandedAccount::IsInitialized() const {

  return true;
}

void AFP_LandedAccount::Swap(AFP_LandedAccount* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(real_name_, other->real_name_);
    std::swap(id_, other->id_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(avatar_, other->avatar_);
    std::swap(common_terminal_, other->common_terminal_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(is_overdue_, other->is_overdue_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AFP_LandedAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AFP_LandedAccount_descriptor_;
  metadata.reflection = AFP_LandedAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phone_contacts_info::kNoteNameFieldNumber;
const int phone_contacts_info::kMobilePhoneFieldNumber;
const int phone_contacts_info::kIsKinshipFieldNumber;
const int phone_contacts_info::kIsRemovedFieldNumber;
const int phone_contacts_info::kRemoveTimeFieldNumber;
#endif  // !_MSC_VER

phone_contacts_info::phone_contacts_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.phone_contacts_info)
}

void phone_contacts_info::InitAsDefaultInstance() {
}

phone_contacts_info::phone_contacts_info(const phone_contacts_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.phone_contacts_info)
}

void phone_contacts_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  note_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_kinship_ = false;
  is_removed_ = false;
  remove_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phone_contacts_info::~phone_contacts_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.phone_contacts_info)
  SharedDtor();
}

void phone_contacts_info::SharedDtor() {
  if (note_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (remove_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remove_time_;
  }
  if (this != default_instance_) {
  }
}

void phone_contacts_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phone_contacts_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phone_contacts_info_descriptor_;
}

const phone_contacts_info& phone_contacts_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

phone_contacts_info* phone_contacts_info::default_instance_ = NULL;

phone_contacts_info* phone_contacts_info::New() const {
  return new phone_contacts_info;
}

void phone_contacts_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<phone_contacts_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(is_kinship_, is_removed_);
    if (has_note_name()) {
      if (note_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_remove_time()) {
      if (remove_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remove_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phone_contacts_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.phone_contacts_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes note_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_note_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_kinship;
        break;
      }

      // optional bool is_kinship = 3;
      case 3: {
        if (tag == 24) {
         parse_is_kinship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kinship_)));
          set_has_is_kinship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_removed;
        break;
      }

      // optional bool is_removed = 4;
      case 4: {
        if (tag == 32) {
         parse_is_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_removed_)));
          set_has_is_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remove_time;
        break;
      }

      // optional bytes remove_time = 5;
      case 5: {
        if (tag == 42) {
         parse_remove_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remove_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.phone_contacts_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.phone_contacts_info)
  return false;
#undef DO_
}

void phone_contacts_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.phone_contacts_info)
  // optional bytes note_name = 1;
  if (has_note_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->note_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bool is_kinship = 3;
  if (has_is_kinship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_kinship(), output);
  }

  // optional bool is_removed = 4;
  if (has_is_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_removed(), output);
  }

  // optional bytes remove_time = 5;
  if (has_remove_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->remove_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.phone_contacts_info)
}

::google::protobuf::uint8* phone_contacts_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.phone_contacts_info)
  // optional bytes note_name = 1;
  if (has_note_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->note_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bool is_kinship = 3;
  if (has_is_kinship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_kinship(), target);
  }

  // optional bool is_removed = 4;
  if (has_is_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_removed(), target);
  }

  // optional bytes remove_time = 5;
  if (has_remove_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->remove_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.phone_contacts_info)
  return target;
}

int phone_contacts_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes note_name = 1;
    if (has_note_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->note_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bool is_kinship = 3;
    if (has_is_kinship()) {
      total_size += 1 + 1;
    }

    // optional bool is_removed = 4;
    if (has_is_removed()) {
      total_size += 1 + 1;
    }

    // optional bytes remove_time = 5;
    if (has_remove_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remove_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phone_contacts_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phone_contacts_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phone_contacts_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phone_contacts_info::MergeFrom(const phone_contacts_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_note_name()) {
      set_note_name(from.note_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_is_kinship()) {
      set_is_kinship(from.is_kinship());
    }
    if (from.has_is_removed()) {
      set_is_removed(from.is_removed());
    }
    if (from.has_remove_time()) {
      set_remove_time(from.remove_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phone_contacts_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phone_contacts_info::CopyFrom(const phone_contacts_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phone_contacts_info::IsInitialized() const {

  return true;
}

void phone_contacts_info::Swap(phone_contacts_info* other) {
  if (other != this) {
    std::swap(note_name_, other->note_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(is_kinship_, other->is_kinship_);
    std::swap(is_removed_, other->is_removed_);
    std::swap(remove_time_, other->remove_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phone_contacts_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phone_contacts_info_descriptor_;
  metadata.reflection = phone_contacts_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int platform_register_user_info::kAdressbookNameFieldNumber;
const int platform_register_user_info::kPhoneNumFieldNumber;
const int platform_register_user_info::kPlatfomTypeEnumFieldNumber;
const int platform_register_user_info::kOverdueTypeEnumFieldNumber;
#endif  // !_MSC_VER

platform_register_user_info::platform_register_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.platform_register_user_info)
}

void platform_register_user_info::InitAsDefaultInstance() {
}

platform_register_user_info::platform_register_user_info(const platform_register_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.platform_register_user_info)
}

void platform_register_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adressbook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platfom_type_enum_ = 1;
  overdue_type_enum_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

platform_register_user_info::~platform_register_user_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.platform_register_user_info)
  SharedDtor();
}

void platform_register_user_info::SharedDtor() {
  if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_name_;
  }
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (this != default_instance_) {
  }
}

void platform_register_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* platform_register_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return platform_register_user_info_descriptor_;
}

const platform_register_user_info& platform_register_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

platform_register_user_info* platform_register_user_info::default_instance_ = NULL;

platform_register_user_info* platform_register_user_info::New() const {
  return new platform_register_user_info;
}

void platform_register_user_info::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_adressbook_name()) {
      if (adressbook_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adressbook_name_->clear();
      }
    }
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_num_->clear();
      }
    }
    platfom_type_enum_ = 1;
    overdue_type_enum_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool platform_register_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.platform_register_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes adressbook_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adressbook_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional bytes phone_num = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platfom_type_enum;
        break;
      }

      // optional .AFP_main_frame.platform_type platfom_type_enum = 3;
      case 3: {
        if (tag == 24) {
         parse_platfom_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::platform_type_IsValid(value)) {
            set_platfom_type_enum(static_cast< ::AFP_main_frame::platform_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overdue_type_enum;
        break;
      }

      // optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
      case 4: {
        if (tag == 32) {
         parse_overdue_type_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::overdue_type_IsValid(value)) {
            set_overdue_type_enum(static_cast< ::AFP_main_frame::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.platform_register_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.platform_register_user_info)
  return false;
#undef DO_
}

void platform_register_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.platform_register_user_info)
  // optional bytes adressbook_name = 1;
  if (has_adressbook_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->adressbook_name(), output);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone_num(), output);
  }

  // optional .AFP_main_frame.platform_type platfom_type_enum = 3;
  if (has_platfom_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platfom_type_enum(), output);
  }

  // optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
  if (has_overdue_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->overdue_type_enum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.platform_register_user_info)
}

::google::protobuf::uint8* platform_register_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.platform_register_user_info)
  // optional bytes adressbook_name = 1;
  if (has_adressbook_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->adressbook_name(), target);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone_num(), target);
  }

  // optional .AFP_main_frame.platform_type platfom_type_enum = 3;
  if (has_platfom_type_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platfom_type_enum(), target);
  }

  // optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
  if (has_overdue_type_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->overdue_type_enum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.platform_register_user_info)
  return target;
}

int platform_register_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes adressbook_name = 1;
    if (has_adressbook_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->adressbook_name());
    }

    // optional bytes phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_num());
    }

    // optional .AFP_main_frame.platform_type platfom_type_enum = 3;
    if (has_platfom_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platfom_type_enum());
    }

    // optional .AFP_main_frame.overdue_type overdue_type_enum = 4;
    if (has_overdue_type_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->overdue_type_enum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void platform_register_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const platform_register_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const platform_register_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void platform_register_user_info::MergeFrom(const platform_register_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adressbook_name()) {
      set_adressbook_name(from.adressbook_name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_platfom_type_enum()) {
      set_platfom_type_enum(from.platfom_type_enum());
    }
    if (from.has_overdue_type_enum()) {
      set_overdue_type_enum(from.overdue_type_enum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void platform_register_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void platform_register_user_info::CopyFrom(const platform_register_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool platform_register_user_info::IsInitialized() const {

  return true;
}

void platform_register_user_info::Swap(platform_register_user_info* other) {
  if (other != this) {
    std::swap(adressbook_name_, other->adressbook_name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(platfom_type_enum_, other->platfom_type_enum_);
    std::swap(overdue_type_enum_, other->overdue_type_enum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata platform_register_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = platform_register_user_info_descriptor_;
  metadata.reflection = platform_register_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phone_info::kImeiFieldNumber;
const int phone_info::kBrandModelFieldNumber;
const int phone_info::kIsCommonUseFieldNumber;
const int phone_info::kLastLoginTimeFieldNumber;
const int phone_info::kInfoFieldNumber;
const int phone_info::kLandedaccountFieldNumber;
const int phone_info::kPlatformRegisterUserFieldNumber;
#endif  // !_MSC_VER

phone_info::phone_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.phone_info)
}

void phone_info::InitAsDefaultInstance() {
}

phone_info::phone_info(const phone_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.phone_info)
}

void phone_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_common_use_ = false;
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phone_info::~phone_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.phone_info)
  SharedDtor();
}

void phone_info::SharedDtor() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (brand_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete brand_model_;
  }
  if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_login_time_;
  }
  if (this != default_instance_) {
  }
}

void phone_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phone_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phone_info_descriptor_;
}

const phone_info& phone_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

phone_info* phone_info::default_instance_ = NULL;

phone_info* phone_info::New() const {
  return new phone_info;
}

void phone_info::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_brand_model()) {
      if (brand_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        brand_model_->clear();
      }
    }
    is_common_use_ = false;
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_login_time_->clear();
      }
    }
  }
  info_.Clear();
  landedaccount_.Clear();
  platform_register_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phone_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.phone_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes imei = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imei()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brand_model;
        break;
      }

      // optional bytes brand_model = 2;
      case 2: {
        if (tag == 18) {
         parse_brand_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_brand_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_common_use;
        break;
      }

      // optional bool is_common_use = 3;
      case 3: {
        if (tag == 24) {
         parse_is_common_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_common_use_)));
          set_has_is_common_use();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_login_time;
        break;
      }

      // optional bytes last_login_time = 4;
      case 4: {
        if (tag == 34) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_login_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .AFP_main_frame.phone_contacts_info info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectTag(50)) goto parse_landedaccount;
        break;
      }

      // repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
      case 6: {
        if (tag == 50) {
         parse_landedaccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landedaccount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_landedaccount;
        if (input->ExpectTag(58)) goto parse_platform_register_user;
        break;
      }

      // repeated .DW_Location.platform_register_user_info platform_register_user = 7;
      case 7: {
        if (tag == 58) {
         parse_platform_register_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_platform_register_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_platform_register_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.phone_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.phone_info)
  return false;
#undef DO_
}

void phone_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.phone_info)
  // optional bytes imei = 1;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->imei(), output);
  }

  // optional bytes brand_model = 2;
  if (has_brand_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->brand_model(), output);
  }

  // optional bool is_common_use = 3;
  if (has_is_common_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_common_use(), output);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_login_time(), output);
  }

  // repeated .AFP_main_frame.phone_contacts_info info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  // repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
  for (int i = 0; i < this->landedaccount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->landedaccount(i), output);
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 7;
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->platform_register_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.phone_info)
}

::google::protobuf::uint8* phone_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.phone_info)
  // optional bytes imei = 1;
  if (has_imei()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->imei(), target);
  }

  // optional bytes brand_model = 2;
  if (has_brand_model()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->brand_model(), target);
  }

  // optional bool is_common_use = 3;
  if (has_is_common_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_common_use(), target);
  }

  // optional bytes last_login_time = 4;
  if (has_last_login_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_login_time(), target);
  }

  // repeated .AFP_main_frame.phone_contacts_info info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  // repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
  for (int i = 0; i < this->landedaccount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->landedaccount(i), target);
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 7;
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->platform_register_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.phone_info)
  return target;
}

int phone_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes imei = 1;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imei());
    }

    // optional bytes brand_model = 2;
    if (has_brand_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->brand_model());
    }

    // optional bool is_common_use = 3;
    if (has_is_common_use()) {
      total_size += 1 + 1;
    }

    // optional bytes last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->last_login_time());
    }

  }
  // repeated .AFP_main_frame.phone_contacts_info info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated .AFP_main_frame.AFP_LandedAccount landedaccount = 6;
  total_size += 1 * this->landedaccount_size();
  for (int i = 0; i < this->landedaccount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landedaccount(i));
  }

  // repeated .DW_Location.platform_register_user_info platform_register_user = 7;
  total_size += 1 * this->platform_register_user_size();
  for (int i = 0; i < this->platform_register_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->platform_register_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phone_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phone_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phone_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phone_info::MergeFrom(const phone_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  landedaccount_.MergeFrom(from.landedaccount_);
  platform_register_user_.MergeFrom(from.platform_register_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_brand_model()) {
      set_brand_model(from.brand_model());
    }
    if (from.has_is_common_use()) {
      set_is_common_use(from.is_common_use());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phone_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phone_info::CopyFrom(const phone_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phone_info::IsInitialized() const {

  return true;
}

void phone_info::Swap(phone_info* other) {
  if (other != this) {
    std::swap(imei_, other->imei_);
    std::swap(brand_model_, other->brand_model_);
    std::swap(is_common_use_, other->is_common_use_);
    std::swap(last_login_time_, other->last_login_time_);
    info_.Swap(&other->info_);
    landedaccount_.Swap(&other->landedaccount_);
    platform_register_user_.Swap(&other->platform_register_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phone_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phone_info_descriptor_;
  metadata.reflection = phone_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yuliu_common_user_info::kNameFieldNumber;
const int yuliu_common_user_info::kPhoneNumFieldNumber;
const int yuliu_common_user_info::kRelationFieldNumber;
#endif  // !_MSC_VER

yuliu_common_user_info::yuliu_common_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.yuliu_common_user_info)
}

void yuliu_common_user_info::InitAsDefaultInstance() {
}

yuliu_common_user_info::yuliu_common_user_info(const yuliu_common_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.yuliu_common_user_info)
}

void yuliu_common_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yuliu_common_user_info::~yuliu_common_user_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.yuliu_common_user_info)
  SharedDtor();
}

void yuliu_common_user_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_num_;
  }
  if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relation_;
  }
  if (this != default_instance_) {
  }
}

void yuliu_common_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yuliu_common_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yuliu_common_user_info_descriptor_;
}

const yuliu_common_user_info& yuliu_common_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

yuliu_common_user_info* yuliu_common_user_info::default_instance_ = NULL;

yuliu_common_user_info* yuliu_common_user_info::New() const {
  return new yuliu_common_user_info;
}

void yuliu_common_user_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phone_num()) {
      if (phone_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_num_->clear();
      }
    }
    if (has_relation()) {
      if (relation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yuliu_common_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.yuliu_common_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone_num;
        break;
      }

      // optional bytes phone_num = 2;
      case 2: {
        if (tag == 18) {
         parse_phone_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_num()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relation;
        break;
      }

      // optional bytes relation = 3;
      case 3: {
        if (tag == 26) {
         parse_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.yuliu_common_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.yuliu_common_user_info)
  return false;
#undef DO_
}

void yuliu_common_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.yuliu_common_user_info)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phone_num(), output);
  }

  // optional bytes relation = 3;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.yuliu_common_user_info)
}

::google::protobuf::uint8* yuliu_common_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.yuliu_common_user_info)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes phone_num = 2;
  if (has_phone_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phone_num(), target);
  }

  // optional bytes relation = 3;
  if (has_relation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.yuliu_common_user_info)
  return target;
}

int yuliu_common_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_num());
    }

    // optional bytes relation = 3;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yuliu_common_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yuliu_common_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yuliu_common_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yuliu_common_user_info::MergeFrom(const yuliu_common_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yuliu_common_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yuliu_common_user_info::CopyFrom(const yuliu_common_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yuliu_common_user_info::IsInitialized() const {

  return true;
}

void yuliu_common_user_info::Swap(yuliu_common_user_info* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yuliu_common_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yuliu_common_user_info_descriptor_;
  metadata.reflection = yuliu_common_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yuliu_platform_user_info::kAvatarFieldNumber;
const int yuliu_platform_user_info::kUserNicknameFieldNumber;
const int yuliu_platform_user_info::kRealNameFieldNumber;
const int yuliu_platform_user_info::kSexTypeFieldNumber;
const int yuliu_platform_user_info::kTypeFieldNumber;
const int yuliu_platform_user_info::kChongheRateFieldNumber;
const int yuliu_platform_user_info::kIsInAdressbookFieldNumber;
const int yuliu_platform_user_info::kAdressbookRemarkNameFieldNumber;
const int yuliu_platform_user_info::kCommInfoFieldNumber;
#endif  // !_MSC_VER

yuliu_platform_user_info::yuliu_platform_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.yuliu_platform_user_info)
}

void yuliu_platform_user_info::InitAsDefaultInstance() {
  comm_info_ = const_cast< ::AFP_main_frame::yuliu_common_user_info*>(&::AFP_main_frame::yuliu_common_user_info::default_instance());
}

yuliu_platform_user_info::yuliu_platform_user_info(const yuliu_platform_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.yuliu_platform_user_info)
}

void yuliu_platform_user_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_type_ = 1;
  type_ = 1;
  chonghe_rate_ = 0;
  is_in_adressbook_ = false;
  adressbook_remark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comm_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yuliu_platform_user_info::~yuliu_platform_user_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.yuliu_platform_user_info)
  SharedDtor();
}

void yuliu_platform_user_info::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adressbook_remark_name_;
  }
  if (this != default_instance_) {
    delete comm_info_;
  }
}

void yuliu_platform_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yuliu_platform_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yuliu_platform_user_info_descriptor_;
}

const yuliu_platform_user_info& yuliu_platform_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

yuliu_platform_user_info* yuliu_platform_user_info::default_instance_ = NULL;

yuliu_platform_user_info* yuliu_platform_user_info::New() const {
  return new yuliu_platform_user_info;
}

void yuliu_platform_user_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<yuliu_platform_user_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(chonghe_rate_, is_in_adressbook_);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_user_nickname()) {
      if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_nickname_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    sex_type_ = 1;
    type_ = 1;
    if (has_adressbook_remark_name()) {
      if (adressbook_remark_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        adressbook_remark_name_->clear();
      }
    }
  }
  if (has_comm_info()) {
    if (comm_info_ != NULL) comm_info_->::AFP_main_frame::yuliu_common_user_info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yuliu_platform_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.yuliu_platform_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes avatar = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_nickname;
        break;
      }

      // optional bytes user_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_user_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 3;
      case 3: {
        if (tag == 26) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex_type;
        break;
      }

      // optional .common.sex sex_type = 4;
      case 4: {
        if (tag == 32) {
         parse_sex_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex_type(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .AFP_main_frame.overdue_type type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::overdue_type_IsValid(value)) {
            set_type(static_cast< ::AFP_main_frame::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_chonghe_rate;
        break;
      }

      // optional float chonghe_rate = 6;
      case 6: {
        if (tag == 53) {
         parse_chonghe_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chonghe_rate_)));
          set_has_chonghe_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_in_adressbook;
        break;
      }

      // optional bool is_in_adressbook = 7;
      case 7: {
        if (tag == 56) {
         parse_is_in_adressbook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_adressbook_)));
          set_has_is_in_adressbook();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_adressbook_remark_name;
        break;
      }

      // optional bytes adressbook_remark_name = 8;
      case 8: {
        if (tag == 66) {
         parse_adressbook_remark_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adressbook_remark_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_comm_info;
        break;
      }

      // optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
      case 9: {
        if (tag == 74) {
         parse_comm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.yuliu_platform_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.yuliu_platform_user_info)
  return false;
#undef DO_
}

void yuliu_platform_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.yuliu_platform_user_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->avatar(), output);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_nickname(), output);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->real_name(), output);
  }

  // optional .common.sex sex_type = 4;
  if (has_sex_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sex_type(), output);
  }

  // optional .AFP_main_frame.overdue_type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional float chonghe_rate = 6;
  if (has_chonghe_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->chonghe_rate(), output);
  }

  // optional bool is_in_adressbook = 7;
  if (has_is_in_adressbook()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_in_adressbook(), output);
  }

  // optional bytes adressbook_remark_name = 8;
  if (has_adressbook_remark_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->adressbook_remark_name(), output);
  }

  // optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
  if (has_comm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->comm_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.yuliu_platform_user_info)
}

::google::protobuf::uint8* yuliu_platform_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.yuliu_platform_user_info)
  // optional bytes avatar = 1;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->avatar(), target);
  }

  // optional bytes user_nickname = 2;
  if (has_user_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_nickname(), target);
  }

  // optional bytes real_name = 3;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->real_name(), target);
  }

  // optional .common.sex sex_type = 4;
  if (has_sex_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sex_type(), target);
  }

  // optional .AFP_main_frame.overdue_type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional float chonghe_rate = 6;
  if (has_chonghe_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->chonghe_rate(), target);
  }

  // optional bool is_in_adressbook = 7;
  if (has_is_in_adressbook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_in_adressbook(), target);
  }

  // optional bytes adressbook_remark_name = 8;
  if (has_adressbook_remark_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->adressbook_remark_name(), target);
  }

  // optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
  if (has_comm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->comm_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.yuliu_platform_user_info)
  return target;
}

int yuliu_platform_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes avatar = 1;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes user_nickname = 2;
    if (has_user_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_nickname());
    }

    // optional bytes real_name = 3;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional .common.sex sex_type = 4;
    if (has_sex_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex_type());
    }

    // optional .AFP_main_frame.overdue_type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float chonghe_rate = 6;
    if (has_chonghe_rate()) {
      total_size += 1 + 4;
    }

    // optional bool is_in_adressbook = 7;
    if (has_is_in_adressbook()) {
      total_size += 1 + 1;
    }

    // optional bytes adressbook_remark_name = 8;
    if (has_adressbook_remark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->adressbook_remark_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .AFP_main_frame.yuliu_common_user_info comm_info = 9;
    if (has_comm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comm_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yuliu_platform_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yuliu_platform_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yuliu_platform_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yuliu_platform_user_info::MergeFrom(const yuliu_platform_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_user_nickname()) {
      set_user_nickname(from.user_nickname());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_sex_type()) {
      set_sex_type(from.sex_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chonghe_rate()) {
      set_chonghe_rate(from.chonghe_rate());
    }
    if (from.has_is_in_adressbook()) {
      set_is_in_adressbook(from.is_in_adressbook());
    }
    if (from.has_adressbook_remark_name()) {
      set_adressbook_remark_name(from.adressbook_remark_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comm_info()) {
      mutable_comm_info()->::AFP_main_frame::yuliu_common_user_info::MergeFrom(from.comm_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yuliu_platform_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yuliu_platform_user_info::CopyFrom(const yuliu_platform_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yuliu_platform_user_info::IsInitialized() const {

  return true;
}

void yuliu_platform_user_info::Swap(yuliu_platform_user_info* other) {
  if (other != this) {
    std::swap(avatar_, other->avatar_);
    std::swap(user_nickname_, other->user_nickname_);
    std::swap(real_name_, other->real_name_);
    std::swap(sex_type_, other->sex_type_);
    std::swap(type_, other->type_);
    std::swap(chonghe_rate_, other->chonghe_rate_);
    std::swap(is_in_adressbook_, other->is_in_adressbook_);
    std::swap(adressbook_remark_name_, other->adressbook_remark_name_);
    std::swap(comm_info_, other->comm_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yuliu_platform_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yuliu_platform_user_info_descriptor_;
  metadata.reflection = yuliu_platform_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phones_info::kNicknameFieldNumber;
const int phones_info::kRealNameFieldNumber;
const int phones_info::kIdFieldNumber;
const int phones_info::kSexFieldNumber;
const int phones_info::kAgeFieldNumber;
const int phones_info::kAvatarFieldNumber;
const int phones_info::kCommonTerminalFieldNumber;
const int phones_info::kMobilePhoneFieldNumber;
const int phones_info::kIsOverdueFieldNumber;
const int phones_info::kTypeFieldNumber;
const int phones_info::kAddressFieldNumber;
const int phones_info::kListFieldNumber;
const int phones_info::kYuliuCommonUserFieldNumber;
const int phones_info::kYuliuPlatformUserFieldNumber;
#endif  // !_MSC_VER

phones_info::phones_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.phones_info)
}

void phones_info::InitAsDefaultInstance() {
}

phones_info::phones_info(const phones_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.phones_info)
}

void phones_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  age_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_terminal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_overdue_ = false;
  type_ = 1;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phones_info::~phones_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.phones_info)
  SharedDtor();
}

void phones_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete common_terminal_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void phones_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phones_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phones_info_descriptor_;
}

const phones_info& phones_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

phones_info* phones_info::default_instance_ = NULL;

phones_info* phones_info::New() const {
  return new phones_info;
}

void phones_info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    sex_ = 1;
    age_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_common_terminal()) {
      if (common_terminal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        common_terminal_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    is_overdue_ = false;
    type_ = 1;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  list_.Clear();
  yuliu_common_user_.Clear();
  yuliu_platform_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phones_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.phones_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }

      // optional bytes real_name = 2;
      case 2: {
        if (tag == 18) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional bytes id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional int32 age = 5;
      case 5: {
        if (tag == 40) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_common_terminal;
        break;
      }

      // optional bytes common_terminal = 7;
      case 7: {
        if (tag == 58) {
         parse_common_terminal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_common_terminal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 8;
      case 8: {
        if (tag == 66) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_overdue;
        break;
      }

      // optional bool is_overdue = 9;
      case 9: {
        if (tag == 72) {
         parse_is_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_overdue_)));
          set_has_is_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional .DW_Location.overdue_type type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DW_Location::overdue_type_IsValid(value)) {
            set_type(static_cast< ::DW_Location::overdue_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_address;
        break;
      }

      // optional bytes address = 11;
      case 11: {
        if (tag == 90) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_list;
        break;
      }

      // repeated .AFP_main_frame.phone_info list = 12;
      case 12: {
        if (tag == 98) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_list;
        if (input->ExpectTag(106)) goto parse_yuliu_common_user;
        break;
      }

      // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
      case 13: {
        if (tag == 106) {
         parse_yuliu_common_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yuliu_common_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_yuliu_common_user;
        if (input->ExpectTag(114)) goto parse_yuliu_platform_user;
        break;
      }

      // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
      case 14: {
        if (tag == 114) {
         parse_yuliu_platform_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yuliu_platform_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_yuliu_platform_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.phones_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.phones_info)
  return false;
#undef DO_
}

void phones_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.phones_info)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nickname(), output);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->real_name(), output);
  }

  // optional bytes id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id(), output);
  }

  // optional .common.sex sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sex(), output);
  }

  // optional int32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->age(), output);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->avatar(), output);
  }

  // optional bytes common_terminal = 7;
  if (has_common_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->common_terminal(), output);
  }

  // optional bytes mobile_phone = 8;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->mobile_phone(), output);
  }

  // optional bool is_overdue = 9;
  if (has_is_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_overdue(), output);
  }

  // optional .DW_Location.overdue_type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional bytes address = 11;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->address(), output);
  }

  // repeated .AFP_main_frame.phone_info list = 12;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->list(i), output);
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->yuliu_common_user(i), output);
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->yuliu_platform_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.phones_info)
}

::google::protobuf::uint8* phones_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.phones_info)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nickname(), target);
  }

  // optional bytes real_name = 2;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->real_name(), target);
  }

  // optional bytes id = 3;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id(), target);
  }

  // optional .common.sex sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sex(), target);
  }

  // optional int32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->age(), target);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->avatar(), target);
  }

  // optional bytes common_terminal = 7;
  if (has_common_terminal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->common_terminal(), target);
  }

  // optional bytes mobile_phone = 8;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->mobile_phone(), target);
  }

  // optional bool is_overdue = 9;
  if (has_is_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_overdue(), target);
  }

  // optional .DW_Location.overdue_type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional bytes address = 11;
  if (has_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->address(), target);
  }

  // repeated .AFP_main_frame.phone_info list = 12;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->list(i), target);
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->yuliu_common_user(i), target);
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->yuliu_platform_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.phones_info)
  return target;
}

int phones_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional .common.sex sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional bytes avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes common_terminal = 7;
    if (has_common_terminal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->common_terminal());
    }

    // optional bytes mobile_phone = 8;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_overdue = 9;
    if (has_is_overdue()) {
      total_size += 1 + 1;
    }

    // optional .DW_Location.overdue_type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes address = 11;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

  }
  // repeated .AFP_main_frame.phone_info list = 12;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .DW_Location.yuliu_common_user_info yuliu_common_user = 13;
  total_size += 1 * this->yuliu_common_user_size();
  for (int i = 0; i < this->yuliu_common_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yuliu_common_user(i));
  }

  // repeated .DW_Location.yuliu_platform_user_info yuliu_platform_user = 14;
  total_size += 1 * this->yuliu_platform_user_size();
  for (int i = 0; i < this->yuliu_platform_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yuliu_platform_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phones_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phones_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phones_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phones_info::MergeFrom(const phones_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  yuliu_common_user_.MergeFrom(from.yuliu_common_user_);
  yuliu_platform_user_.MergeFrom(from.yuliu_platform_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_common_terminal()) {
      set_common_terminal(from.common_terminal());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_overdue()) {
      set_is_overdue(from.is_overdue());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phones_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phones_info::CopyFrom(const phones_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phones_info::IsInitialized() const {

  return true;
}

void phones_info::Swap(phones_info* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(real_name_, other->real_name_);
    std::swap(id_, other->id_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(avatar_, other->avatar_);
    std::swap(common_terminal_, other->common_terminal_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(is_overdue_, other->is_overdue_);
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    list_.Swap(&other->list_);
    yuliu_common_user_.Swap(&other->yuliu_common_user_);
    yuliu_platform_user_.Swap(&other->yuliu_platform_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phones_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phones_info_descriptor_;
  metadata.reflection = phones_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phone_contacts_analyze_ask::kIdNoFieldNumber;
const int phone_contacts_analyze_ask::kMobilePhoneFieldNumber;
const int phone_contacts_analyze_ask::kAskHeaderFieldNumber;
const int phone_contacts_analyze_ask::kIsNormalFieldNumber;
#endif  // !_MSC_VER

phone_contacts_analyze_ask::phone_contacts_analyze_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.phone_contacts_analyze_ask)
}

void phone_contacts_analyze_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

phone_contacts_analyze_ask::phone_contacts_analyze_ask(const phone_contacts_analyze_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.phone_contacts_analyze_ask)
}

void phone_contacts_analyze_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phone_contacts_analyze_ask::~phone_contacts_analyze_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.phone_contacts_analyze_ask)
  SharedDtor();
}

void phone_contacts_analyze_ask::SharedDtor() {
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void phone_contacts_analyze_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phone_contacts_analyze_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phone_contacts_analyze_ask_descriptor_;
}

const phone_contacts_analyze_ask& phone_contacts_analyze_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

phone_contacts_analyze_ask* phone_contacts_analyze_ask::default_instance_ = NULL;

phone_contacts_analyze_ask* phone_contacts_analyze_ask::New() const {
  return new phone_contacts_analyze_ask;
}

void phone_contacts_analyze_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_is_normal()) {
      if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        is_normal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phone_contacts_analyze_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.phone_contacts_analyze_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id_no = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_is_normal;
        break;
      }

      // optional bytes is_normal = 4;
      case 4: {
        if (tag == 34) {
         parse_is_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_is_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.phone_contacts_analyze_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.phone_contacts_analyze_ask)
  return false;
#undef DO_
}

void phone_contacts_analyze_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.phone_contacts_analyze_ask)
  // optional bytes id_no = 1;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id_no(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  // optional bytes is_normal = 4;
  if (has_is_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->is_normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.phone_contacts_analyze_ask)
}

::google::protobuf::uint8* phone_contacts_analyze_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.phone_contacts_analyze_ask)
  // optional bytes id_no = 1;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id_no(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  // optional bytes is_normal = 4;
  if (has_is_normal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->is_normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.phone_contacts_analyze_ask)
  return target;
}

int phone_contacts_analyze_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes id_no = 1;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes is_normal = 4;
    if (has_is_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->is_normal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phone_contacts_analyze_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phone_contacts_analyze_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phone_contacts_analyze_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phone_contacts_analyze_ask::MergeFrom(const phone_contacts_analyze_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_is_normal()) {
      set_is_normal(from.is_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phone_contacts_analyze_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phone_contacts_analyze_ask::CopyFrom(const phone_contacts_analyze_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phone_contacts_analyze_ask::IsInitialized() const {

  return true;
}

void phone_contacts_analyze_ask::Swap(phone_contacts_analyze_ask* other) {
  if (other != this) {
    std::swap(id_no_, other->id_no_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(is_normal_, other->is_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phone_contacts_analyze_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phone_contacts_analyze_ask_descriptor_;
  metadata.reflection = phone_contacts_analyze_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phone_contacts_analyze_ans::kInfoFieldNumber;
const int phone_contacts_analyze_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

phone_contacts_analyze_ans::phone_contacts_analyze_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.phone_contacts_analyze_ans)
}

void phone_contacts_analyze_ans::InitAsDefaultInstance() {
  info_ = const_cast< ::AFP_main_frame::phones_info*>(&::AFP_main_frame::phones_info::default_instance());
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

phone_contacts_analyze_ans::phone_contacts_analyze_ans(const phone_contacts_analyze_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.phone_contacts_analyze_ans)
}

void phone_contacts_analyze_ans::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phone_contacts_analyze_ans::~phone_contacts_analyze_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.phone_contacts_analyze_ans)
  SharedDtor();
}

void phone_contacts_analyze_ans::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete error_;
  }
}

void phone_contacts_analyze_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phone_contacts_analyze_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phone_contacts_analyze_ans_descriptor_;
}

const phone_contacts_analyze_ans& phone_contacts_analyze_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

phone_contacts_analyze_ans* phone_contacts_analyze_ans::default_instance_ = NULL;

phone_contacts_analyze_ans* phone_contacts_analyze_ans::New() const {
  return new phone_contacts_analyze_ans;
}

void phone_contacts_analyze_ans::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::AFP_main_frame::phones_info::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phone_contacts_analyze_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.phone_contacts_analyze_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AFP_main_frame.phones_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.phone_contacts_analyze_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.phone_contacts_analyze_ans)
  return false;
#undef DO_
}

void phone_contacts_analyze_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.phone_contacts_analyze_ans)
  // optional .AFP_main_frame.phones_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.phone_contacts_analyze_ans)
}

::google::protobuf::uint8* phone_contacts_analyze_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.phone_contacts_analyze_ans)
  // optional .AFP_main_frame.phones_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.phone_contacts_analyze_ans)
  return target;
}

int phone_contacts_analyze_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AFP_main_frame.phones_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phone_contacts_analyze_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phone_contacts_analyze_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phone_contacts_analyze_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phone_contacts_analyze_ans::MergeFrom(const phone_contacts_analyze_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::AFP_main_frame::phones_info::MergeFrom(from.info());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phone_contacts_analyze_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phone_contacts_analyze_ans::CopyFrom(const phone_contacts_analyze_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phone_contacts_analyze_ans::IsInitialized() const {

  return true;
}

void phone_contacts_analyze_ans::Swap(phone_contacts_analyze_ans* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phone_contacts_analyze_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phone_contacts_analyze_ans_descriptor_;
  metadata.reflection = phone_contacts_analyze_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int function_verification_in::kInfoFieldNumber;
const int function_verification_in::kNumberFieldNumber;
#endif  // !_MSC_VER

function_verification_in::function_verification_in()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.function_verification_in)
}

void function_verification_in::InitAsDefaultInstance() {
  info_ = const_cast< ::QDP_basic_info::user_basic_info*>(&::QDP_basic_info::user_basic_info::default_instance());
}

function_verification_in::function_verification_in(const function_verification_in& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.function_verification_in)
}

void function_verification_in::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

function_verification_in::~function_verification_in() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.function_verification_in)
  SharedDtor();
}

void function_verification_in::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void function_verification_in::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* function_verification_in::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return function_verification_in_descriptor_;
}

const function_verification_in& function_verification_in::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

function_verification_in* function_verification_in::default_instance_ = NULL;

function_verification_in* function_verification_in::New() const {
  return new function_verification_in;
}

void function_verification_in::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_info()) {
      if (info_ != NULL) info_->::QDP_basic_info::user_basic_info::Clear();
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool function_verification_in::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.function_verification_in)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QDP_basic_info.user_basic_info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional .AFP_main_frame.function_serial_number number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::function_serial_number_IsValid(value)) {
            set_number(static_cast< ::AFP_main_frame::function_serial_number >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.function_verification_in)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.function_verification_in)
  return false;
#undef DO_
}

void function_verification_in::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.function_verification_in)
  // optional .QDP_basic_info.user_basic_info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .AFP_main_frame.function_serial_number number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.function_verification_in)
}

::google::protobuf::uint8* function_verification_in::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.function_verification_in)
  // optional .QDP_basic_info.user_basic_info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .AFP_main_frame.function_serial_number number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.function_verification_in)
  return target;
}

int function_verification_in::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QDP_basic_info.user_basic_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .AFP_main_frame.function_serial_number number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void function_verification_in::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const function_verification_in* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const function_verification_in*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void function_verification_in::MergeFrom(const function_verification_in& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::QDP_basic_info::user_basic_info::MergeFrom(from.info());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void function_verification_in::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void function_verification_in::CopyFrom(const function_verification_in& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool function_verification_in::IsInitialized() const {

  return true;
}

void function_verification_in::Swap(function_verification_in* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata function_verification_in::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = function_verification_in_descriptor_;
  metadata.reflection = function_verification_in_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int function_verification_out::kJsonAnsFieldNumber;
const int function_verification_out::kNumberFieldNumber;
const int function_verification_out::kResultTimeFieldNumber;
#endif  // !_MSC_VER

function_verification_out::function_verification_out()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.function_verification_out)
}

void function_verification_out::InitAsDefaultInstance() {
}

function_verification_out::function_verification_out(const function_verification_out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.function_verification_out)
}

void function_verification_out::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  json_ans_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
  result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

function_verification_out::~function_verification_out() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.function_verification_out)
  SharedDtor();
}

void function_verification_out::SharedDtor() {
  if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_ans_;
  }
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (this != default_instance_) {
  }
}

void function_verification_out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* function_verification_out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return function_verification_out_descriptor_;
}

const function_verification_out& function_verification_out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

function_verification_out* function_verification_out::default_instance_ = NULL;

function_verification_out* function_verification_out::New() const {
  return new function_verification_out;
}

void function_verification_out::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_json_ans()) {
      if (json_ans_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_ans_->clear();
      }
    }
    number_ = 0;
    if (has_result_time()) {
      if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool function_verification_out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.function_verification_out)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes json_ans = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_ans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional .AFP_main_frame.function_serial_number number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::function_serial_number_IsValid(value)) {
            set_number(static_cast< ::AFP_main_frame::function_serial_number >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result_time;
        break;
      }

      // optional bytes result_time = 3;
      case 3: {
        if (tag == 26) {
         parse_result_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.function_verification_out)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.function_verification_out)
  return false;
#undef DO_
}

void function_verification_out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.function_verification_out)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->json_ans(), output);
  }

  // optional .AFP_main_frame.function_serial_number number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->number(), output);
  }

  // optional bytes result_time = 3;
  if (has_result_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->result_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.function_verification_out)
}

::google::protobuf::uint8* function_verification_out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.function_verification_out)
  // optional bytes json_ans = 1;
  if (has_json_ans()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->json_ans(), target);
  }

  // optional .AFP_main_frame.function_serial_number number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->number(), target);
  }

  // optional bytes result_time = 3;
  if (has_result_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->result_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.function_verification_out)
  return target;
}

int function_verification_out::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes json_ans = 1;
    if (has_json_ans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_ans());
    }

    // optional .AFP_main_frame.function_serial_number number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
    }

    // optional bytes result_time = 3;
    if (has_result_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void function_verification_out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const function_verification_out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const function_verification_out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void function_verification_out::MergeFrom(const function_verification_out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_ans()) {
      set_json_ans(from.json_ans());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_result_time()) {
      set_result_time(from.result_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void function_verification_out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void function_verification_out::CopyFrom(const function_verification_out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool function_verification_out::IsInitialized() const {

  return true;
}

void function_verification_out::Swap(function_verification_out* other) {
  if (other != this) {
    std::swap(json_ans_, other->json_ans_);
    std::swap(number_, other->number_);
    std::swap(result_time_, other->result_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata function_verification_out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = function_verification_out_descriptor_;
  metadata.reflection = function_verification_out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_verification_list_ask::kFucverInFieldNumber;
const int user_verification_list_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

user_verification_list_ask::user_verification_list_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_verification_list_ask)
}

void user_verification_list_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

user_verification_list_ask::user_verification_list_ask(const user_verification_list_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_verification_list_ask)
}

void user_verification_list_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_verification_list_ask::~user_verification_list_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_verification_list_ask)
  SharedDtor();
}

void user_verification_list_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void user_verification_list_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_verification_list_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_verification_list_ask_descriptor_;
}

const user_verification_list_ask& user_verification_list_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_verification_list_ask* user_verification_list_ask::default_instance_ = NULL;

user_verification_list_ask* user_verification_list_ask::New() const {
  return new user_verification_list_ask;
}

void user_verification_list_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  fucver_in_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_verification_list_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_verification_list_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.function_verification_in fucver_in = 1;
      case 1: {
        if (tag == 10) {
         parse_fucver_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fucver_in()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fucver_in;
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_verification_list_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_verification_list_ask)
  return false;
#undef DO_
}

void user_verification_list_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_verification_list_ask)
  // repeated .AFP_main_frame.function_verification_in fucver_in = 1;
  for (int i = 0; i < this->fucver_in_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fucver_in(i), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_verification_list_ask)
}

::google::protobuf::uint8* user_verification_list_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_verification_list_ask)
  // repeated .AFP_main_frame.function_verification_in fucver_in = 1;
  for (int i = 0; i < this->fucver_in_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fucver_in(i), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_verification_list_ask)
  return target;
}

int user_verification_list_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated .AFP_main_frame.function_verification_in fucver_in = 1;
  total_size += 1 * this->fucver_in_size();
  for (int i = 0; i < this->fucver_in_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fucver_in(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_verification_list_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_verification_list_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_verification_list_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_verification_list_ask::MergeFrom(const user_verification_list_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  fucver_in_.MergeFrom(from.fucver_in_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_verification_list_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_verification_list_ask::CopyFrom(const user_verification_list_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_verification_list_ask::IsInitialized() const {

  return true;
}

void user_verification_list_ask::Swap(user_verification_list_ask* other) {
  if (other != this) {
    fucver_in_.Swap(&other->fucver_in_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_verification_list_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_verification_list_ask_descriptor_;
  metadata.reflection = user_verification_list_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_verification_list_ans::kFucverOutFieldNumber;
const int user_verification_list_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

user_verification_list_ans::user_verification_list_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_verification_list_ans)
}

void user_verification_list_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_verification_list_ans::user_verification_list_ans(const user_verification_list_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_verification_list_ans)
}

void user_verification_list_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_verification_list_ans::~user_verification_list_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_verification_list_ans)
  SharedDtor();
}

void user_verification_list_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_verification_list_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_verification_list_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_verification_list_ans_descriptor_;
}

const user_verification_list_ans& user_verification_list_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_verification_list_ans* user_verification_list_ans::default_instance_ = NULL;

user_verification_list_ans* user_verification_list_ans::New() const {
  return new user_verification_list_ans;
}

void user_verification_list_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  fucver_out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_verification_list_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_verification_list_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.function_verification_out fucver_out = 1;
      case 1: {
        if (tag == 10) {
         parse_fucver_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fucver_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fucver_out;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_verification_list_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_verification_list_ans)
  return false;
#undef DO_
}

void user_verification_list_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_verification_list_ans)
  // repeated .AFP_main_frame.function_verification_out fucver_out = 1;
  for (int i = 0; i < this->fucver_out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fucver_out(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_verification_list_ans)
}

::google::protobuf::uint8* user_verification_list_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_verification_list_ans)
  // repeated .AFP_main_frame.function_verification_out fucver_out = 1;
  for (int i = 0; i < this->fucver_out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fucver_out(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_verification_list_ans)
  return target;
}

int user_verification_list_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.function_verification_out fucver_out = 1;
  total_size += 1 * this->fucver_out_size();
  for (int i = 0; i < this->fucver_out_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fucver_out(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_verification_list_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_verification_list_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_verification_list_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_verification_list_ans::MergeFrom(const user_verification_list_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  fucver_out_.MergeFrom(from.fucver_out_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_verification_list_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_verification_list_ans::CopyFrom(const user_verification_list_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_verification_list_ans::IsInitialized() const {

  return true;
}

void user_verification_list_ans::Swap(user_verification_list_ans* other) {
  if (other != this) {
    fucver_out_.Swap(&other->fucver_out_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_verification_list_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_verification_list_ans_descriptor_;
  metadata.reflection = user_verification_list_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_info::kRealNameFieldNumber;
const int verify_info::kMobilePhoneFieldNumber;
const int verify_info::kIdNoFieldNumber;
const int verify_info::kVerifyResultFieldNumber;
const int verify_info::kInquireTimeFieldNumber;
const int verify_info::kJsonResultFieldNumber;
#endif  // !_MSC_VER

verify_info::verify_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.verify_info)
}

void verify_info::InitAsDefaultInstance() {
}

verify_info::verify_info(const verify_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.verify_info)
}

void verify_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inquire_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_info::~verify_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.verify_info)
  SharedDtor();
}

void verify_info::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verify_result_;
  }
  if (inquire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_time_;
  }
  if (json_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_result_;
  }
  if (this != default_instance_) {
  }
}

void verify_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_info_descriptor_;
}

const verify_info& verify_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

verify_info* verify_info::default_instance_ = NULL;

verify_info* verify_info::New() const {
  return new verify_info;
}

void verify_info::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_verify_result()) {
      if (verify_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verify_result_->clear();
      }
    }
    if (has_inquire_time()) {
      if (inquire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inquire_time_->clear();
      }
    }
    if (has_json_result()) {
      if (json_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.verify_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 3;
      case 3: {
        if (tag == 26) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_result;
        break;
      }

      // optional bytes verify_result = 4;
      case 4: {
        if (tag == 34) {
         parse_verify_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inquire_time;
        break;
      }

      // optional bytes inquire_time = 5;
      case 5: {
        if (tag == 42) {
         parse_inquire_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inquire_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_json_result;
        break;
      }

      // optional bytes json_result = 6;
      case 6: {
        if (tag == 50) {
         parse_json_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.verify_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.verify_info)
  return false;
#undef DO_
}

void verify_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.verify_info)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobile_phone(), output);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_no(), output);
  }

  // optional bytes verify_result = 4;
  if (has_verify_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->verify_result(), output);
  }

  // optional bytes inquire_time = 5;
  if (has_inquire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->inquire_time(), output);
  }

  // optional bytes json_result = 6;
  if (has_json_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->json_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.verify_info)
}

::google::protobuf::uint8* verify_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.verify_info)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobile_phone = 2;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobile_phone(), target);
  }

  // optional bytes id_no = 3;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_no(), target);
  }

  // optional bytes verify_result = 4;
  if (has_verify_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->verify_result(), target);
  }

  // optional bytes inquire_time = 5;
  if (has_inquire_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->inquire_time(), target);
  }

  // optional bytes json_result = 6;
  if (has_json_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->json_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.verify_info)
  return target;
}

int verify_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobile_phone = 2;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 3;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes verify_result = 4;
    if (has_verify_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verify_result());
    }

    // optional bytes inquire_time = 5;
    if (has_inquire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inquire_time());
    }

    // optional bytes json_result = 6;
    if (has_json_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_info::MergeFrom(const verify_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_verify_result()) {
      set_verify_result(from.verify_result());
    }
    if (from.has_inquire_time()) {
      set_inquire_time(from.inquire_time());
    }
    if (from.has_json_result()) {
      set_json_result(from.json_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_info::CopyFrom(const verify_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_info::IsInitialized() const {

  return true;
}

void verify_info::Swap(verify_info* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(verify_result_, other->verify_result_);
    std::swap(inquire_time_, other->inquire_time_);
    std::swap(json_result_, other->json_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_info_descriptor_;
  metadata.reflection = verify_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int batch_verify_ask::kInquireSessionFieldNumber;
const int batch_verify_ask::kListFieldNumber;
const int batch_verify_ask::kAskHeaderFieldNumber;
const int batch_verify_ask::kNumberFieldNumber;
#endif  // !_MSC_VER

batch_verify_ask::batch_verify_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.batch_verify_ask)
}

void batch_verify_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

batch_verify_ask::batch_verify_ask(const batch_verify_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.batch_verify_ask)
}

void batch_verify_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

batch_verify_ask::~batch_verify_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.batch_verify_ask)
  SharedDtor();
}

void batch_verify_ask::SharedDtor() {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_session_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void batch_verify_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* batch_verify_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return batch_verify_ask_descriptor_;
}

const batch_verify_ask& batch_verify_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

batch_verify_ask* batch_verify_ask::default_instance_ = NULL;

batch_verify_ask* batch_verify_ask::New() const {
  return new batch_verify_ask;
}

void batch_verify_ask::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_inquire_session()) {
      if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inquire_session_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  list_.Clear();
  number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool batch_verify_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.batch_verify_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes inquire_session = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inquire_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .AFP_main_frame.verify_info list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number;
        break;
      }

      // repeated .AFP_main_frame.function_serial_number number = 4;
      case 4: {
        if (tag == 32) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::function_serial_number_IsValid(value)) {
            add_number(static_cast< ::AFP_main_frame::function_serial_number >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::AFP_main_frame::function_serial_number_IsValid,
                 this->mutable_number())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_number;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.batch_verify_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.batch_verify_ask)
  return false;
#undef DO_
}

void batch_verify_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.batch_verify_ask)
  // optional bytes inquire_session = 1;
  if (has_inquire_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->inquire_session(), output);
  }

  // repeated .AFP_main_frame.verify_info list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  // repeated .AFP_main_frame.function_serial_number number = 4;
  for (int i = 0; i < this->number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->number(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.batch_verify_ask)
}

::google::protobuf::uint8* batch_verify_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.batch_verify_ask)
  // optional bytes inquire_session = 1;
  if (has_inquire_session()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->inquire_session(), target);
  }

  // repeated .AFP_main_frame.verify_info list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  // repeated .AFP_main_frame.function_serial_number number = 4;
  for (int i = 0; i < this->number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->number(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.batch_verify_ask)
  return target;
}

int batch_verify_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes inquire_session = 1;
    if (has_inquire_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inquire_session());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  // repeated .AFP_main_frame.verify_info list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .AFP_main_frame.function_serial_number number = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->number(i));
    }
    total_size += 1 * this->number_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void batch_verify_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const batch_verify_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const batch_verify_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void batch_verify_ask::MergeFrom(const batch_verify_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  number_.MergeFrom(from.number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inquire_session()) {
      set_inquire_session(from.inquire_session());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void batch_verify_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void batch_verify_ask::CopyFrom(const batch_verify_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batch_verify_ask::IsInitialized() const {

  return true;
}

void batch_verify_ask::Swap(batch_verify_ask* other) {
  if (other != this) {
    std::swap(inquire_session_, other->inquire_session_);
    list_.Swap(&other->list_);
    std::swap(ask_header_, other->ask_header_);
    number_.Swap(&other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata batch_verify_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = batch_verify_ask_descriptor_;
  metadata.reflection = batch_verify_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int batch_verify_ans::kResultStatusFieldNumber;
const int batch_verify_ans::kInquireSessionFieldNumber;
const int batch_verify_ans::kListFieldNumber;
const int batch_verify_ans::kErrorFieldNumber;
const int batch_verify_ans::kNumberFieldNumber;
#endif  // !_MSC_VER

batch_verify_ans::batch_verify_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.batch_verify_ans)
}

void batch_verify_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

batch_verify_ans::batch_verify_ans(const batch_verify_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.batch_verify_ans)
}

void batch_verify_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_status_ = 0;
  inquire_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

batch_verify_ans::~batch_verify_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.batch_verify_ans)
  SharedDtor();
}

void batch_verify_ans::SharedDtor() {
  if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inquire_session_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void batch_verify_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* batch_verify_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return batch_verify_ans_descriptor_;
}

const batch_verify_ans& batch_verify_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

batch_verify_ans* batch_verify_ans::default_instance_ = NULL;

batch_verify_ans* batch_verify_ans::New() const {
  return new batch_verify_ans;
}

void batch_verify_ans::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    result_status_ = 0;
    if (has_inquire_session()) {
      if (inquire_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inquire_session_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  list_.Clear();
  number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool batch_verify_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.batch_verify_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_status_)));
          set_has_result_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inquire_session;
        break;
      }

      // optional bytes inquire_session = 2;
      case 2: {
        if (tag == 18) {
         parse_inquire_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inquire_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .AFP_main_frame.verify_info list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // repeated .AFP_main_frame.function_serial_number number = 5;
      case 5: {
        if (tag == 40) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFP_main_frame::function_serial_number_IsValid(value)) {
            add_number(static_cast< ::AFP_main_frame::function_serial_number >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::AFP_main_frame::function_serial_number_IsValid,
                 this->mutable_number())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.batch_verify_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.batch_verify_ans)
  return false;
#undef DO_
}

void batch_verify_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.batch_verify_ans)
  // optional int32 result_status = 1;
  if (has_result_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_status(), output);
  }

  // optional bytes inquire_session = 2;
  if (has_inquire_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inquire_session(), output);
  }

  // repeated .AFP_main_frame.verify_info list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->error(), output);
  }

  // repeated .AFP_main_frame.function_serial_number number = 5;
  for (int i = 0; i < this->number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->number(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.batch_verify_ans)
}

::google::protobuf::uint8* batch_verify_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.batch_verify_ans)
  // optional int32 result_status = 1;
  if (has_result_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_status(), target);
  }

  // optional bytes inquire_session = 2;
  if (has_inquire_session()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->inquire_session(), target);
  }

  // repeated .AFP_main_frame.verify_info list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->error(), target);
  }

  // repeated .AFP_main_frame.function_serial_number number = 5;
  for (int i = 0; i < this->number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->number(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.batch_verify_ans)
  return target;
}

int batch_verify_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_status = 1;
    if (has_result_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_status());
    }

    // optional bytes inquire_session = 2;
    if (has_inquire_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inquire_session());
    }

    // optional .common.errorinfo error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.verify_info list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  // repeated .AFP_main_frame.function_serial_number number = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->number(i));
    }
    total_size += 1 * this->number_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void batch_verify_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const batch_verify_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const batch_verify_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void batch_verify_ans::MergeFrom(const batch_verify_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  number_.MergeFrom(from.number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_status()) {
      set_result_status(from.result_status());
    }
    if (from.has_inquire_session()) {
      set_inquire_session(from.inquire_session());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void batch_verify_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void batch_verify_ans::CopyFrom(const batch_verify_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool batch_verify_ans::IsInitialized() const {

  return true;
}

void batch_verify_ans::Swap(batch_verify_ans* other) {
  if (other != this) {
    std::swap(result_status_, other->result_status_);
    std::swap(inquire_session_, other->inquire_session_);
    list_.Swap(&other->list_);
    std::swap(error_, other->error_);
    number_.Swap(&other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata batch_verify_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = batch_verify_ans_descriptor_;
  metadata.reflection = batch_verify_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_name::kAreaIdFieldNumber;
const int area_name::kNameFieldNumber;
#endif  // !_MSC_VER

area_name::area_name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.area_name)
}

void area_name::InitAsDefaultInstance() {
}

area_name::area_name(const area_name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.area_name)
}

void area_name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  area_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_name::~area_name() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.area_name)
  SharedDtor();
}

void area_name::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void area_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_name_descriptor_;
}

const area_name& area_name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

area_name* area_name::default_instance_ = NULL;

area_name* area_name::New() const {
  return new area_name;
}

void area_name::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    area_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.area_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 area_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.area_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.area_name)
  return false;
#undef DO_
}

void area_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.area_name)
  // optional int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.area_name)
}

::google::protobuf::uint8* area_name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.area_name)
  // optional int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.area_name)
  return target;
}

int area_name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_name::MergeFrom(const area_name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_name::CopyFrom(const area_name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_name::IsInitialized() const {

  return true;
}

void area_name::Swap(area_name* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_name_descriptor_;
  metadata.reflection = area_name_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_info::kBorrowBidFieldNumber;
const int bid_info::kBidNameFieldNumber;
const int bid_info::kBorrowTimeFieldNumber;
const int bid_info::kBorrowerNicknameFieldNumber;
const int bid_info::kBorrowDescribeFieldNumber;
const int bid_info::kBorrowMoneyFieldNumber;
const int bid_info::kBorrowRateFieldNumber;
const int bid_info::kMortgageTermFieldNumber;
const int bid_info::kModeOfRepaymentFieldNumber;
const int bid_info::kLPUserFieldNumber;
const int bid_info::kAmountGuaranteedFieldNumber;
const int bid_info::kRobLPTimeFieldNumber;
const int bid_info::kLPTimeFieldNumber;
const int bid_info::kLPAddressFieldNumber;
const int bid_info::kIsIndeedLPFieldNumber;
const int bid_info::kReasonsForGuaranteeFieldNumber;
const int bid_info::kPictureUrlFieldNumber;
#endif  // !_MSC_VER

bid_info::bid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.bid_info)
}

void bid_info::InitAsDefaultInstance() {
}

bid_info::bid_info(const bid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.bid_info)
}

void bid_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrower_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_money_ = 0;
  borrow_rate_ = 0;
  mortgage_term_ = 0;
  mode_of_repayment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lp_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_guaranteed_ = 0;
  rob_lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_indeed_lp_ = 0;
  reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_info::~bid_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.bid_info)
  SharedDtor();
}

void bid_info::SharedDtor() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_time_;
  }
  if (borrower_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrower_nickname_;
  }
  if (borrow_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_describe_;
  }
  if (mode_of_repayment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mode_of_repayment_;
  }
  if (lp_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_user_;
  }
  if (rob_lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rob_lp_time_;
  }
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_time_;
  }
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_address_;
  }
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reasons_for_guarantee_;
  }
  if (this != default_instance_) {
  }
}

void bid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_info_descriptor_;
}

const bid_info& bid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

bid_info* bid_info::default_instance_ = NULL;

bid_info* bid_info::New() const {
  return new bid_info;
}

void bid_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bid_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(borrow_money_, borrow_rate_);
    if (has_borrow_bid()) {
      if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_->clear();
      }
    }
    if (has_bid_name()) {
      if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_name_->clear();
      }
    }
    if (has_borrow_time()) {
      if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_time_->clear();
      }
    }
    if (has_borrower_nickname()) {
      if (borrower_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrower_nickname_->clear();
      }
    }
    if (has_borrow_describe()) {
      if (borrow_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_describe_->clear();
      }
    }
    mortgage_term_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_mode_of_repayment()) {
      if (mode_of_repayment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mode_of_repayment_->clear();
      }
    }
    if (has_lp_user()) {
      if (lp_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lp_user_->clear();
      }
    }
    amount_guaranteed_ = 0;
    if (has_rob_lp_time()) {
      if (rob_lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rob_lp_time_->clear();
      }
    }
    if (has_lp_time()) {
      if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lp_time_->clear();
      }
    }
    if (has_lp_address()) {
      if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lp_address_->clear();
      }
    }
    is_indeed_lp_ = 0;
    if (has_reasons_for_guarantee()) {
      if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reasons_for_guarantee_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  picture_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.bid_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes borrow_bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid_name;
        break;
      }

      // optional bytes bid_name = 2;
      case 2: {
        if (tag == 18) {
         parse_bid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_borrow_time;
        break;
      }

      // optional bytes borrow_time = 3;
      case 3: {
        if (tag == 26) {
         parse_borrow_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_borrower_nickname;
        break;
      }

      // optional bytes borrower_nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_borrower_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrower_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_borrow_describe;
        break;
      }

      // optional bytes borrow_describe = 5;
      case 5: {
        if (tag == 42) {
         parse_borrow_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_describe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_borrow_money;
        break;
      }

      // optional float borrow_money = 6;
      case 6: {
        if (tag == 53) {
         parse_borrow_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_money_)));
          set_has_borrow_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_borrow_rate;
        break;
      }

      // optional float borrow_rate = 7;
      case 7: {
        if (tag == 61) {
         parse_borrow_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_rate_)));
          set_has_borrow_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mortgage_term;
        break;
      }

      // optional int32 mortgage_term = 8;
      case 8: {
        if (tag == 64) {
         parse_mortgage_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mortgage_term_)));
          set_has_mortgage_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mode_of_repayment;
        break;
      }

      // optional bytes mode_of_repayment = 9;
      case 9: {
        if (tag == 74) {
         parse_mode_of_repayment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mode_of_repayment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_LP_user;
        break;
      }

      // optional bytes LP_user = 10;
      case 10: {
        if (tag == 82) {
         parse_LP_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lp_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_amount_guaranteed;
        break;
      }

      // optional float amount_guaranteed = 11;
      case 11: {
        if (tag == 93) {
         parse_amount_guaranteed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_guaranteed_)));
          set_has_amount_guaranteed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rob_LP_time;
        break;
      }

      // optional bytes rob_LP_time = 12;
      case 12: {
        if (tag == 98) {
         parse_rob_LP_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rob_lp_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_LP_time;
        break;
      }

      // optional bytes LP_time = 13;
      case 13: {
        if (tag == 106) {
         parse_LP_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lp_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_LP_address;
        break;
      }

      // optional bytes LP_address = 14;
      case 14: {
        if (tag == 114) {
         parse_LP_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lp_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_indeed_LP;
        break;
      }

      // optional int32 is_indeed_LP = 15;
      case 15: {
        if (tag == 120) {
         parse_is_indeed_LP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_indeed_lp_)));
          set_has_is_indeed_lp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Reasons_for_guarantee;
        break;
      }

      // optional bytes Reasons_for_guarantee = 16;
      case 16: {
        if (tag == 130) {
         parse_Reasons_for_guarantee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reasons_for_guarantee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_picture_url;
        break;
      }

      // repeated bytes picture_url = 17;
      case 17: {
        if (tag == 138) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_picture_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_picture_url;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.bid_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.bid_info)
  return false;
#undef DO_
}

void bid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.bid_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->borrow_bid(), output);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bid_name(), output);
  }

  // optional bytes borrow_time = 3;
  if (has_borrow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->borrow_time(), output);
  }

  // optional bytes borrower_nickname = 4;
  if (has_borrower_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->borrower_nickname(), output);
  }

  // optional bytes borrow_describe = 5;
  if (has_borrow_describe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->borrow_describe(), output);
  }

  // optional float borrow_money = 6;
  if (has_borrow_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->borrow_money(), output);
  }

  // optional float borrow_rate = 7;
  if (has_borrow_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->borrow_rate(), output);
  }

  // optional int32 mortgage_term = 8;
  if (has_mortgage_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mortgage_term(), output);
  }

  // optional bytes mode_of_repayment = 9;
  if (has_mode_of_repayment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->mode_of_repayment(), output);
  }

  // optional bytes LP_user = 10;
  if (has_lp_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->lp_user(), output);
  }

  // optional float amount_guaranteed = 11;
  if (has_amount_guaranteed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->amount_guaranteed(), output);
  }

  // optional bytes rob_LP_time = 12;
  if (has_rob_lp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->rob_lp_time(), output);
  }

  // optional bytes LP_time = 13;
  if (has_lp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->lp_time(), output);
  }

  // optional bytes LP_address = 14;
  if (has_lp_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->lp_address(), output);
  }

  // optional int32 is_indeed_LP = 15;
  if (has_is_indeed_lp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->is_indeed_lp(), output);
  }

  // optional bytes Reasons_for_guarantee = 16;
  if (has_reasons_for_guarantee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->reasons_for_guarantee(), output);
  }

  // repeated bytes picture_url = 17;
  for (int i = 0; i < this->picture_url_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->picture_url(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.bid_info)
}

::google::protobuf::uint8* bid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.bid_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->borrow_bid(), target);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bid_name(), target);
  }

  // optional bytes borrow_time = 3;
  if (has_borrow_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->borrow_time(), target);
  }

  // optional bytes borrower_nickname = 4;
  if (has_borrower_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->borrower_nickname(), target);
  }

  // optional bytes borrow_describe = 5;
  if (has_borrow_describe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->borrow_describe(), target);
  }

  // optional float borrow_money = 6;
  if (has_borrow_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->borrow_money(), target);
  }

  // optional float borrow_rate = 7;
  if (has_borrow_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->borrow_rate(), target);
  }

  // optional int32 mortgage_term = 8;
  if (has_mortgage_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mortgage_term(), target);
  }

  // optional bytes mode_of_repayment = 9;
  if (has_mode_of_repayment()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->mode_of_repayment(), target);
  }

  // optional bytes LP_user = 10;
  if (has_lp_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->lp_user(), target);
  }

  // optional float amount_guaranteed = 11;
  if (has_amount_guaranteed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->amount_guaranteed(), target);
  }

  // optional bytes rob_LP_time = 12;
  if (has_rob_lp_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->rob_lp_time(), target);
  }

  // optional bytes LP_time = 13;
  if (has_lp_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->lp_time(), target);
  }

  // optional bytes LP_address = 14;
  if (has_lp_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->lp_address(), target);
  }

  // optional int32 is_indeed_LP = 15;
  if (has_is_indeed_lp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->is_indeed_lp(), target);
  }

  // optional bytes Reasons_for_guarantee = 16;
  if (has_reasons_for_guarantee()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->reasons_for_guarantee(), target);
  }

  // repeated bytes picture_url = 17;
  for (int i = 0; i < this->picture_url_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(17, this->picture_url(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.bid_info)
  return target;
}

int bid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes borrow_bid = 1;
    if (has_borrow_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid());
    }

    // optional bytes bid_name = 2;
    if (has_bid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_name());
    }

    // optional bytes borrow_time = 3;
    if (has_borrow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_time());
    }

    // optional bytes borrower_nickname = 4;
    if (has_borrower_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrower_nickname());
    }

    // optional bytes borrow_describe = 5;
    if (has_borrow_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_describe());
    }

    // optional float borrow_money = 6;
    if (has_borrow_money()) {
      total_size += 1 + 4;
    }

    // optional float borrow_rate = 7;
    if (has_borrow_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 mortgage_term = 8;
    if (has_mortgage_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mortgage_term());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes mode_of_repayment = 9;
    if (has_mode_of_repayment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mode_of_repayment());
    }

    // optional bytes LP_user = 10;
    if (has_lp_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lp_user());
    }

    // optional float amount_guaranteed = 11;
    if (has_amount_guaranteed()) {
      total_size += 1 + 4;
    }

    // optional bytes rob_LP_time = 12;
    if (has_rob_lp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rob_lp_time());
    }

    // optional bytes LP_time = 13;
    if (has_lp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lp_time());
    }

    // optional bytes LP_address = 14;
    if (has_lp_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lp_address());
    }

    // optional int32 is_indeed_LP = 15;
    if (has_is_indeed_lp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_indeed_lp());
    }

    // optional bytes Reasons_for_guarantee = 16;
    if (has_reasons_for_guarantee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reasons_for_guarantee());
    }

  }
  // repeated bytes picture_url = 17;
  total_size += 2 * this->picture_url_size();
  for (int i = 0; i < this->picture_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->picture_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_info::MergeFrom(const bid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  picture_url_.MergeFrom(from.picture_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borrow_bid()) {
      set_borrow_bid(from.borrow_bid());
    }
    if (from.has_bid_name()) {
      set_bid_name(from.bid_name());
    }
    if (from.has_borrow_time()) {
      set_borrow_time(from.borrow_time());
    }
    if (from.has_borrower_nickname()) {
      set_borrower_nickname(from.borrower_nickname());
    }
    if (from.has_borrow_describe()) {
      set_borrow_describe(from.borrow_describe());
    }
    if (from.has_borrow_money()) {
      set_borrow_money(from.borrow_money());
    }
    if (from.has_borrow_rate()) {
      set_borrow_rate(from.borrow_rate());
    }
    if (from.has_mortgage_term()) {
      set_mortgage_term(from.mortgage_term());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mode_of_repayment()) {
      set_mode_of_repayment(from.mode_of_repayment());
    }
    if (from.has_lp_user()) {
      set_lp_user(from.lp_user());
    }
    if (from.has_amount_guaranteed()) {
      set_amount_guaranteed(from.amount_guaranteed());
    }
    if (from.has_rob_lp_time()) {
      set_rob_lp_time(from.rob_lp_time());
    }
    if (from.has_lp_time()) {
      set_lp_time(from.lp_time());
    }
    if (from.has_lp_address()) {
      set_lp_address(from.lp_address());
    }
    if (from.has_is_indeed_lp()) {
      set_is_indeed_lp(from.is_indeed_lp());
    }
    if (from.has_reasons_for_guarantee()) {
      set_reasons_for_guarantee(from.reasons_for_guarantee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_info::CopyFrom(const bid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_info::IsInitialized() const {

  return true;
}

void bid_info::Swap(bid_info* other) {
  if (other != this) {
    std::swap(borrow_bid_, other->borrow_bid_);
    std::swap(bid_name_, other->bid_name_);
    std::swap(borrow_time_, other->borrow_time_);
    std::swap(borrower_nickname_, other->borrower_nickname_);
    std::swap(borrow_describe_, other->borrow_describe_);
    std::swap(borrow_money_, other->borrow_money_);
    std::swap(borrow_rate_, other->borrow_rate_);
    std::swap(mortgage_term_, other->mortgage_term_);
    std::swap(mode_of_repayment_, other->mode_of_repayment_);
    std::swap(lp_user_, other->lp_user_);
    std::swap(amount_guaranteed_, other->amount_guaranteed_);
    std::swap(rob_lp_time_, other->rob_lp_time_);
    std::swap(lp_time_, other->lp_time_);
    std::swap(lp_address_, other->lp_address_);
    std::swap(is_indeed_lp_, other->is_indeed_lp_);
    std::swap(reasons_for_guarantee_, other->reasons_for_guarantee_);
    picture_url_.Swap(&other->picture_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_info_descriptor_;
  metadata.reflection = bid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int detail_early_warning::kUserstatusFieldNumber;
const int detail_early_warning::kNameFieldNumber;
const int detail_early_warning::kMobilePhoneFieldNumber;
const int detail_early_warning::kIdNoFieldNumber;
const int detail_early_warning::kSexFieldNumber;
const int detail_early_warning::kAgeFieldNumber;
const int detail_early_warning::kProvinceFieldNumber;
const int detail_early_warning::kCityFieldNumber;
const int detail_early_warning::kLoanBidAmountFieldNumber;
const int detail_early_warning::kQiaoQiaoLoanAmountFieldNumber;
const int detail_early_warning::kWarnTypeFieldNumber;
const int detail_early_warning::kWarnTimeFieldNumber;
const int detail_early_warning::kStatusEarlyWarningFieldNumber;
const int detail_early_warning::kRemarkFieldNumber;
const int detail_early_warning::kOperaterFieldNumber;
const int detail_early_warning::kOperatorTimeFieldNumber;
const int detail_early_warning::kIdFieldNumber;
const int detail_early_warning::kNicknameFieldNumber;
const int detail_early_warning::kWarnReasonFieldNumber;
#endif  // !_MSC_VER

detail_early_warning::detail_early_warning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.detail_early_warning)
}

void detail_early_warning::InitAsDefaultInstance() {
}

detail_early_warning::detail_early_warning(const detail_early_warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.detail_early_warning)
}

void detail_early_warning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  age_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loan_bid_amount_ = 0;
  qiao_qiao_loan_amount_ = 0;
  warn_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_early_warning_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warn_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detail_early_warning::~detail_early_warning() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.detail_early_warning)
  SharedDtor();
}

void detail_early_warning::SharedDtor() {
  if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userstatus_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (warn_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_type_;
  }
  if (warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_time_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_;
  }
  if (operator_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operator_time_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (warn_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_reason_;
  }
  if (this != default_instance_) {
  }
}

void detail_early_warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detail_early_warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detail_early_warning_descriptor_;
}

const detail_early_warning& detail_early_warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

detail_early_warning* detail_early_warning::default_instance_ = NULL;

detail_early_warning* detail_early_warning::New() const {
  return new detail_early_warning;
}

void detail_early_warning::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<detail_early_warning*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_userstatus()) {
      if (userstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userstatus_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    sex_ = 1;
    age_ = 0;
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(loan_bid_amount_, qiao_qiao_loan_amount_);
    if (has_warn_type()) {
      if (warn_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warn_type_->clear();
      }
    }
    if (has_warn_time()) {
      if (warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warn_time_->clear();
      }
    }
    status_early_warning_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    if (has_operater()) {
      if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operater_->clear();
      }
    }
    if (has_operator_time()) {
      if (operator_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operator_time_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_warn_reason()) {
      if (warn_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warn_reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detail_early_warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.detail_early_warning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes userstatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 4;
      case 4: {
        if (tag == 34) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional int32 age = 6;
      case 6: {
        if (tag == 48) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_province;
        break;
      }

      // optional bytes province = 7;
      case 7: {
        if (tag == 58) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_city;
        break;
      }

      // optional bytes city = 8;
      case 8: {
        if (tag == 66) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_loan_bid_amount;
        break;
      }

      // optional int32 loan_bid_amount = 9;
      case 9: {
        if (tag == 72) {
         parse_loan_bid_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loan_bid_amount_)));
          set_has_loan_bid_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_qiao_qiao_loan_amount;
        break;
      }

      // optional int32 qiao_qiao_loan_amount = 10;
      case 10: {
        if (tag == 80) {
         parse_qiao_qiao_loan_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qiao_qiao_loan_amount_)));
          set_has_qiao_qiao_loan_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_warn_type;
        break;
      }

      // optional bytes warn_type = 11;
      case 11: {
        if (tag == 90) {
         parse_warn_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_warn_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_warn_time;
        break;
      }

      // optional bytes warn_time = 12;
      case 12: {
        if (tag == 98) {
         parse_warn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_warn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_status_early_warning;
        break;
      }

      // optional int32 status_early_warning = 13;
      case 13: {
        if (tag == 104) {
         parse_status_early_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_early_warning_)));
          set_has_status_early_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_remark;
        break;
      }

      // optional bytes remark = 14;
      case 14: {
        if (tag == 114) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_operater;
        break;
      }

      // optional bytes operater = 15;
      case 15: {
        if (tag == 122) {
         parse_operater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_operator_time;
        break;
      }

      // optional bytes operator_time = 16;
      case 16: {
        if (tag == 130) {
         parse_operator_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operator_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_id;
        break;
      }

      // optional int32 id = 17;
      case 17: {
        if (tag == 136) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 18;
      case 18: {
        if (tag == 146) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_warn_reason;
        break;
      }

      // optional bytes warn_reason = 19;
      case 19: {
        if (tag == 154) {
         parse_warn_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_warn_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.detail_early_warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.detail_early_warning)
  return false;
#undef DO_
}

void detail_early_warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.detail_early_warning)
  // optional bytes userstatus = 1;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->userstatus(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_no(), output);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional int32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // optional bytes province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->province(), output);
  }

  // optional bytes city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->city(), output);
  }

  // optional int32 loan_bid_amount = 9;
  if (has_loan_bid_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loan_bid_amount(), output);
  }

  // optional int32 qiao_qiao_loan_amount = 10;
  if (has_qiao_qiao_loan_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qiao_qiao_loan_amount(), output);
  }

  // optional bytes warn_type = 11;
  if (has_warn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->warn_type(), output);
  }

  // optional bytes warn_time = 12;
  if (has_warn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->warn_time(), output);
  }

  // optional int32 status_early_warning = 13;
  if (has_status_early_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->status_early_warning(), output);
  }

  // optional bytes remark = 14;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->remark(), output);
  }

  // optional bytes operater = 15;
  if (has_operater()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->operater(), output);
  }

  // optional bytes operator_time = 16;
  if (has_operator_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->operator_time(), output);
  }

  // optional int32 id = 17;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->id(), output);
  }

  // optional bytes nickname = 18;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->nickname(), output);
  }

  // optional bytes warn_reason = 19;
  if (has_warn_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->warn_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.detail_early_warning)
}

::google::protobuf::uint8* detail_early_warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.detail_early_warning)
  // optional bytes userstatus = 1;
  if (has_userstatus()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userstatus(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_no(), target);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional int32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // optional bytes province = 7;
  if (has_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->province(), target);
  }

  // optional bytes city = 8;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->city(), target);
  }

  // optional int32 loan_bid_amount = 9;
  if (has_loan_bid_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->loan_bid_amount(), target);
  }

  // optional int32 qiao_qiao_loan_amount = 10;
  if (has_qiao_qiao_loan_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qiao_qiao_loan_amount(), target);
  }

  // optional bytes warn_type = 11;
  if (has_warn_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->warn_type(), target);
  }

  // optional bytes warn_time = 12;
  if (has_warn_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->warn_time(), target);
  }

  // optional int32 status_early_warning = 13;
  if (has_status_early_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->status_early_warning(), target);
  }

  // optional bytes remark = 14;
  if (has_remark()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->remark(), target);
  }

  // optional bytes operater = 15;
  if (has_operater()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->operater(), target);
  }

  // optional bytes operator_time = 16;
  if (has_operator_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->operator_time(), target);
  }

  // optional int32 id = 17;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->id(), target);
  }

  // optional bytes nickname = 18;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->nickname(), target);
  }

  // optional bytes warn_reason = 19;
  if (has_warn_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->warn_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.detail_early_warning)
  return target;
}

int detail_early_warning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes userstatus = 1;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userstatus());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 4;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional .common.sex sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional bytes province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province());
    }

    // optional bytes city = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 loan_bid_amount = 9;
    if (has_loan_bid_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loan_bid_amount());
    }

    // optional int32 qiao_qiao_loan_amount = 10;
    if (has_qiao_qiao_loan_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qiao_qiao_loan_amount());
    }

    // optional bytes warn_type = 11;
    if (has_warn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->warn_type());
    }

    // optional bytes warn_time = 12;
    if (has_warn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->warn_time());
    }

    // optional int32 status_early_warning = 13;
    if (has_status_early_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_early_warning());
    }

    // optional bytes remark = 14;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remark());
    }

    // optional bytes operater = 15;
    if (has_operater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operater());
    }

    // optional bytes operator_time = 16;
    if (has_operator_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operator_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 id = 17;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes nickname = 18;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes warn_reason = 19;
    if (has_warn_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->warn_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detail_early_warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detail_early_warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detail_early_warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detail_early_warning::MergeFrom(const detail_early_warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loan_bid_amount()) {
      set_loan_bid_amount(from.loan_bid_amount());
    }
    if (from.has_qiao_qiao_loan_amount()) {
      set_qiao_qiao_loan_amount(from.qiao_qiao_loan_amount());
    }
    if (from.has_warn_type()) {
      set_warn_type(from.warn_type());
    }
    if (from.has_warn_time()) {
      set_warn_time(from.warn_time());
    }
    if (from.has_status_early_warning()) {
      set_status_early_warning(from.status_early_warning());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_operater()) {
      set_operater(from.operater());
    }
    if (from.has_operator_time()) {
      set_operator_time(from.operator_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_warn_reason()) {
      set_warn_reason(from.warn_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detail_early_warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detail_early_warning::CopyFrom(const detail_early_warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detail_early_warning::IsInitialized() const {

  return true;
}

void detail_early_warning::Swap(detail_early_warning* other) {
  if (other != this) {
    std::swap(userstatus_, other->userstatus_);
    std::swap(name_, other->name_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(loan_bid_amount_, other->loan_bid_amount_);
    std::swap(qiao_qiao_loan_amount_, other->qiao_qiao_loan_amount_);
    std::swap(warn_type_, other->warn_type_);
    std::swap(warn_time_, other->warn_time_);
    std::swap(status_early_warning_, other->status_early_warning_);
    std::swap(remark_, other->remark_);
    std::swap(operater_, other->operater_);
    std::swap(operator_time_, other->operator_time_);
    std::swap(id_, other->id_);
    std::swap(nickname_, other->nickname_);
    std::swap(warn_reason_, other->warn_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detail_early_warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detail_early_warning_descriptor_;
  metadata.reflection = detail_early_warning_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistical_Intel_warning_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

statistical_Intel_warning_ask::statistical_Intel_warning_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.statistical_Intel_warning_ask)
}

void statistical_Intel_warning_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

statistical_Intel_warning_ask::statistical_Intel_warning_ask(const statistical_Intel_warning_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.statistical_Intel_warning_ask)
}

void statistical_Intel_warning_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistical_Intel_warning_ask::~statistical_Intel_warning_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.statistical_Intel_warning_ask)
  SharedDtor();
}

void statistical_Intel_warning_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void statistical_Intel_warning_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistical_Intel_warning_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistical_Intel_warning_ask_descriptor_;
}

const statistical_Intel_warning_ask& statistical_Intel_warning_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

statistical_Intel_warning_ask* statistical_Intel_warning_ask::default_instance_ = NULL;

statistical_Intel_warning_ask* statistical_Intel_warning_ask::New() const {
  return new statistical_Intel_warning_ask;
}

void statistical_Intel_warning_ask::Clear() {
  if (has_ask_header()) {
    if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistical_Intel_warning_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.statistical_Intel_warning_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.statistical_Intel_warning_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.statistical_Intel_warning_ask)
  return false;
#undef DO_
}

void statistical_Intel_warning_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.statistical_Intel_warning_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.statistical_Intel_warning_ask)
}

::google::protobuf::uint8* statistical_Intel_warning_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.statistical_Intel_warning_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.statistical_Intel_warning_ask)
  return target;
}

int statistical_Intel_warning_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistical_Intel_warning_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistical_Intel_warning_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistical_Intel_warning_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistical_Intel_warning_ask::MergeFrom(const statistical_Intel_warning_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistical_Intel_warning_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistical_Intel_warning_ask::CopyFrom(const statistical_Intel_warning_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistical_Intel_warning_ask::IsInitialized() const {

  return true;
}

void statistical_Intel_warning_ask::Swap(statistical_Intel_warning_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistical_Intel_warning_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistical_Intel_warning_ask_descriptor_;
  metadata.reflection = statistical_Intel_warning_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistical_early_warning_ans::kBorrowBidQuantityFieldNumber;
const int statistical_early_warning_ans::kEarlyWarningBidQuantityFieldNumber;
const int statistical_early_warning_ans::kEarlyWarningAndRiskFieldNumber;
const int statistical_early_warning_ans::kEarlyWarningOverdueRateFieldNumber;
const int statistical_early_warning_ans::kResultFieldNumber;
#endif  // !_MSC_VER

statistical_early_warning_ans::statistical_early_warning_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.statistical_early_warning_ans)
}

void statistical_early_warning_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

statistical_early_warning_ans::statistical_early_warning_ans(const statistical_early_warning_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.statistical_early_warning_ans)
}

void statistical_early_warning_ans::SharedCtor() {
  _cached_size_ = 0;
  borrow_bid_quantity_ = 0;
  early_warning_bid_quantity_ = 0;
  early_warning_and_risk_ = 0;
  early_warning_overdue_rate_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistical_early_warning_ans::~statistical_early_warning_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.statistical_early_warning_ans)
  SharedDtor();
}

void statistical_early_warning_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void statistical_early_warning_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistical_early_warning_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistical_early_warning_ans_descriptor_;
}

const statistical_early_warning_ans& statistical_early_warning_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

statistical_early_warning_ans* statistical_early_warning_ans::default_instance_ = NULL;

statistical_early_warning_ans* statistical_early_warning_ans::New() const {
  return new statistical_early_warning_ans;
}

void statistical_early_warning_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<statistical_early_warning_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(borrow_bid_quantity_, early_warning_overdue_rate_);
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistical_early_warning_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.statistical_early_warning_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 borrow_bid_quantity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borrow_bid_quantity_)));
          set_has_borrow_bid_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_early_warning_bid_quantity;
        break;
      }

      // optional int32 early_warning_bid_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_early_warning_bid_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &early_warning_bid_quantity_)));
          set_has_early_warning_bid_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_early_warning_and_risk;
        break;
      }

      // optional float early_warning_and_risk = 3;
      case 3: {
        if (tag == 29) {
         parse_early_warning_and_risk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &early_warning_and_risk_)));
          set_has_early_warning_and_risk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_early_warning_overdue_rate;
        break;
      }

      // optional float early_warning_overdue_rate = 4;
      case 4: {
        if (tag == 37) {
         parse_early_warning_overdue_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &early_warning_overdue_rate_)));
          set_has_early_warning_overdue_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 5;
      case 5: {
        if (tag == 42) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.statistical_early_warning_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.statistical_early_warning_ans)
  return false;
#undef DO_
}

void statistical_early_warning_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.statistical_early_warning_ans)
  // optional int32 borrow_bid_quantity = 1;
  if (has_borrow_bid_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->borrow_bid_quantity(), output);
  }

  // optional int32 early_warning_bid_quantity = 2;
  if (has_early_warning_bid_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->early_warning_bid_quantity(), output);
  }

  // optional float early_warning_and_risk = 3;
  if (has_early_warning_and_risk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->early_warning_and_risk(), output);
  }

  // optional float early_warning_overdue_rate = 4;
  if (has_early_warning_overdue_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->early_warning_overdue_rate(), output);
  }

  // optional .common.result_info result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.statistical_early_warning_ans)
}

::google::protobuf::uint8* statistical_early_warning_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.statistical_early_warning_ans)
  // optional int32 borrow_bid_quantity = 1;
  if (has_borrow_bid_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->borrow_bid_quantity(), target);
  }

  // optional int32 early_warning_bid_quantity = 2;
  if (has_early_warning_bid_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->early_warning_bid_quantity(), target);
  }

  // optional float early_warning_and_risk = 3;
  if (has_early_warning_and_risk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->early_warning_and_risk(), target);
  }

  // optional float early_warning_overdue_rate = 4;
  if (has_early_warning_overdue_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->early_warning_overdue_rate(), target);
  }

  // optional .common.result_info result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.statistical_early_warning_ans)
  return target;
}

int statistical_early_warning_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 borrow_bid_quantity = 1;
    if (has_borrow_bid_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->borrow_bid_quantity());
    }

    // optional int32 early_warning_bid_quantity = 2;
    if (has_early_warning_bid_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->early_warning_bid_quantity());
    }

    // optional float early_warning_and_risk = 3;
    if (has_early_warning_and_risk()) {
      total_size += 1 + 4;
    }

    // optional float early_warning_overdue_rate = 4;
    if (has_early_warning_overdue_rate()) {
      total_size += 1 + 4;
    }

    // optional .common.result_info result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistical_early_warning_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistical_early_warning_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistical_early_warning_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistical_early_warning_ans::MergeFrom(const statistical_early_warning_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borrow_bid_quantity()) {
      set_borrow_bid_quantity(from.borrow_bid_quantity());
    }
    if (from.has_early_warning_bid_quantity()) {
      set_early_warning_bid_quantity(from.early_warning_bid_quantity());
    }
    if (from.has_early_warning_and_risk()) {
      set_early_warning_and_risk(from.early_warning_and_risk());
    }
    if (from.has_early_warning_overdue_rate()) {
      set_early_warning_overdue_rate(from.early_warning_overdue_rate());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistical_early_warning_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistical_early_warning_ans::CopyFrom(const statistical_early_warning_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistical_early_warning_ans::IsInitialized() const {

  return true;
}

void statistical_early_warning_ans::Swap(statistical_early_warning_ans* other) {
  if (other != this) {
    std::swap(borrow_bid_quantity_, other->borrow_bid_quantity_);
    std::swap(early_warning_bid_quantity_, other->early_warning_bid_quantity_);
    std::swap(early_warning_and_risk_, other->early_warning_and_risk_);
    std::swap(early_warning_overdue_rate_, other->early_warning_overdue_rate_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistical_early_warning_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistical_early_warning_ans_descriptor_;
  metadata.reflection = statistical_early_warning_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statistical_Intel_warning_ans::kResultFieldNumber;
const int statistical_Intel_warning_ans::kCurUserAmountFieldNumber;
const int statistical_Intel_warning_ans::kQiandabaoAmountFieldNumber;
const int statistical_Intel_warning_ans::kWeidabaoAmountFieldNumber;
const int statistical_Intel_warning_ans::kCreditBorrowAmountFieldNumber;
const int statistical_Intel_warning_ans::kQiaoqiaoBidAmountFieldNumber;
#endif  // !_MSC_VER

statistical_Intel_warning_ans::statistical_Intel_warning_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.statistical_Intel_warning_ans)
}

void statistical_Intel_warning_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

statistical_Intel_warning_ans::statistical_Intel_warning_ans(const statistical_Intel_warning_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.statistical_Intel_warning_ans)
}

void statistical_Intel_warning_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  cur_user_amount_ = 0;
  qiandabao_amount_ = 0;
  weidabao_amount_ = 0;
  credit_borrow_amount_ = 0;
  qiaoqiao_bid_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statistical_Intel_warning_ans::~statistical_Intel_warning_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.statistical_Intel_warning_ans)
  SharedDtor();
}

void statistical_Intel_warning_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void statistical_Intel_warning_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statistical_Intel_warning_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statistical_Intel_warning_ans_descriptor_;
}

const statistical_Intel_warning_ans& statistical_Intel_warning_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

statistical_Intel_warning_ans* statistical_Intel_warning_ans::default_instance_ = NULL;

statistical_Intel_warning_ans* statistical_Intel_warning_ans::New() const {
  return new statistical_Intel_warning_ans;
}

void statistical_Intel_warning_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<statistical_Intel_warning_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cur_user_amount_, qiaoqiao_bid_amount_);
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statistical_Intel_warning_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.statistical_Intel_warning_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cur_user_amount;
        break;
      }

      // optional int32 cur_user_amount = 2;
      case 2: {
        if (tag == 16) {
         parse_cur_user_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_user_amount_)));
          set_has_cur_user_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qiandabao_amount;
        break;
      }

      // optional int32 qiandabao_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_qiandabao_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qiandabao_amount_)));
          set_has_qiandabao_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weidabao_amount;
        break;
      }

      // optional int32 weidabao_amount = 4;
      case 4: {
        if (tag == 32) {
         parse_weidabao_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weidabao_amount_)));
          set_has_weidabao_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_credit_borrow_amount;
        break;
      }

      // optional int32 credit_borrow_amount = 5;
      case 5: {
        if (tag == 40) {
         parse_credit_borrow_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_borrow_amount_)));
          set_has_credit_borrow_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_qiaoqiao_bid_amount;
        break;
      }

      // optional int32 qiaoqiao_bid_amount = 6;
      case 6: {
        if (tag == 48) {
         parse_qiaoqiao_bid_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qiaoqiao_bid_amount_)));
          set_has_qiaoqiao_bid_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.statistical_Intel_warning_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.statistical_Intel_warning_ans)
  return false;
#undef DO_
}

void statistical_Intel_warning_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.statistical_Intel_warning_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 cur_user_amount = 2;
  if (has_cur_user_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_user_amount(), output);
  }

  // optional int32 qiandabao_amount = 3;
  if (has_qiandabao_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->qiandabao_amount(), output);
  }

  // optional int32 weidabao_amount = 4;
  if (has_weidabao_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weidabao_amount(), output);
  }

  // optional int32 credit_borrow_amount = 5;
  if (has_credit_borrow_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->credit_borrow_amount(), output);
  }

  // optional int32 qiaoqiao_bid_amount = 6;
  if (has_qiaoqiao_bid_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qiaoqiao_bid_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.statistical_Intel_warning_ans)
}

::google::protobuf::uint8* statistical_Intel_warning_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.statistical_Intel_warning_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 cur_user_amount = 2;
  if (has_cur_user_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_user_amount(), target);
  }

  // optional int32 qiandabao_amount = 3;
  if (has_qiandabao_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->qiandabao_amount(), target);
  }

  // optional int32 weidabao_amount = 4;
  if (has_weidabao_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weidabao_amount(), target);
  }

  // optional int32 credit_borrow_amount = 5;
  if (has_credit_borrow_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->credit_borrow_amount(), target);
  }

  // optional int32 qiaoqiao_bid_amount = 6;
  if (has_qiaoqiao_bid_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qiaoqiao_bid_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.statistical_Intel_warning_ans)
  return target;
}

int statistical_Intel_warning_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 cur_user_amount = 2;
    if (has_cur_user_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_user_amount());
    }

    // optional int32 qiandabao_amount = 3;
    if (has_qiandabao_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qiandabao_amount());
    }

    // optional int32 weidabao_amount = 4;
    if (has_weidabao_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weidabao_amount());
    }

    // optional int32 credit_borrow_amount = 5;
    if (has_credit_borrow_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit_borrow_amount());
    }

    // optional int32 qiaoqiao_bid_amount = 6;
    if (has_qiaoqiao_bid_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qiaoqiao_bid_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statistical_Intel_warning_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statistical_Intel_warning_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statistical_Intel_warning_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statistical_Intel_warning_ans::MergeFrom(const statistical_Intel_warning_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
    if (from.has_cur_user_amount()) {
      set_cur_user_amount(from.cur_user_amount());
    }
    if (from.has_qiandabao_amount()) {
      set_qiandabao_amount(from.qiandabao_amount());
    }
    if (from.has_weidabao_amount()) {
      set_weidabao_amount(from.weidabao_amount());
    }
    if (from.has_credit_borrow_amount()) {
      set_credit_borrow_amount(from.credit_borrow_amount());
    }
    if (from.has_qiaoqiao_bid_amount()) {
      set_qiaoqiao_bid_amount(from.qiaoqiao_bid_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statistical_Intel_warning_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statistical_Intel_warning_ans::CopyFrom(const statistical_Intel_warning_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statistical_Intel_warning_ans::IsInitialized() const {

  return true;
}

void statistical_Intel_warning_ans::Swap(statistical_Intel_warning_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cur_user_amount_, other->cur_user_amount_);
    std::swap(qiandabao_amount_, other->qiandabao_amount_);
    std::swap(weidabao_amount_, other->weidabao_amount_);
    std::swap(credit_borrow_amount_, other->credit_borrow_amount_);
    std::swap(qiaoqiao_bid_amount_, other->qiaoqiao_bid_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statistical_Intel_warning_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statistical_Intel_warning_ans_descriptor_;
  metadata.reflection = statistical_Intel_warning_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int detail_early_warning_ask::kProvinceFieldNumber;
const int detail_early_warning_ask::kCityFieldNumber;
const int detail_early_warning_ask::kMobilePhoneFieldNumber;
const int detail_early_warning_ask::kIdNoFieldNumber;
const int detail_early_warning_ask::kStartDateFieldNumber;
const int detail_early_warning_ask::kEndDateFieldNumber;
const int detail_early_warning_ask::kPageNumFieldNumber;
const int detail_early_warning_ask::kCurPageFieldNumber;
const int detail_early_warning_ask::kWarnTypeFieldNumber;
const int detail_early_warning_ask::kStatusEarlyWarningFieldNumber;
const int detail_early_warning_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

detail_early_warning_ask::detail_early_warning_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.detail_early_warning_ask)
}

void detail_early_warning_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

detail_early_warning_ask::detail_early_warning_ask(const detail_early_warning_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.detail_early_warning_ask)
}

void detail_early_warning_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_num_ = 0;
  cur_page_ = 0;
  warn_type_ = 0;
  status_early_warning_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detail_early_warning_ask::~detail_early_warning_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.detail_early_warning_ask)
  SharedDtor();
}

void detail_early_warning_ask::SharedDtor() {
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void detail_early_warning_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detail_early_warning_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detail_early_warning_ask_descriptor_;
}

const detail_early_warning_ask& detail_early_warning_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

detail_early_warning_ask* detail_early_warning_ask::default_instance_ = NULL;

detail_early_warning_ask* detail_early_warning_ask::New() const {
  return new detail_early_warning_ask;
}

void detail_early_warning_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<detail_early_warning_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(page_num_, cur_page_);
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(warn_type_, status_early_warning_);
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detail_early_warning_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.detail_early_warning_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional bytes city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 4;
      case 4: {
        if (tag == 34) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_start_date;
        break;
      }

      // optional bytes start_date = 5;
      case 5: {
        if (tag == 42) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_end_date;
        break;
      }

      // optional bytes end_date = 6;
      case 6: {
        if (tag == 50) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 7;
      case 7: {
        if (tag == 56) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 8;
      case 8: {
        if (tag == 64) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_warn_type;
        break;
      }

      // optional int32 warn_type = 9;
      case 9: {
        if (tag == 72) {
         parse_warn_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warn_type_)));
          set_has_warn_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_status_early_warning;
        break;
      }

      // optional int32 status_early_warning = 10;
      case 10: {
        if (tag == 80) {
         parse_status_early_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_early_warning_)));
          set_has_status_early_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 11;
      case 11: {
        if (tag == 90) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.detail_early_warning_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.detail_early_warning_ask)
  return false;
#undef DO_
}

void detail_early_warning_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.detail_early_warning_ask)
  // optional bytes province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->province(), output);
  }

  // optional bytes city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->city(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_no(), output);
  }

  // optional bytes start_date = 5;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->start_date(), output);
  }

  // optional bytes end_date = 6;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->end_date(), output);
  }

  // optional int32 page_num = 7;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_num(), output);
  }

  // optional int32 cur_page = 8;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_page(), output);
  }

  // optional int32 warn_type = 9;
  if (has_warn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->warn_type(), output);
  }

  // optional int32 status_early_warning = 10;
  if (has_status_early_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->status_early_warning(), output);
  }

  // optional .common.common_ask_header ask_header = 11;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.detail_early_warning_ask)
}

::google::protobuf::uint8* detail_early_warning_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.detail_early_warning_ask)
  // optional bytes province = 1;
  if (has_province()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->province(), target);
  }

  // optional bytes city = 2;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->city(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_no(), target);
  }

  // optional bytes start_date = 5;
  if (has_start_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->start_date(), target);
  }

  // optional bytes end_date = 6;
  if (has_end_date()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->end_date(), target);
  }

  // optional int32 page_num = 7;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_num(), target);
  }

  // optional int32 cur_page = 8;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_page(), target);
  }

  // optional int32 warn_type = 9;
  if (has_warn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->warn_type(), target);
  }

  // optional int32 status_early_warning = 10;
  if (has_status_early_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->status_early_warning(), target);
  }

  // optional .common.common_ask_header ask_header = 11;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.detail_early_warning_ask)
  return target;
}

int detail_early_warning_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->province());
    }

    // optional bytes city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 4;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

    // optional bytes start_date = 5;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_date());
    }

    // optional bytes end_date = 6;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_date());
    }

    // optional int32 page_num = 7;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 8;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 warn_type = 9;
    if (has_warn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warn_type());
    }

    // optional int32 status_early_warning = 10;
    if (has_status_early_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_early_warning());
    }

    // optional .common.common_ask_header ask_header = 11;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detail_early_warning_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detail_early_warning_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detail_early_warning_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detail_early_warning_ask::MergeFrom(const detail_early_warning_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_warn_type()) {
      set_warn_type(from.warn_type());
    }
    if (from.has_status_early_warning()) {
      set_status_early_warning(from.status_early_warning());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detail_early_warning_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detail_early_warning_ask::CopyFrom(const detail_early_warning_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detail_early_warning_ask::IsInitialized() const {

  return true;
}

void detail_early_warning_ask::Swap(detail_early_warning_ask* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(warn_type_, other->warn_type_);
    std::swap(status_early_warning_, other->status_early_warning_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detail_early_warning_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detail_early_warning_ask_descriptor_;
  metadata.reflection = detail_early_warning_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int detail_early_warning_ans::kTotalNumberFieldNumber;
const int detail_early_warning_ans::kInfoFieldNumber;
const int detail_early_warning_ans::kResultFieldNumber;
#endif  // !_MSC_VER

detail_early_warning_ans::detail_early_warning_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.detail_early_warning_ans)
}

void detail_early_warning_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

detail_early_warning_ans::detail_early_warning_ans(const detail_early_warning_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.detail_early_warning_ans)
}

void detail_early_warning_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

detail_early_warning_ans::~detail_early_warning_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.detail_early_warning_ans)
  SharedDtor();
}

void detail_early_warning_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void detail_early_warning_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* detail_early_warning_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return detail_early_warning_ans_descriptor_;
}

const detail_early_warning_ans& detail_early_warning_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

detail_early_warning_ans* detail_early_warning_ans::default_instance_ = NULL;

detail_early_warning_ans* detail_early_warning_ans::New() const {
  return new detail_early_warning_ans;
}

void detail_early_warning_ans::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    total_number_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::common::result_info::Clear();
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool detail_early_warning_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.detail_early_warning_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .AFP_main_frame.detail_early_warning info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 3;
      case 3: {
        if (tag == 26) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.detail_early_warning_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.detail_early_warning_ans)
  return false;
#undef DO_
}

void detail_early_warning_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.detail_early_warning_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_number(), output);
  }

  // repeated .AFP_main_frame.detail_early_warning info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.detail_early_warning_ans)
}

::google::protobuf::uint8* detail_early_warning_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.detail_early_warning_ans)
  // optional int32 total_number = 1;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_number(), target);
  }

  // repeated .AFP_main_frame.detail_early_warning info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional .common.result_info result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.detail_early_warning_ans)
  return target;
}

int detail_early_warning_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total_number = 1;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.result_info result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .AFP_main_frame.detail_early_warning info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void detail_early_warning_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const detail_early_warning_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const detail_early_warning_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void detail_early_warning_ans::MergeFrom(const detail_early_warning_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void detail_early_warning_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void detail_early_warning_ans::CopyFrom(const detail_early_warning_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detail_early_warning_ans::IsInitialized() const {

  return true;
}

void detail_early_warning_ans::Swap(detail_early_warning_ans* other) {
  if (other != this) {
    std::swap(total_number_, other->total_number_);
    info_.Swap(&other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata detail_early_warning_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = detail_early_warning_ans_descriptor_;
  metadata.reflection = detail_early_warning_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_the_warning_ask::kBorrowBidFieldNumber;
const int cancel_the_warning_ask::kCancelTheWarningOperationFieldNumber;
const int cancel_the_warning_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

cancel_the_warning_ask::cancel_the_warning_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.cancel_the_warning_ask)
}

void cancel_the_warning_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

cancel_the_warning_ask::cancel_the_warning_ask(const cancel_the_warning_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.cancel_the_warning_ask)
}

void cancel_the_warning_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_the_warning_ask::~cancel_the_warning_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.cancel_the_warning_ask)
  SharedDtor();
}

void cancel_the_warning_ask::SharedDtor() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warning_operation_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void cancel_the_warning_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_the_warning_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_the_warning_ask_descriptor_;
}

const cancel_the_warning_ask& cancel_the_warning_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cancel_the_warning_ask* cancel_the_warning_ask::default_instance_ = NULL;

cancel_the_warning_ask* cancel_the_warning_ask::New() const {
  return new cancel_the_warning_ask;
}

void cancel_the_warning_ask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_borrow_bid()) {
      if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_->clear();
      }
    }
    if (has_cancel_the_warning_operation()) {
      if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cancel_the_warning_operation_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_the_warning_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.cancel_the_warning_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes borrow_bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cancel_the_warning_operation;
        break;
      }

      // optional bytes cancel_the_warning_operation = 2;
      case 2: {
        if (tag == 18) {
         parse_cancel_the_warning_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cancel_the_warning_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.cancel_the_warning_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.cancel_the_warning_ask)
  return false;
#undef DO_
}

void cancel_the_warning_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.cancel_the_warning_ask)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->borrow_bid(), output);
  }

  // optional bytes cancel_the_warning_operation = 2;
  if (has_cancel_the_warning_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cancel_the_warning_operation(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.cancel_the_warning_ask)
}

::google::protobuf::uint8* cancel_the_warning_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.cancel_the_warning_ask)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->borrow_bid(), target);
  }

  // optional bytes cancel_the_warning_operation = 2;
  if (has_cancel_the_warning_operation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cancel_the_warning_operation(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.cancel_the_warning_ask)
  return target;
}

int cancel_the_warning_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes borrow_bid = 1;
    if (has_borrow_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid());
    }

    // optional bytes cancel_the_warning_operation = 2;
    if (has_cancel_the_warning_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cancel_the_warning_operation());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_the_warning_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_the_warning_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_the_warning_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_the_warning_ask::MergeFrom(const cancel_the_warning_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borrow_bid()) {
      set_borrow_bid(from.borrow_bid());
    }
    if (from.has_cancel_the_warning_operation()) {
      set_cancel_the_warning_operation(from.cancel_the_warning_operation());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_the_warning_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_the_warning_ask::CopyFrom(const cancel_the_warning_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_the_warning_ask::IsInitialized() const {

  return true;
}

void cancel_the_warning_ask::Swap(cancel_the_warning_ask* other) {
  if (other != this) {
    std::swap(borrow_bid_, other->borrow_bid_);
    std::swap(cancel_the_warning_operation_, other->cancel_the_warning_operation_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_the_warning_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_the_warning_ask_descriptor_;
  metadata.reflection = cancel_the_warning_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancel_the_warning_ans::kErrorFieldNumber;
const int cancel_the_warning_ans::kBorrowBidFieldNumber;
const int cancel_the_warning_ans::kStatusEarlyWarningFieldNumber;
const int cancel_the_warning_ans::kCancelTheWarnTimeFieldNumber;
const int cancel_the_warning_ans::kCancelTheWarningOperationFieldNumber;
#endif  // !_MSC_VER

cancel_the_warning_ans::cancel_the_warning_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.cancel_the_warning_ans)
}

void cancel_the_warning_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

cancel_the_warning_ans::cancel_the_warning_ans(const cancel_the_warning_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.cancel_the_warning_ans)
}

void cancel_the_warning_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = NULL;
  borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_early_warning_ = 0;
  cancel_the_warn_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cancel_the_warning_operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancel_the_warning_ans::~cancel_the_warning_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.cancel_the_warning_ans)
  SharedDtor();
}

void cancel_the_warning_ans::SharedDtor() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (cancel_the_warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warn_time_;
  }
  if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cancel_the_warning_operation_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void cancel_the_warning_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancel_the_warning_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancel_the_warning_ans_descriptor_;
}

const cancel_the_warning_ans& cancel_the_warning_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

cancel_the_warning_ans* cancel_the_warning_ans::default_instance_ = NULL;

cancel_the_warning_ans* cancel_the_warning_ans::New() const {
  return new cancel_the_warning_ans;
}

void cancel_the_warning_ans::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    if (has_borrow_bid()) {
      if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_->clear();
      }
    }
    status_early_warning_ = 0;
    if (has_cancel_the_warn_time()) {
      if (cancel_the_warn_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cancel_the_warn_time_->clear();
      }
    }
    if (has_cancel_the_warning_operation()) {
      if (cancel_the_warning_operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cancel_the_warning_operation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancel_the_warning_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.cancel_the_warning_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_borrow_bid;
        break;
      }

      // optional bytes borrow_bid = 2;
      case 2: {
        if (tag == 18) {
         parse_borrow_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status_early_warning;
        break;
      }

      // optional int32 status_early_warning = 3;
      case 3: {
        if (tag == 24) {
         parse_status_early_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_early_warning_)));
          set_has_status_early_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cancel_the_warn_time;
        break;
      }

      // optional bytes cancel_the_warn_time = 4;
      case 4: {
        if (tag == 34) {
         parse_cancel_the_warn_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cancel_the_warn_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cancel_the_warning_operation;
        break;
      }

      // optional bytes cancel_the_warning_operation = 5;
      case 5: {
        if (tag == 42) {
         parse_cancel_the_warning_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cancel_the_warning_operation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.cancel_the_warning_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.cancel_the_warning_ans)
  return false;
#undef DO_
}

void cancel_the_warning_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.cancel_the_warning_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // optional bytes borrow_bid = 2;
  if (has_borrow_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->borrow_bid(), output);
  }

  // optional int32 status_early_warning = 3;
  if (has_status_early_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status_early_warning(), output);
  }

  // optional bytes cancel_the_warn_time = 4;
  if (has_cancel_the_warn_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cancel_the_warn_time(), output);
  }

  // optional bytes cancel_the_warning_operation = 5;
  if (has_cancel_the_warning_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->cancel_the_warning_operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.cancel_the_warning_ans)
}

::google::protobuf::uint8* cancel_the_warning_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.cancel_the_warning_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // optional bytes borrow_bid = 2;
  if (has_borrow_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->borrow_bid(), target);
  }

  // optional int32 status_early_warning = 3;
  if (has_status_early_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status_early_warning(), target);
  }

  // optional bytes cancel_the_warn_time = 4;
  if (has_cancel_the_warn_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cancel_the_warn_time(), target);
  }

  // optional bytes cancel_the_warning_operation = 5;
  if (has_cancel_the_warning_operation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cancel_the_warning_operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.cancel_the_warning_ans)
  return target;
}

int cancel_the_warning_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional bytes borrow_bid = 2;
    if (has_borrow_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid());
    }

    // optional int32 status_early_warning = 3;
    if (has_status_early_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_early_warning());
    }

    // optional bytes cancel_the_warn_time = 4;
    if (has_cancel_the_warn_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cancel_the_warn_time());
    }

    // optional bytes cancel_the_warning_operation = 5;
    if (has_cancel_the_warning_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cancel_the_warning_operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancel_the_warning_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancel_the_warning_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancel_the_warning_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancel_the_warning_ans::MergeFrom(const cancel_the_warning_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_borrow_bid()) {
      set_borrow_bid(from.borrow_bid());
    }
    if (from.has_status_early_warning()) {
      set_status_early_warning(from.status_early_warning());
    }
    if (from.has_cancel_the_warn_time()) {
      set_cancel_the_warn_time(from.cancel_the_warn_time());
    }
    if (from.has_cancel_the_warning_operation()) {
      set_cancel_the_warning_operation(from.cancel_the_warning_operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancel_the_warning_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancel_the_warning_ans::CopyFrom(const cancel_the_warning_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancel_the_warning_ans::IsInitialized() const {

  return true;
}

void cancel_the_warning_ans::Swap(cancel_the_warning_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(borrow_bid_, other->borrow_bid_);
    std::swap(status_early_warning_, other->status_early_warning_);
    std::swap(cancel_the_warn_time_, other->cancel_the_warn_time_);
    std::swap(cancel_the_warning_operation_, other->cancel_the_warning_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancel_the_warning_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancel_the_warning_ans_descriptor_;
  metadata.reflection = cancel_the_warning_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modify_save_warning_ask::kAskHeaderFieldNumber;
const int modify_save_warning_ask::kIdFieldNumber;
const int modify_save_warning_ask::kOperaterFieldNumber;
const int modify_save_warning_ask::kOperaterTimeFieldNumber;
const int modify_save_warning_ask::kRemarkFieldNumber;
#endif  // !_MSC_VER

modify_save_warning_ask::modify_save_warning_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.modify_save_warning_ask)
}

void modify_save_warning_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

modify_save_warning_ask::modify_save_warning_ask(const modify_save_warning_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.modify_save_warning_ask)
}

void modify_save_warning_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_ = 0;
  operater_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operater_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_save_warning_ask::~modify_save_warning_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.modify_save_warning_ask)
  SharedDtor();
}

void modify_save_warning_ask::SharedDtor() {
  if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_;
  }
  if (operater_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operater_time_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void modify_save_warning_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_save_warning_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_save_warning_ask_descriptor_;
}

const modify_save_warning_ask& modify_save_warning_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

modify_save_warning_ask* modify_save_warning_ask::default_instance_ = NULL;

modify_save_warning_ask* modify_save_warning_ask::New() const {
  return new modify_save_warning_ask;
}

void modify_save_warning_ask::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    id_ = 0;
    if (has_operater()) {
      if (operater_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operater_->clear();
      }
    }
    if (has_operater_time()) {
      if (operater_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operater_time_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_save_warning_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.modify_save_warning_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operater;
        break;
      }

      // optional bytes operater = 3;
      case 3: {
        if (tag == 26) {
         parse_operater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operater()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_operater_time;
        break;
      }

      // optional bytes operater_time = 4;
      case 4: {
        if (tag == 34) {
         parse_operater_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operater_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remark;
        break;
      }

      // optional bytes remark = 5;
      case 5: {
        if (tag == 42) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.modify_save_warning_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.modify_save_warning_ask)
  return false;
#undef DO_
}

void modify_save_warning_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.modify_save_warning_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bytes operater = 3;
  if (has_operater()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->operater(), output);
  }

  // optional bytes operater_time = 4;
  if (has_operater_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->operater_time(), output);
  }

  // optional bytes remark = 5;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.modify_save_warning_ask)
}

::google::protobuf::uint8* modify_save_warning_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.modify_save_warning_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bytes operater = 3;
  if (has_operater()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->operater(), target);
  }

  // optional bytes operater_time = 4;
  if (has_operater_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->operater_time(), target);
  }

  // optional bytes remark = 5;
  if (has_remark()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.modify_save_warning_ask)
  return target;
}

int modify_save_warning_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes operater = 3;
    if (has_operater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operater());
    }

    // optional bytes operater_time = 4;
    if (has_operater_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operater_time());
    }

    // optional bytes remark = 5;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_save_warning_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_save_warning_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_save_warning_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_save_warning_ask::MergeFrom(const modify_save_warning_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_operater()) {
      set_operater(from.operater());
    }
    if (from.has_operater_time()) {
      set_operater_time(from.operater_time());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_save_warning_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_save_warning_ask::CopyFrom(const modify_save_warning_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_save_warning_ask::IsInitialized() const {

  return true;
}

void modify_save_warning_ask::Swap(modify_save_warning_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_, other->id_);
    std::swap(operater_, other->operater_);
    std::swap(operater_time_, other->operater_time_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_save_warning_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_save_warning_ask_descriptor_;
  metadata.reflection = modify_save_warning_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int modify_save_warning_ans::kResultFieldNumber;
#endif  // !_MSC_VER

modify_save_warning_ans::modify_save_warning_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.modify_save_warning_ans)
}

void modify_save_warning_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

modify_save_warning_ans::modify_save_warning_ans(const modify_save_warning_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.modify_save_warning_ans)
}

void modify_save_warning_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

modify_save_warning_ans::~modify_save_warning_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.modify_save_warning_ans)
  SharedDtor();
}

void modify_save_warning_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void modify_save_warning_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modify_save_warning_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return modify_save_warning_ans_descriptor_;
}

const modify_save_warning_ans& modify_save_warning_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

modify_save_warning_ans* modify_save_warning_ans::default_instance_ = NULL;

modify_save_warning_ans* modify_save_warning_ans::New() const {
  return new modify_save_warning_ans;
}

void modify_save_warning_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool modify_save_warning_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.modify_save_warning_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.modify_save_warning_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.modify_save_warning_ans)
  return false;
#undef DO_
}

void modify_save_warning_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.modify_save_warning_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.modify_save_warning_ans)
}

::google::protobuf::uint8* modify_save_warning_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.modify_save_warning_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.modify_save_warning_ans)
  return target;
}

int modify_save_warning_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modify_save_warning_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const modify_save_warning_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const modify_save_warning_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void modify_save_warning_ans::MergeFrom(const modify_save_warning_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void modify_save_warning_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modify_save_warning_ans::CopyFrom(const modify_save_warning_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modify_save_warning_ans::IsInitialized() const {

  return true;
}

void modify_save_warning_ans::Swap(modify_save_warning_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata modify_save_warning_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = modify_save_warning_ans_descriptor_;
  metadata.reflection = modify_save_warning_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bid_detail_ask::kAskHeaderFieldNumber;
const int bid_detail_ask::kIdFieldNumber;
const int bid_detail_ask::kMobilePhoneFieldNumber;
const int bid_detail_ask::kIdNoFieldNumber;
#endif  // !_MSC_VER

bid_detail_ask::bid_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.bid_detail_ask)
}

void bid_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

bid_detail_ask::bid_detail_ask(const bid_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.bid_detail_ask)
}

void bid_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ask_header_ = NULL;
  id_ = 0;
  mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bid_detail_ask::~bid_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.bid_detail_ask)
  SharedDtor();
}

void bid_detail_ask::SharedDtor() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_no_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void bid_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bid_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bid_detail_ask_descriptor_;
}

const bid_detail_ask& bid_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

bid_detail_ask* bid_detail_ask::default_instance_ = NULL;

bid_detail_ask* bid_detail_ask::New() const {
  return new bid_detail_ask;
}

void bid_detail_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    id_ = 0;
    if (has_mobile_phone()) {
      if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobile_phone_->clear();
      }
    }
    if (has_id_no()) {
      if (id_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bid_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.bid_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobile_phone;
        break;
      }

      // optional bytes mobile_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobile_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobile_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_no;
        break;
      }

      // optional bytes id_no = 4;
      case 4: {
        if (tag == 34) {
         parse_id_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.bid_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.bid_detail_ask)
  return false;
#undef DO_
}

void bid_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.bid_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobile_phone(), output);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.bid_detail_ask)
}

::google::protobuf::uint8* bid_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.bid_detail_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bytes mobile_phone = 3;
  if (has_mobile_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobile_phone(), target);
  }

  // optional bytes id_no = 4;
  if (has_id_no()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.bid_detail_ask)
  return target;
}

int bid_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes mobile_phone = 3;
    if (has_mobile_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobile_phone());
    }

    // optional bytes id_no = 4;
    if (has_id_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bid_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bid_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bid_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bid_detail_ask::MergeFrom(const bid_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mobile_phone()) {
      set_mobile_phone(from.mobile_phone());
    }
    if (from.has_id_no()) {
      set_id_no(from.id_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bid_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bid_detail_ask::CopyFrom(const bid_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bid_detail_ask::IsInitialized() const {

  return true;
}

void bid_detail_ask::Swap(bid_detail_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(id_, other->id_);
    std::swap(mobile_phone_, other->mobile_phone_);
    std::swap(id_no_, other->id_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bid_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bid_detail_ask_descriptor_;
  metadata.reflection = bid_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrow_bid_detail_info::kBorrowBidFieldNumber;
const int borrow_bid_detail_info::kBidNameFieldNumber;
const int borrow_bid_detail_info::kBorrowMoneyFieldNumber;
const int borrow_bid_detail_info::kBorrowRateFieldNumber;
const int borrow_bid_detail_info::kGuaranteedRateFieldNumber;
const int borrow_bid_detail_info::kBorrowTimeFieldNumber;
const int borrow_bid_detail_info::kBorrowBidTypeFieldNumber;
const int borrow_bid_detail_info::kBorrowBidStatusFieldNumber;
const int borrow_bid_detail_info::kJindiaoNickFieldNumber;
const int borrow_bid_detail_info::kAmountGuaranteedFieldNumber;
const int borrow_bid_detail_info::kLPTimeFieldNumber;
const int borrow_bid_detail_info::kIsIndeedLPFieldNumber;
const int borrow_bid_detail_info::kAlreadyRebackAmountFieldNumber;
const int borrow_bid_detail_info::kWaitRebackAmountFieldNumber;
const int borrow_bid_detail_info::kLPAddressFieldNumber;
const int borrow_bid_detail_info::kReasonsForGuaranteeFieldNumber;
const int borrow_bid_detail_info::kPictureUrlFieldNumber;
#endif  // !_MSC_VER

borrow_bid_detail_info::borrow_bid_detail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.borrow_bid_detail_info)
}

void borrow_bid_detail_info::InitAsDefaultInstance() {
}

borrow_bid_detail_info::borrow_bid_detail_info(const borrow_bid_detail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.borrow_bid_detail_info)
}

void borrow_bid_detail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_money_ = 0;
  borrow_rate_ = 0;
  guaranteed_rate_ = 0;
  borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_bid_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jindiao_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_guaranteed_ = 0;
  lp_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_indeed_lp_ = 0;
  already_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wait_reback_amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lp_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reasons_for_guarantee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrow_bid_detail_info::~borrow_bid_detail_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.borrow_bid_detail_info)
  SharedDtor();
}

void borrow_bid_detail_info::SharedDtor() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_time_;
  }
  if (borrow_bid_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_type_;
  }
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_status_;
  }
  if (jindiao_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jindiao_nick_;
  }
  if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_time_;
  }
  if (already_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete already_reback_amount_;
  }
  if (wait_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wait_reback_amount_;
  }
  if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lp_address_;
  }
  if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reasons_for_guarantee_;
  }
  if (this != default_instance_) {
  }
}

void borrow_bid_detail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrow_bid_detail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrow_bid_detail_info_descriptor_;
}

const borrow_bid_detail_info& borrow_bid_detail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

borrow_bid_detail_info* borrow_bid_detail_info::default_instance_ = NULL;

borrow_bid_detail_info* borrow_bid_detail_info::New() const {
  return new borrow_bid_detail_info;
}

void borrow_bid_detail_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<borrow_bid_detail_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(borrow_money_, borrow_rate_);
    if (has_borrow_bid()) {
      if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_->clear();
      }
    }
    if (has_bid_name()) {
      if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_name_->clear();
      }
    }
    guaranteed_rate_ = 0;
    if (has_borrow_time()) {
      if (borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_time_->clear();
      }
    }
    if (has_borrow_bid_type()) {
      if (borrow_bid_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_type_->clear();
      }
    }
    if (has_borrow_bid_status()) {
      if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_status_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_jindiao_nick()) {
      if (jindiao_nick_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jindiao_nick_->clear();
      }
    }
    amount_guaranteed_ = 0;
    if (has_lp_time()) {
      if (lp_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lp_time_->clear();
      }
    }
    is_indeed_lp_ = 0;
    if (has_already_reback_amount()) {
      if (already_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        already_reback_amount_->clear();
      }
    }
    if (has_wait_reback_amount()) {
      if (wait_reback_amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wait_reback_amount_->clear();
      }
    }
    if (has_lp_address()) {
      if (lp_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lp_address_->clear();
      }
    }
    if (has_reasons_for_guarantee()) {
      if (reasons_for_guarantee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reasons_for_guarantee_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  picture_url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrow_bid_detail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.borrow_bid_detail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes borrow_bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid_name;
        break;
      }

      // optional bytes bid_name = 2;
      case 2: {
        if (tag == 18) {
         parse_bid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_borrow_money;
        break;
      }

      // optional float borrow_money = 3;
      case 3: {
        if (tag == 29) {
         parse_borrow_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_money_)));
          set_has_borrow_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_borrow_rate;
        break;
      }

      // optional float borrow_rate = 4;
      case 4: {
        if (tag == 37) {
         parse_borrow_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_rate_)));
          set_has_borrow_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_guaranteed_rate;
        break;
      }

      // optional float guaranteed_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_guaranteed_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &guaranteed_rate_)));
          set_has_guaranteed_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_borrow_time;
        break;
      }

      // optional bytes borrow_time = 6;
      case 6: {
        if (tag == 50) {
         parse_borrow_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_borrow_bid_type;
        break;
      }

      // optional bytes borrow_bid_type = 7;
      case 7: {
        if (tag == 58) {
         parse_borrow_bid_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_borrow_bid_status;
        break;
      }

      // optional bytes borrow_bid_status = 8;
      case 8: {
        if (tag == 66) {
         parse_borrow_bid_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_jindiao_nick;
        break;
      }

      // optional bytes jindiao_nick = 9;
      case 9: {
        if (tag == 74) {
         parse_jindiao_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_jindiao_nick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_amount_guaranteed;
        break;
      }

      // optional float amount_guaranteed = 10;
      case 10: {
        if (tag == 85) {
         parse_amount_guaranteed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_guaranteed_)));
          set_has_amount_guaranteed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_LP_time;
        break;
      }

      // optional bytes LP_time = 11;
      case 11: {
        if (tag == 90) {
         parse_LP_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lp_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_indeed_LP;
        break;
      }

      // optional int32 is_indeed_LP = 12;
      case 12: {
        if (tag == 96) {
         parse_is_indeed_LP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_indeed_lp_)));
          set_has_is_indeed_lp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_already_reback_amount;
        break;
      }

      // optional bytes already_reback_amount = 13;
      case 13: {
        if (tag == 106) {
         parse_already_reback_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_already_reback_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_wait_reback_amount;
        break;
      }

      // optional bytes wait_reback_amount = 14;
      case 14: {
        if (tag == 114) {
         parse_wait_reback_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wait_reback_amount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_LP_address;
        break;
      }

      // optional bytes LP_address = 15;
      case 15: {
        if (tag == 122) {
         parse_LP_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lp_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Reasons_for_guarantee;
        break;
      }

      // optional bytes Reasons_for_guarantee = 16;
      case 16: {
        if (tag == 130) {
         parse_Reasons_for_guarantee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reasons_for_guarantee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_picture_url;
        break;
      }

      // repeated bytes picture_url = 17;
      case 17: {
        if (tag == 138) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_picture_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_picture_url;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.borrow_bid_detail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.borrow_bid_detail_info)
  return false;
#undef DO_
}

void borrow_bid_detail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.borrow_bid_detail_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->borrow_bid(), output);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bid_name(), output);
  }

  // optional float borrow_money = 3;
  if (has_borrow_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->borrow_money(), output);
  }

  // optional float borrow_rate = 4;
  if (has_borrow_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->borrow_rate(), output);
  }

  // optional float guaranteed_rate = 5;
  if (has_guaranteed_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->guaranteed_rate(), output);
  }

  // optional bytes borrow_time = 6;
  if (has_borrow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->borrow_time(), output);
  }

  // optional bytes borrow_bid_type = 7;
  if (has_borrow_bid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->borrow_bid_type(), output);
  }

  // optional bytes borrow_bid_status = 8;
  if (has_borrow_bid_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->borrow_bid_status(), output);
  }

  // optional bytes jindiao_nick = 9;
  if (has_jindiao_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->jindiao_nick(), output);
  }

  // optional float amount_guaranteed = 10;
  if (has_amount_guaranteed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->amount_guaranteed(), output);
  }

  // optional bytes LP_time = 11;
  if (has_lp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->lp_time(), output);
  }

  // optional int32 is_indeed_LP = 12;
  if (has_is_indeed_lp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_indeed_lp(), output);
  }

  // optional bytes already_reback_amount = 13;
  if (has_already_reback_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->already_reback_amount(), output);
  }

  // optional bytes wait_reback_amount = 14;
  if (has_wait_reback_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->wait_reback_amount(), output);
  }

  // optional bytes LP_address = 15;
  if (has_lp_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->lp_address(), output);
  }

  // optional bytes Reasons_for_guarantee = 16;
  if (has_reasons_for_guarantee()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->reasons_for_guarantee(), output);
  }

  // repeated bytes picture_url = 17;
  for (int i = 0; i < this->picture_url_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->picture_url(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.borrow_bid_detail_info)
}

::google::protobuf::uint8* borrow_bid_detail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.borrow_bid_detail_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->borrow_bid(), target);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bid_name(), target);
  }

  // optional float borrow_money = 3;
  if (has_borrow_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->borrow_money(), target);
  }

  // optional float borrow_rate = 4;
  if (has_borrow_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->borrow_rate(), target);
  }

  // optional float guaranteed_rate = 5;
  if (has_guaranteed_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->guaranteed_rate(), target);
  }

  // optional bytes borrow_time = 6;
  if (has_borrow_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->borrow_time(), target);
  }

  // optional bytes borrow_bid_type = 7;
  if (has_borrow_bid_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->borrow_bid_type(), target);
  }

  // optional bytes borrow_bid_status = 8;
  if (has_borrow_bid_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->borrow_bid_status(), target);
  }

  // optional bytes jindiao_nick = 9;
  if (has_jindiao_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->jindiao_nick(), target);
  }

  // optional float amount_guaranteed = 10;
  if (has_amount_guaranteed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->amount_guaranteed(), target);
  }

  // optional bytes LP_time = 11;
  if (has_lp_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->lp_time(), target);
  }

  // optional int32 is_indeed_LP = 12;
  if (has_is_indeed_lp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_indeed_lp(), target);
  }

  // optional bytes already_reback_amount = 13;
  if (has_already_reback_amount()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->already_reback_amount(), target);
  }

  // optional bytes wait_reback_amount = 14;
  if (has_wait_reback_amount()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->wait_reback_amount(), target);
  }

  // optional bytes LP_address = 15;
  if (has_lp_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->lp_address(), target);
  }

  // optional bytes Reasons_for_guarantee = 16;
  if (has_reasons_for_guarantee()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->reasons_for_guarantee(), target);
  }

  // repeated bytes picture_url = 17;
  for (int i = 0; i < this->picture_url_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(17, this->picture_url(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.borrow_bid_detail_info)
  return target;
}

int borrow_bid_detail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes borrow_bid = 1;
    if (has_borrow_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid());
    }

    // optional bytes bid_name = 2;
    if (has_bid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_name());
    }

    // optional float borrow_money = 3;
    if (has_borrow_money()) {
      total_size += 1 + 4;
    }

    // optional float borrow_rate = 4;
    if (has_borrow_rate()) {
      total_size += 1 + 4;
    }

    // optional float guaranteed_rate = 5;
    if (has_guaranteed_rate()) {
      total_size += 1 + 4;
    }

    // optional bytes borrow_time = 6;
    if (has_borrow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_time());
    }

    // optional bytes borrow_bid_type = 7;
    if (has_borrow_bid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid_type());
    }

    // optional bytes borrow_bid_status = 8;
    if (has_borrow_bid_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes jindiao_nick = 9;
    if (has_jindiao_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->jindiao_nick());
    }

    // optional float amount_guaranteed = 10;
    if (has_amount_guaranteed()) {
      total_size += 1 + 4;
    }

    // optional bytes LP_time = 11;
    if (has_lp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lp_time());
    }

    // optional int32 is_indeed_LP = 12;
    if (has_is_indeed_lp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_indeed_lp());
    }

    // optional bytes already_reback_amount = 13;
    if (has_already_reback_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->already_reback_amount());
    }

    // optional bytes wait_reback_amount = 14;
    if (has_wait_reback_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wait_reback_amount());
    }

    // optional bytes LP_address = 15;
    if (has_lp_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lp_address());
    }

    // optional bytes Reasons_for_guarantee = 16;
    if (has_reasons_for_guarantee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reasons_for_guarantee());
    }

  }
  // repeated bytes picture_url = 17;
  total_size += 2 * this->picture_url_size();
  for (int i = 0; i < this->picture_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->picture_url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrow_bid_detail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrow_bid_detail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrow_bid_detail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrow_bid_detail_info::MergeFrom(const borrow_bid_detail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  picture_url_.MergeFrom(from.picture_url_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borrow_bid()) {
      set_borrow_bid(from.borrow_bid());
    }
    if (from.has_bid_name()) {
      set_bid_name(from.bid_name());
    }
    if (from.has_borrow_money()) {
      set_borrow_money(from.borrow_money());
    }
    if (from.has_borrow_rate()) {
      set_borrow_rate(from.borrow_rate());
    }
    if (from.has_guaranteed_rate()) {
      set_guaranteed_rate(from.guaranteed_rate());
    }
    if (from.has_borrow_time()) {
      set_borrow_time(from.borrow_time());
    }
    if (from.has_borrow_bid_type()) {
      set_borrow_bid_type(from.borrow_bid_type());
    }
    if (from.has_borrow_bid_status()) {
      set_borrow_bid_status(from.borrow_bid_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jindiao_nick()) {
      set_jindiao_nick(from.jindiao_nick());
    }
    if (from.has_amount_guaranteed()) {
      set_amount_guaranteed(from.amount_guaranteed());
    }
    if (from.has_lp_time()) {
      set_lp_time(from.lp_time());
    }
    if (from.has_is_indeed_lp()) {
      set_is_indeed_lp(from.is_indeed_lp());
    }
    if (from.has_already_reback_amount()) {
      set_already_reback_amount(from.already_reback_amount());
    }
    if (from.has_wait_reback_amount()) {
      set_wait_reback_amount(from.wait_reback_amount());
    }
    if (from.has_lp_address()) {
      set_lp_address(from.lp_address());
    }
    if (from.has_reasons_for_guarantee()) {
      set_reasons_for_guarantee(from.reasons_for_guarantee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrow_bid_detail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrow_bid_detail_info::CopyFrom(const borrow_bid_detail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrow_bid_detail_info::IsInitialized() const {

  return true;
}

void borrow_bid_detail_info::Swap(borrow_bid_detail_info* other) {
  if (other != this) {
    std::swap(borrow_bid_, other->borrow_bid_);
    std::swap(bid_name_, other->bid_name_);
    std::swap(borrow_money_, other->borrow_money_);
    std::swap(borrow_rate_, other->borrow_rate_);
    std::swap(guaranteed_rate_, other->guaranteed_rate_);
    std::swap(borrow_time_, other->borrow_time_);
    std::swap(borrow_bid_type_, other->borrow_bid_type_);
    std::swap(borrow_bid_status_, other->borrow_bid_status_);
    std::swap(jindiao_nick_, other->jindiao_nick_);
    std::swap(amount_guaranteed_, other->amount_guaranteed_);
    std::swap(lp_time_, other->lp_time_);
    std::swap(is_indeed_lp_, other->is_indeed_lp_);
    std::swap(already_reback_amount_, other->already_reback_amount_);
    std::swap(wait_reback_amount_, other->wait_reback_amount_);
    std::swap(lp_address_, other->lp_address_);
    std::swap(reasons_for_guarantee_, other->reasons_for_guarantee_);
    picture_url_.Swap(&other->picture_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrow_bid_detail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrow_bid_detail_info_descriptor_;
  metadata.reflection = borrow_bid_detail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qiaoqiao_bid_info::kBorrowBidFieldNumber;
const int qiaoqiao_bid_info::kBidNameFieldNumber;
const int qiaoqiao_bid_info::kBorrowMoneyFieldNumber;
const int qiaoqiao_bid_info::kBorrowRateFieldNumber;
const int qiaoqiao_bid_info::kRepaymentDeadtimeFieldNumber;
const int qiaoqiao_bid_info::kPublishBorrowTimeFieldNumber;
const int qiaoqiao_bid_info::kBorrowBidStatusFieldNumber;
#endif  // !_MSC_VER

qiaoqiao_bid_info::qiaoqiao_bid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.qiaoqiao_bid_info)
}

void qiaoqiao_bid_info::InitAsDefaultInstance() {
}

qiaoqiao_bid_info::qiaoqiao_bid_info(const qiaoqiao_bid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.qiaoqiao_bid_info)
}

void qiaoqiao_bid_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  borrow_bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_money_ = 0;
  borrow_rate_ = 0;
  repayment_deadtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_borrow_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  borrow_bid_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qiaoqiao_bid_info::~qiaoqiao_bid_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.qiaoqiao_bid_info)
  SharedDtor();
}

void qiaoqiao_bid_info::SharedDtor() {
  if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_;
  }
  if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_name_;
  }
  if (repayment_deadtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repayment_deadtime_;
  }
  if (publish_borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publish_borrow_time_;
  }
  if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borrow_bid_status_;
  }
  if (this != default_instance_) {
  }
}

void qiaoqiao_bid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qiaoqiao_bid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qiaoqiao_bid_info_descriptor_;
}

const qiaoqiao_bid_info& qiaoqiao_bid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

qiaoqiao_bid_info* qiaoqiao_bid_info::default_instance_ = NULL;

qiaoqiao_bid_info* qiaoqiao_bid_info::New() const {
  return new qiaoqiao_bid_info;
}

void qiaoqiao_bid_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<qiaoqiao_bid_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(borrow_money_, borrow_rate_);
    if (has_borrow_bid()) {
      if (borrow_bid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_->clear();
      }
    }
    if (has_bid_name()) {
      if (bid_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bid_name_->clear();
      }
    }
    if (has_repayment_deadtime()) {
      if (repayment_deadtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repayment_deadtime_->clear();
      }
    }
    if (has_publish_borrow_time()) {
      if (publish_borrow_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        publish_borrow_time_->clear();
      }
    }
    if (has_borrow_bid_status()) {
      if (borrow_bid_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borrow_bid_status_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qiaoqiao_bid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.qiaoqiao_bid_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes borrow_bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid_name;
        break;
      }

      // optional bytes bid_name = 2;
      case 2: {
        if (tag == 18) {
         parse_bid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_borrow_money;
        break;
      }

      // optional float borrow_money = 3;
      case 3: {
        if (tag == 29) {
         parse_borrow_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_money_)));
          set_has_borrow_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_borrow_rate;
        break;
      }

      // optional float borrow_rate = 4;
      case 4: {
        if (tag == 37) {
         parse_borrow_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &borrow_rate_)));
          set_has_borrow_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_repayment_deadtime;
        break;
      }

      // optional bytes repayment_deadtime = 5;
      case 5: {
        if (tag == 42) {
         parse_repayment_deadtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_repayment_deadtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_publish_borrow_time;
        break;
      }

      // optional bytes publish_borrow_time = 6;
      case 6: {
        if (tag == 50) {
         parse_publish_borrow_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publish_borrow_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_borrow_bid_status;
        break;
      }

      // optional bytes borrow_bid_status = 7;
      case 7: {
        if (tag == 58) {
         parse_borrow_bid_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_borrow_bid_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.qiaoqiao_bid_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.qiaoqiao_bid_info)
  return false;
#undef DO_
}

void qiaoqiao_bid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.qiaoqiao_bid_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->borrow_bid(), output);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bid_name(), output);
  }

  // optional float borrow_money = 3;
  if (has_borrow_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->borrow_money(), output);
  }

  // optional float borrow_rate = 4;
  if (has_borrow_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->borrow_rate(), output);
  }

  // optional bytes repayment_deadtime = 5;
  if (has_repayment_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->repayment_deadtime(), output);
  }

  // optional bytes publish_borrow_time = 6;
  if (has_publish_borrow_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->publish_borrow_time(), output);
  }

  // optional bytes borrow_bid_status = 7;
  if (has_borrow_bid_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->borrow_bid_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.qiaoqiao_bid_info)
}

::google::protobuf::uint8* qiaoqiao_bid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.qiaoqiao_bid_info)
  // optional bytes borrow_bid = 1;
  if (has_borrow_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->borrow_bid(), target);
  }

  // optional bytes bid_name = 2;
  if (has_bid_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bid_name(), target);
  }

  // optional float borrow_money = 3;
  if (has_borrow_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->borrow_money(), target);
  }

  // optional float borrow_rate = 4;
  if (has_borrow_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->borrow_rate(), target);
  }

  // optional bytes repayment_deadtime = 5;
  if (has_repayment_deadtime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->repayment_deadtime(), target);
  }

  // optional bytes publish_borrow_time = 6;
  if (has_publish_borrow_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->publish_borrow_time(), target);
  }

  // optional bytes borrow_bid_status = 7;
  if (has_borrow_bid_status()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->borrow_bid_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.qiaoqiao_bid_info)
  return target;
}

int qiaoqiao_bid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes borrow_bid = 1;
    if (has_borrow_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid());
    }

    // optional bytes bid_name = 2;
    if (has_bid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_name());
    }

    // optional float borrow_money = 3;
    if (has_borrow_money()) {
      total_size += 1 + 4;
    }

    // optional float borrow_rate = 4;
    if (has_borrow_rate()) {
      total_size += 1 + 4;
    }

    // optional bytes repayment_deadtime = 5;
    if (has_repayment_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->repayment_deadtime());
    }

    // optional bytes publish_borrow_time = 6;
    if (has_publish_borrow_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publish_borrow_time());
    }

    // optional bytes borrow_bid_status = 7;
    if (has_borrow_bid_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->borrow_bid_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qiaoqiao_bid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qiaoqiao_bid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qiaoqiao_bid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qiaoqiao_bid_info::MergeFrom(const qiaoqiao_bid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_borrow_bid()) {
      set_borrow_bid(from.borrow_bid());
    }
    if (from.has_bid_name()) {
      set_bid_name(from.bid_name());
    }
    if (from.has_borrow_money()) {
      set_borrow_money(from.borrow_money());
    }
    if (from.has_borrow_rate()) {
      set_borrow_rate(from.borrow_rate());
    }
    if (from.has_repayment_deadtime()) {
      set_repayment_deadtime(from.repayment_deadtime());
    }
    if (from.has_publish_borrow_time()) {
      set_publish_borrow_time(from.publish_borrow_time());
    }
    if (from.has_borrow_bid_status()) {
      set_borrow_bid_status(from.borrow_bid_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qiaoqiao_bid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qiaoqiao_bid_info::CopyFrom(const qiaoqiao_bid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qiaoqiao_bid_info::IsInitialized() const {

  return true;
}

void qiaoqiao_bid_info::Swap(qiaoqiao_bid_info* other) {
  if (other != this) {
    std::swap(borrow_bid_, other->borrow_bid_);
    std::swap(bid_name_, other->bid_name_);
    std::swap(borrow_money_, other->borrow_money_);
    std::swap(borrow_rate_, other->borrow_rate_);
    std::swap(repayment_deadtime_, other->repayment_deadtime_);
    std::swap(publish_borrow_time_, other->publish_borrow_time_);
    std::swap(borrow_bid_status_, other->borrow_bid_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qiaoqiao_bid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qiaoqiao_bid_info_descriptor_;
  metadata.reflection = qiaoqiao_bid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int borrow_bid_detail_ans::kResultFieldNumber;
const int borrow_bid_detail_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

borrow_bid_detail_ans::borrow_bid_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.borrow_bid_detail_ans)
}

void borrow_bid_detail_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

borrow_bid_detail_ans::borrow_bid_detail_ans(const borrow_bid_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.borrow_bid_detail_ans)
}

void borrow_bid_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

borrow_bid_detail_ans::~borrow_bid_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.borrow_bid_detail_ans)
  SharedDtor();
}

void borrow_bid_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void borrow_bid_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* borrow_bid_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return borrow_bid_detail_ans_descriptor_;
}

const borrow_bid_detail_ans& borrow_bid_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

borrow_bid_detail_ans* borrow_bid_detail_ans::default_instance_ = NULL;

borrow_bid_detail_ans* borrow_bid_detail_ans::New() const {
  return new borrow_bid_detail_ans;
}

void borrow_bid_detail_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool borrow_bid_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.borrow_bid_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.borrow_bid_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.borrow_bid_detail_ans)
  return false;
#undef DO_
}

void borrow_bid_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.borrow_bid_detail_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.borrow_bid_detail_ans)
}

::google::protobuf::uint8* borrow_bid_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.borrow_bid_detail_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.borrow_bid_detail_ans)
  return target;
}

int borrow_bid_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .AFP_main_frame.borrow_bid_detail_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void borrow_bid_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const borrow_bid_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const borrow_bid_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void borrow_bid_detail_ans::MergeFrom(const borrow_bid_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void borrow_bid_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void borrow_bid_detail_ans::CopyFrom(const borrow_bid_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool borrow_bid_detail_ans::IsInitialized() const {

  return true;
}

void borrow_bid_detail_ans::Swap(borrow_bid_detail_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata borrow_bid_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = borrow_bid_detail_ans_descriptor_;
  metadata.reflection = borrow_bid_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qiaoqiao_bid_ans::kResultFieldNumber;
const int qiaoqiao_bid_ans::kInfoFieldNumber;
#endif  // !_MSC_VER

qiaoqiao_bid_ans::qiaoqiao_bid_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.qiaoqiao_bid_ans)
}

void qiaoqiao_bid_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

qiaoqiao_bid_ans::qiaoqiao_bid_ans(const qiaoqiao_bid_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.qiaoqiao_bid_ans)
}

void qiaoqiao_bid_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qiaoqiao_bid_ans::~qiaoqiao_bid_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.qiaoqiao_bid_ans)
  SharedDtor();
}

void qiaoqiao_bid_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void qiaoqiao_bid_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qiaoqiao_bid_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qiaoqiao_bid_ans_descriptor_;
}

const qiaoqiao_bid_ans& qiaoqiao_bid_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

qiaoqiao_bid_ans* qiaoqiao_bid_ans::default_instance_ = NULL;

qiaoqiao_bid_ans* qiaoqiao_bid_ans::New() const {
  return new qiaoqiao_bid_ans;
}

void qiaoqiao_bid_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qiaoqiao_bid_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.qiaoqiao_bid_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.result_info result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.qiaoqiao_bid_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.qiaoqiao_bid_ans)
  return false;
#undef DO_
}

void qiaoqiao_bid_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.qiaoqiao_bid_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.qiaoqiao_bid_ans)
}

::google::protobuf::uint8* qiaoqiao_bid_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.qiaoqiao_bid_ans)
  // optional .common.result_info result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.qiaoqiao_bid_ans)
  return target;
}

int qiaoqiao_bid_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.result_info result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .AFP_main_frame.qiaoqiao_bid_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qiaoqiao_bid_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qiaoqiao_bid_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qiaoqiao_bid_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qiaoqiao_bid_ans::MergeFrom(const qiaoqiao_bid_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qiaoqiao_bid_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qiaoqiao_bid_ans::CopyFrom(const qiaoqiao_bid_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qiaoqiao_bid_ans::IsInitialized() const {

  return true;
}

void qiaoqiao_bid_ans::Swap(qiaoqiao_bid_ans* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qiaoqiao_bid_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qiaoqiao_bid_ans_descriptor_;
  metadata.reflection = qiaoqiao_bid_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int province_city_inquire_ask::kIdFieldNumber;
const int province_city_inquire_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

province_city_inquire_ask::province_city_inquire_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.province_city_inquire_ask)
}

void province_city_inquire_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

province_city_inquire_ask::province_city_inquire_ask(const province_city_inquire_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.province_city_inquire_ask)
}

void province_city_inquire_ask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

province_city_inquire_ask::~province_city_inquire_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.province_city_inquire_ask)
  SharedDtor();
}

void province_city_inquire_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void province_city_inquire_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_city_inquire_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_city_inquire_ask_descriptor_;
}

const province_city_inquire_ask& province_city_inquire_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

province_city_inquire_ask* province_city_inquire_ask::default_instance_ = NULL;

province_city_inquire_ask* province_city_inquire_ask::New() const {
  return new province_city_inquire_ask;
}

void province_city_inquire_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool province_city_inquire_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.province_city_inquire_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.province_city_inquire_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.province_city_inquire_ask)
  return false;
#undef DO_
}

void province_city_inquire_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.province_city_inquire_ask)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.province_city_inquire_ask)
}

::google::protobuf::uint8* province_city_inquire_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.province_city_inquire_ask)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.province_city_inquire_ask)
  return target;
}

int province_city_inquire_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_city_inquire_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const province_city_inquire_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const province_city_inquire_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_city_inquire_ask::MergeFrom(const province_city_inquire_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void province_city_inquire_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_city_inquire_ask::CopyFrom(const province_city_inquire_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_city_inquire_ask::IsInitialized() const {

  return true;
}

void province_city_inquire_ask::Swap(province_city_inquire_ask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata province_city_inquire_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_city_inquire_ask_descriptor_;
  metadata.reflection = province_city_inquire_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int province_city_inquire_ans::kProvinceOrCityFieldNumber;
const int province_city_inquire_ans::kResultFieldNumber;
#endif  // !_MSC_VER

province_city_inquire_ans::province_city_inquire_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.province_city_inquire_ans)
}

void province_city_inquire_ans::InitAsDefaultInstance() {
  result_ = const_cast< ::common::result_info*>(&::common::result_info::default_instance());
}

province_city_inquire_ans::province_city_inquire_ans(const province_city_inquire_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.province_city_inquire_ans)
}

void province_city_inquire_ans::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

province_city_inquire_ans::~province_city_inquire_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.province_city_inquire_ans)
  SharedDtor();
}

void province_city_inquire_ans::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void province_city_inquire_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_city_inquire_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_city_inquire_ans_descriptor_;
}

const province_city_inquire_ans& province_city_inquire_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

province_city_inquire_ans* province_city_inquire_ans::default_instance_ = NULL;

province_city_inquire_ans* province_city_inquire_ans::New() const {
  return new province_city_inquire_ans;
}

void province_city_inquire_ans::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::common::result_info::Clear();
  }
  province_or_city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool province_city_inquire_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.province_city_inquire_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.area_name province_or_city = 1;
      case 1: {
        if (tag == 10) {
         parse_province_or_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_province_or_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_province_or_city;
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional .common.result_info result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.province_city_inquire_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.province_city_inquire_ans)
  return false;
#undef DO_
}

void province_city_inquire_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.province_city_inquire_ans)
  // repeated .AFP_main_frame.area_name province_or_city = 1;
  for (int i = 0; i < this->province_or_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->province_or_city(i), output);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.province_city_inquire_ans)
}

::google::protobuf::uint8* province_city_inquire_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.province_city_inquire_ans)
  // repeated .AFP_main_frame.area_name province_or_city = 1;
  for (int i = 0; i < this->province_or_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->province_or_city(i), target);
  }

  // optional .common.result_info result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.province_city_inquire_ans)
  return target;
}

int province_city_inquire_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.result_info result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .AFP_main_frame.area_name province_or_city = 1;
  total_size += 1 * this->province_or_city_size();
  for (int i = 0; i < this->province_or_city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->province_or_city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_city_inquire_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const province_city_inquire_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const province_city_inquire_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_city_inquire_ans::MergeFrom(const province_city_inquire_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  province_or_city_.MergeFrom(from.province_or_city_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      mutable_result()->::common::result_info::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void province_city_inquire_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_city_inquire_ans::CopyFrom(const province_city_inquire_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_city_inquire_ans::IsInitialized() const {

  return true;
}

void province_city_inquire_ans::Swap(province_city_inquire_ans* other) {
  if (other != this) {
    province_or_city_.Swap(&other->province_or_city_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata province_city_inquire_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_city_inquire_ans_descriptor_;
  metadata.reflection = province_city_inquire_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_info::kFriendIdFieldNumber;
const int friend_info::kFriendUidFieldNumber;
const int friend_info::kNicknameFieldNumber;
const int friend_info::kAvatarFieldNumber;
const int friend_info::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

friend_info::friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.friend_info)
}

void friend_info::InitAsDefaultInstance() {
}

friend_info::friend_info(const friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.friend_info)
}

void friend_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_info::~friend_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.friend_info)
  SharedDtor();
}

void friend_info::SharedDtor() {
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_info_descriptor_;
}

const friend_info& friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

friend_info* friend_info::default_instance_ = NULL;

friend_info* friend_info::New() const {
  return new friend_info;
}

void friend_info::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_friend_id()) {
      if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_id_->clear();
      }
    }
    if (has_friend_uid()) {
      if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_uid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.friend_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes friend_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_uid;
        break;
      }

      // optional bytes friend_uid = 2;
      case 2: {
        if (tag == 18) {
         parse_friend_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updatetime;
        break;
      }

      // optional bytes updatetime = 5;
      case 5: {
        if (tag == 42) {
         parse_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.friend_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.friend_info)
  return false;
#undef DO_
}

void friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.friend_info)
  // optional bytes friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->friend_id(), output);
  }

  // optional bytes friend_uid = 2;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->friend_uid(), output);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nickname(), output);
  }

  // optional bytes avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->avatar(), output);
  }

  // optional bytes updatetime = 5;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.friend_info)
}

::google::protobuf::uint8* friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.friend_info)
  // optional bytes friend_id = 1;
  if (has_friend_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->friend_id(), target);
  }

  // optional bytes friend_uid = 2;
  if (has_friend_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->friend_uid(), target);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nickname(), target);
  }

  // optional bytes avatar = 4;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->avatar(), target);
  }

  // optional bytes updatetime = 5;
  if (has_updatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.friend_info)
  return target;
}

int friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_id());
    }

    // optional bytes friend_uid = 2;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_uid());
    }

    // optional bytes nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional bytes updatetime = 5;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_info::MergeFrom(const friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_info::CopyFrom(const friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_info::IsInitialized() const {

  return true;
}

void friend_info::Swap(friend_info* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_, other->avatar_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_info_descriptor_;
  metadata.reflection = friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_info::kGidFieldNumber;
const int group_info::kQunNicknameFieldNumber;
const int group_info::kAvatarUrlFieldNumber;
const int group_info::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

group_info::group_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.group_info)
}

void group_info::InitAsDefaultInstance() {
}

group_info::group_info(const group_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.group_info)
}

void group_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qun_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_info::~group_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.group_info)
  SharedDtor();
}

void group_info::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (qun_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qun_nickname_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void group_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_info_descriptor_;
}

const group_info& group_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

group_info* group_info::default_instance_ = NULL;

group_info* group_info::New() const {
  return new group_info;
}

void group_info::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
    if (has_qun_nickname()) {
      if (qun_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qun_nickname_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.group_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qun_nickname;
        break;
      }

      // optional bytes qun_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_qun_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qun_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // optional bytes avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updatetime;
        break;
      }

      // optional bytes updatetime = 4;
      case 4: {
        if (tag == 34) {
         parse_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.group_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.group_info)
  return false;
#undef DO_
}

void group_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.group_info)
  // optional bytes gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->gid(), output);
  }

  // optional bytes qun_nickname = 2;
  if (has_qun_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->qun_nickname(), output);
  }

  // optional bytes avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->avatar_url(), output);
  }

  // optional bytes updatetime = 4;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.group_info)
}

::google::protobuf::uint8* group_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.group_info)
  // optional bytes gid = 1;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->gid(), target);
  }

  // optional bytes qun_nickname = 2;
  if (has_qun_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->qun_nickname(), target);
  }

  // optional bytes avatar_url = 3;
  if (has_avatar_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->avatar_url(), target);
  }

  // optional bytes updatetime = 4;
  if (has_updatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.group_info)
  return target;
}

int group_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

    // optional bytes qun_nickname = 2;
    if (has_qun_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qun_nickname());
    }

    // optional bytes avatar_url = 3;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_url());
    }

    // optional bytes updatetime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_info::MergeFrom(const group_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_qun_nickname()) {
      set_qun_nickname(from.qun_nickname());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_info::CopyFrom(const group_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_info::IsInitialized() const {

  return true;
}

void group_info::Swap(group_info* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(qun_nickname_, other->qun_nickname_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_info_descriptor_;
  metadata.reflection = group_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friendqunList_ask::kMobilePhoneFieldNumber;
const int friendqunList_ask::kIdCardFieldNumber;
const int friendqunList_ask::kAskHeaderFieldNumber;
const int friendqunList_ask::kIsNormalFieldNumber;
#endif  // !_MSC_VER

friendqunList_ask::friendqunList_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.friendqunList_ask)
}

void friendqunList_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

friendqunList_ask::friendqunList_ask(const friendqunList_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.friendqunList_ask)
}

void friendqunList_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  is_normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friendqunList_ask::~friendqunList_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.friendqunList_ask)
  SharedDtor();
}

void friendqunList_ask::SharedDtor() {
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete is_normal_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void friendqunList_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friendqunList_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friendqunList_ask_descriptor_;
}

const friendqunList_ask& friendqunList_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

friendqunList_ask* friendqunList_ask::default_instance_ = NULL;

friendqunList_ask* friendqunList_ask::New() const {
  return new friendqunList_ask;
}

void friendqunList_ask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_is_normal()) {
      if (is_normal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        is_normal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friendqunList_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.friendqunList_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes mobilePhone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 2;
      case 2: {
        if (tag == 18) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 3;
      case 3: {
        if (tag == 26) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_is_normal;
        break;
      }

      // optional bytes is_normal = 4;
      case 4: {
        if (tag == 34) {
         parse_is_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_is_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.friendqunList_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.friendqunList_ask)
  return false;
#undef DO_
}

void friendqunList_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.friendqunList_ask)
  // optional bytes mobilePhone = 1;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mobilephone(), output);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id_card(), output);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ask_header(), output);
  }

  // optional bytes is_normal = 4;
  if (has_is_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->is_normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.friendqunList_ask)
}

::google::protobuf::uint8* friendqunList_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.friendqunList_ask)
  // optional bytes mobilePhone = 1;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mobilephone(), target);
  }

  // optional bytes id_card = 2;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id_card(), target);
  }

  // optional .common.common_ask_header ask_header = 3;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ask_header(), target);
  }

  // optional bytes is_normal = 4;
  if (has_is_normal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->is_normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.friendqunList_ask)
  return target;
}

int friendqunList_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes mobilePhone = 1;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 2;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional .common.common_ask_header ask_header = 3;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional bytes is_normal = 4;
    if (has_is_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->is_normal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friendqunList_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friendqunList_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friendqunList_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friendqunList_ask::MergeFrom(const friendqunList_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_is_normal()) {
      set_is_normal(from.is_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friendqunList_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friendqunList_ask::CopyFrom(const friendqunList_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friendqunList_ask::IsInitialized() const {

  return true;
}

void friendqunList_ask::Swap(friendqunList_ask* other) {
  if (other != this) {
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(is_normal_, other->is_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friendqunList_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friendqunList_ask_descriptor_;
  metadata.reflection = friendqunList_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friendqunList_ans::kUserIdFieldNumber;
const int friendqunList_ans::kUidFieldNumber;
const int friendqunList_ans::kNicknameFieldNumber;
const int friendqunList_ans::kAvatarFieldNumber;
const int friendqunList_ans::kFriendListFieldNumber;
const int friendqunList_ans::kGroupListFieldNumber;
const int friendqunList_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

friendqunList_ans::friendqunList_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.friendqunList_ans)
}

void friendqunList_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

friendqunList_ans::friendqunList_ans(const friendqunList_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.friendqunList_ans)
}

void friendqunList_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friendqunList_ans::~friendqunList_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.friendqunList_ans)
  SharedDtor();
}

void friendqunList_ans::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void friendqunList_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friendqunList_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friendqunList_ans_descriptor_;
}

const friendqunList_ans& friendqunList_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

friendqunList_ans* friendqunList_ans::default_instance_ = NULL;

friendqunList_ans* friendqunList_ans::New() const {
  return new friendqunList_ans;
}

void friendqunList_ans::Clear() {
  if (_has_bits_[0 / 32] & 79) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  friend_list_.Clear();
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friendqunList_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.friendqunList_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional bytes uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_friend_list;
        break;
      }

      // repeated .AFP_main_frame.friend_info friend_list = 5;
      case 5: {
        if (tag == 42) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_friend_list;
        if (input->ExpectTag(50)) goto parse_group_list;
        break;
      }

      // repeated .AFP_main_frame.group_info group_list = 6;
      case 6: {
        if (tag == 50) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_group_list;
        if (input->ExpectTag(58)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 7;
      case 7: {
        if (tag == 58) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.friendqunList_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.friendqunList_ans)
  return false;
#undef DO_
}

void friendqunList_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.friendqunList_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uid(), output);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nickname(), output);
  }

  // optional bytes avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->avatar(), output);
  }

  // repeated .AFP_main_frame.friend_info friend_list = 5;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->friend_list(i), output);
  }

  // repeated .AFP_main_frame.group_info group_list = 6;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->group_list(i), output);
  }

  // optional .common.errorinfo error = 7;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.friendqunList_ans)
}

::google::protobuf::uint8* friendqunList_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.friendqunList_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uid(), target);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nickname(), target);
  }

  // optional bytes avatar = 4;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->avatar(), target);
  }

  // repeated .AFP_main_frame.friend_info friend_list = 5;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->friend_list(i), target);
  }

  // repeated .AFP_main_frame.group_info group_list = 6;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->group_list(i), target);
  }

  // optional .common.errorinfo error = 7;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.friendqunList_ans)
  return target;
}

int friendqunList_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional bytes nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional .common.errorinfo error = 7;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.friend_info friend_list = 5;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  // repeated .AFP_main_frame.group_info group_list = 6;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friendqunList_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friendqunList_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friendqunList_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friendqunList_ans::MergeFrom(const friendqunList_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friendqunList_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friendqunList_ans::CopyFrom(const friendqunList_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friendqunList_ans::IsInitialized() const {

  return true;
}

void friendqunList_ans::Swap(friendqunList_ans* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_, other->avatar_);
    friend_list_.Swap(&other->friend_list_);
    group_list_.Swap(&other->group_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friendqunList_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friendqunList_ans_descriptor_;
  metadata.reflection = friendqunList_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_info::kMsgIdFieldNumber;
const int msg_info::kNicknameFieldNumber;
const int msg_info::kAvatarUrlFieldNumber;
const int msg_info::kUpdatetimeFieldNumber;
const int msg_info::kSendIdFieldNumber;
const int msg_info::kRecvIdFieldNumber;
const int msg_info::kTypeFieldNumber;
const int msg_info::kMsgFieldNumber;
const int msg_info::kMsgUrlFieldNumber;
const int msg_info::kVoiceLenFieldNumber;
const int msg_info::kLongitudeFieldNumber;
const int msg_info::kLatitudeFieldNumber;
const int msg_info::kThumbWidthFieldNumber;
const int msg_info::kThumbHightFieldNumber;
const int msg_info::kUidFieldNumber;
const int msg_info::kJsonBodyFieldNumber;
#endif  // !_MSC_VER

msg_info::msg_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.msg_info)
}

void msg_info::InitAsDefaultInstance() {
}

msg_info::msg_info(const msg_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.msg_info)
}

void msg_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_len_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  thumb_width_ = 0;
  thumb_hight_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_info::~msg_info() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.msg_info)
  SharedDtor();
}

void msg_info::SharedDtor() {
  if (msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_id_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (send_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete send_id_;
  }
  if (recv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recv_id_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_url_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (json_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_body_;
  }
  if (this != default_instance_) {
  }
}

void msg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_info_descriptor_;
}

const msg_info& msg_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

msg_info* msg_info::default_instance_ = NULL;

msg_info* msg_info::New() const {
  return new msg_info;
}

void msg_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_msg_id()) {
      if (msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_id_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updatetime_->clear();
      }
    }
    if (has_send_id()) {
      if (send_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        send_id_->clear();
      }
    }
    if (has_recv_id()) {
      if (recv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recv_id_->clear();
      }
    }
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(longitude_, thumb_hight_);
    if (has_msg_url()) {
      if (msg_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_url_->clear();
      }
    }
    voice_len_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_json_body()) {
      if (json_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_body_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.msg_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes msg_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // optional bytes avatar_url = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updatetime;
        break;
      }

      // optional bytes updatetime = 4;
      case 4: {
        if (tag == 34) {
         parse_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_send_id;
        break;
      }

      // optional bytes send_id = 5;
      case 5: {
        if (tag == 42) {
         parse_send_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recv_id;
        break;
      }

      // optional bytes recv_id = 6;
      case 6: {
        if (tag == 50) {
         parse_recv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg;
        break;
      }

      // optional bytes msg = 8;
      case 8: {
        if (tag == 66) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_msg_url;
        break;
      }

      // optional bytes msg_url = 9;
      case 9: {
        if (tag == 74) {
         parse_msg_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_voice_len;
        break;
      }

      // optional int32 voice_len = 10;
      case 10: {
        if (tag == 80) {
         parse_voice_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_len_)));
          set_has_voice_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_longitude;
        break;
      }

      // optional float longitude = 11;
      case 11: {
        if (tag == 93) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_latitude;
        break;
      }

      // optional float latitude = 12;
      case 12: {
        if (tag == 101) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_thumb_width;
        break;
      }

      // optional float thumb_width = 13;
      case 13: {
        if (tag == 109) {
         parse_thumb_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thumb_width_)));
          set_has_thumb_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_thumb_hight;
        break;
      }

      // optional float thumb_hight = 14;
      case 14: {
        if (tag == 117) {
         parse_thumb_hight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thumb_hight_)));
          set_has_thumb_hight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_uid;
        break;
      }

      // optional bytes uid = 15;
      case 15: {
        if (tag == 122) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_json_body;
        break;
      }

      // optional bytes json_body = 16;
      case 16: {
        if (tag == 130) {
         parse_json_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.msg_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.msg_info)
  return false;
#undef DO_
}

void msg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.msg_info)
  // optional bytes msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->msg_id(), output);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // optional bytes avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->avatar_url(), output);
  }

  // optional bytes updatetime = 4;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->updatetime(), output);
  }

  // optional bytes send_id = 5;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->send_id(), output);
  }

  // optional bytes recv_id = 6;
  if (has_recv_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->recv_id(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // optional bytes msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->msg(), output);
  }

  // optional bytes msg_url = 9;
  if (has_msg_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->msg_url(), output);
  }

  // optional int32 voice_len = 10;
  if (has_voice_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->voice_len(), output);
  }

  // optional float longitude = 11;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->longitude(), output);
  }

  // optional float latitude = 12;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->latitude(), output);
  }

  // optional float thumb_width = 13;
  if (has_thumb_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->thumb_width(), output);
  }

  // optional float thumb_hight = 14;
  if (has_thumb_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->thumb_hight(), output);
  }

  // optional bytes uid = 15;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->uid(), output);
  }

  // optional bytes json_body = 16;
  if (has_json_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->json_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.msg_info)
}

::google::protobuf::uint8* msg_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.msg_info)
  // optional bytes msg_id = 1;
  if (has_msg_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg_id(), target);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // optional bytes avatar_url = 3;
  if (has_avatar_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->avatar_url(), target);
  }

  // optional bytes updatetime = 4;
  if (has_updatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->updatetime(), target);
  }

  // optional bytes send_id = 5;
  if (has_send_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->send_id(), target);
  }

  // optional bytes recv_id = 6;
  if (has_recv_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->recv_id(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // optional bytes msg = 8;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->msg(), target);
  }

  // optional bytes msg_url = 9;
  if (has_msg_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->msg_url(), target);
  }

  // optional int32 voice_len = 10;
  if (has_voice_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->voice_len(), target);
  }

  // optional float longitude = 11;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->longitude(), target);
  }

  // optional float latitude = 12;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->latitude(), target);
  }

  // optional float thumb_width = 13;
  if (has_thumb_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->thumb_width(), target);
  }

  // optional float thumb_hight = 14;
  if (has_thumb_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->thumb_hight(), target);
  }

  // optional bytes uid = 15;
  if (has_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->uid(), target);
  }

  // optional bytes json_body = 16;
  if (has_json_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->json_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.msg_info)
  return target;
}

int msg_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_id());
    }

    // optional bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes avatar_url = 3;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_url());
    }

    // optional bytes updatetime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatetime());
    }

    // optional bytes send_id = 5;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_id());
    }

    // optional bytes recv_id = 6;
    if (has_recv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recv_id());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes msg = 8;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes msg_url = 9;
    if (has_msg_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_url());
    }

    // optional int32 voice_len = 10;
    if (has_voice_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_len());
    }

    // optional float longitude = 11;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional float latitude = 12;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float thumb_width = 13;
    if (has_thumb_width()) {
      total_size += 1 + 4;
    }

    // optional float thumb_hight = 14;
    if (has_thumb_hight()) {
      total_size += 1 + 4;
    }

    // optional bytes uid = 15;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional bytes json_body = 16;
    if (has_json_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_info::MergeFrom(const msg_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_send_id()) {
      set_send_id(from.send_id());
    }
    if (from.has_recv_id()) {
      set_recv_id(from.recv_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msg_url()) {
      set_msg_url(from.msg_url());
    }
    if (from.has_voice_len()) {
      set_voice_len(from.voice_len());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_thumb_width()) {
      set_thumb_width(from.thumb_width());
    }
    if (from.has_thumb_hight()) {
      set_thumb_hight(from.thumb_hight());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_json_body()) {
      set_json_body(from.json_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_info::CopyFrom(const msg_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_info::IsInitialized() const {

  return true;
}

void msg_info::Swap(msg_info* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(send_id_, other->send_id_);
    std::swap(recv_id_, other->recv_id_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(msg_url_, other->msg_url_);
    std::swap(voice_len_, other->voice_len_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(thumb_width_, other->thumb_width_);
    std::swap(thumb_hight_, other->thumb_hight_);
    std::swap(uid_, other->uid_);
    std::swap(json_body_, other->json_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_info_descriptor_;
  metadata.reflection = msg_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_msg_ask::kUserIdFieldNumber;
const int single_msg_ask::kUIdFieldNumber;
const int single_msg_ask::kFriendIdFieldNumber;
const int single_msg_ask::kFriendUidFieldNumber;
const int single_msg_ask::kStartTimeFieldNumber;
const int single_msg_ask::kEndTimeFieldNumber;
const int single_msg_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

single_msg_ask::single_msg_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.single_msg_ask)
}

void single_msg_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

single_msg_ask::single_msg_ask(const single_msg_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.single_msg_ask)
}

void single_msg_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_msg_ask::~single_msg_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.single_msg_ask)
  SharedDtor();
}

void single_msg_ask::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void single_msg_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_msg_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_msg_ask_descriptor_;
}

const single_msg_ask& single_msg_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

single_msg_ask* single_msg_ask::default_instance_ = NULL;

single_msg_ask* single_msg_ask::New() const {
  return new single_msg_ask;
}

void single_msg_ask::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_u_id()) {
      if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        u_id_->clear();
      }
    }
    if (has_friend_id()) {
      if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_id_->clear();
      }
    }
    if (has_friend_uid()) {
      if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_uid_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_msg_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.single_msg_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_u_id;
        break;
      }

      // optional bytes u_id = 2;
      case 2: {
        if (tag == 18) {
         parse_u_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_u_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friend_id;
        break;
      }

      // optional bytes friend_id = 3;
      case 3: {
        if (tag == 26) {
         parse_friend_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_uid;
        break;
      }

      // optional bytes friend_uid = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 5;
      case 5: {
        if (tag == 42) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 6;
      case 6: {
        if (tag == 50) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 7;
      case 7: {
        if (tag == 58) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.single_msg_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.single_msg_ask)
  return false;
#undef DO_
}

void single_msg_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.single_msg_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->u_id(), output);
  }

  // optional bytes friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->friend_id(), output);
  }

  // optional bytes friend_uid = 4;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->friend_uid(), output);
  }

  // optional bytes start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->start_time(), output);
  }

  // optional bytes end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->end_time(), output);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.single_msg_ask)
}

::google::protobuf::uint8* single_msg_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.single_msg_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->u_id(), target);
  }

  // optional bytes friend_id = 3;
  if (has_friend_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->friend_id(), target);
  }

  // optional bytes friend_uid = 4;
  if (has_friend_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->friend_uid(), target);
  }

  // optional bytes start_time = 5;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->start_time(), target);
  }

  // optional bytes end_time = 6;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->end_time(), target);
  }

  // optional .common.common_ask_header ask_header = 7;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.single_msg_ask)
  return target;
}

int single_msg_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes u_id = 2;
    if (has_u_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->u_id());
    }

    // optional bytes friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_id());
    }

    // optional bytes friend_uid = 4;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_uid());
    }

    // optional bytes start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional .common.common_ask_header ask_header = 7;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_msg_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_msg_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_msg_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_msg_ask::MergeFrom(const single_msg_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_u_id()) {
      set_u_id(from.u_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_msg_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_msg_ask::CopyFrom(const single_msg_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_msg_ask::IsInitialized() const {

  return true;
}

void single_msg_ask::Swap(single_msg_ask* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(u_id_, other->u_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_msg_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_msg_ask_descriptor_;
  metadata.reflection = single_msg_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_msg_ans::kUserIdFieldNumber;
const int single_msg_ans::kUIdFieldNumber;
const int single_msg_ans::kNicknameFieldNumber;
const int single_msg_ans::kFriendIdFieldNumber;
const int single_msg_ans::kFriendUidFieldNumber;
const int single_msg_ans::kStartTimeFieldNumber;
const int single_msg_ans::kEndTimeFieldNumber;
const int single_msg_ans::kMsgListFieldNumber;
const int single_msg_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

single_msg_ans::single_msg_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.single_msg_ans)
}

void single_msg_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

single_msg_ans::single_msg_ans(const single_msg_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.single_msg_ans)
}

void single_msg_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friend_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_msg_ans::~single_msg_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.single_msg_ans)
  SharedDtor();
}

void single_msg_ans::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_id_;
  }
  if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_uid_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void single_msg_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_msg_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_msg_ans_descriptor_;
}

const single_msg_ans& single_msg_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

single_msg_ans* single_msg_ans::default_instance_ = NULL;

single_msg_ans* single_msg_ans::New() const {
  return new single_msg_ans;
}

void single_msg_ans::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_u_id()) {
      if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        u_id_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_friend_id()) {
      if (friend_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_id_->clear();
      }
    }
    if (has_friend_uid()) {
      if (friend_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friend_uid_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_msg_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.single_msg_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_u_id;
        break;
      }

      // optional bytes u_id = 2;
      case 2: {
        if (tag == 18) {
         parse_u_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_u_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_id;
        break;
      }

      // optional bytes friend_id = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_friend_uid;
        break;
      }

      // optional bytes friend_uid = 5;
      case 5: {
        if (tag == 42) {
         parse_friend_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friend_uid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 6;
      case 6: {
        if (tag == 50) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 7;
      case 7: {
        if (tag == 58) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_list;
        break;
      }

      // repeated .AFP_main_frame.msg_info msg_list = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_list;
        if (input->ExpectTag(74)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 9;
      case 9: {
        if (tag == 74) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.single_msg_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.single_msg_ans)
  return false;
#undef DO_
}

void single_msg_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.single_msg_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->u_id(), output);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nickname(), output);
  }

  // optional bytes friend_id = 4;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->friend_id(), output);
  }

  // optional bytes friend_uid = 5;
  if (has_friend_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->friend_uid(), output);
  }

  // optional bytes start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->start_time(), output);
  }

  // optional bytes end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->end_time(), output);
  }

  // repeated .AFP_main_frame.msg_info msg_list = 8;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->msg_list(i), output);
  }

  // optional .common.errorinfo error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.single_msg_ans)
}

::google::protobuf::uint8* single_msg_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.single_msg_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->u_id(), target);
  }

  // optional bytes nickname = 3;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nickname(), target);
  }

  // optional bytes friend_id = 4;
  if (has_friend_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->friend_id(), target);
  }

  // optional bytes friend_uid = 5;
  if (has_friend_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->friend_uid(), target);
  }

  // optional bytes start_time = 6;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->start_time(), target);
  }

  // optional bytes end_time = 7;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->end_time(), target);
  }

  // repeated .AFP_main_frame.msg_info msg_list = 8;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->msg_list(i), target);
  }

  // optional .common.errorinfo error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.single_msg_ans)
  return target;
}

int single_msg_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes u_id = 2;
    if (has_u_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->u_id());
    }

    // optional bytes nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes friend_id = 4;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_id());
    }

    // optional bytes friend_uid = 5;
    if (has_friend_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friend_uid());
    }

    // optional bytes start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .common.errorinfo error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.msg_info msg_list = 8;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_msg_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_msg_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_msg_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_msg_ans::MergeFrom(const single_msg_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_u_id()) {
      set_u_id(from.u_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_uid()) {
      set_friend_uid(from.friend_uid());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_msg_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_msg_ans::CopyFrom(const single_msg_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_msg_ans::IsInitialized() const {

  return true;
}

void single_msg_ans::Swap(single_msg_ans* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(u_id_, other->u_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_uid_, other->friend_uid_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_msg_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_msg_ans_descriptor_;
  metadata.reflection = single_msg_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_msg_ask::kUserIdFieldNumber;
const int group_msg_ask::kUIdFieldNumber;
const int group_msg_ask::kGroupIdFieldNumber;
const int group_msg_ask::kStartTimeFieldNumber;
const int group_msg_ask::kEndTimeFieldNumber;
const int group_msg_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

group_msg_ask::group_msg_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.group_msg_ask)
}

void group_msg_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

group_msg_ask::group_msg_ask(const group_msg_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.group_msg_ask)
}

void group_msg_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_msg_ask::~group_msg_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.group_msg_ask)
  SharedDtor();
}

void group_msg_ask::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void group_msg_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_msg_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_msg_ask_descriptor_;
}

const group_msg_ask& group_msg_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

group_msg_ask* group_msg_ask::default_instance_ = NULL;

group_msg_ask* group_msg_ask::New() const {
  return new group_msg_ask;
}

void group_msg_ask::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_u_id()) {
      if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        u_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_msg_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.group_msg_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_u_id;
        break;
      }

      // optional bytes u_id = 2;
      case 2: {
        if (tag == 18) {
         parse_u_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_u_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional bytes group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }

      // optional bytes start_time = 4;
      case 4: {
        if (tag == 34) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 5;
      case 5: {
        if (tag == 42) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 6;
      case 6: {
        if (tag == 50) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.group_msg_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.group_msg_ask)
  return false;
#undef DO_
}

void group_msg_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.group_msg_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->u_id(), output);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_id(), output);
  }

  // optional bytes start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->start_time(), output);
  }

  // optional bytes end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->end_time(), output);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.group_msg_ask)
}

::google::protobuf::uint8* group_msg_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.group_msg_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->u_id(), target);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_id(), target);
  }

  // optional bytes start_time = 4;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->start_time(), target);
  }

  // optional bytes end_time = 5;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->end_time(), target);
  }

  // optional .common.common_ask_header ask_header = 6;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.group_msg_ask)
  return target;
}

int group_msg_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes u_id = 2;
    if (has_u_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->u_id());
    }

    // optional bytes group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
    }

    // optional bytes start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional .common.common_ask_header ask_header = 6;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_msg_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_msg_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_msg_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_msg_ask::MergeFrom(const group_msg_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_u_id()) {
      set_u_id(from.u_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_msg_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_msg_ask::CopyFrom(const group_msg_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_msg_ask::IsInitialized() const {

  return true;
}

void group_msg_ask::Swap(group_msg_ask* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(u_id_, other->u_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_msg_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_msg_ask_descriptor_;
  metadata.reflection = group_msg_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_msg_ans::kUserIdFieldNumber;
const int group_msg_ans::kUIdFieldNumber;
const int group_msg_ans::kGroupIdFieldNumber;
const int group_msg_ans::kGroupmsgListFieldNumber;
const int group_msg_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

group_msg_ans::group_msg_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.group_msg_ans)
}

void group_msg_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

group_msg_ans::group_msg_ans(const group_msg_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.group_msg_ans)
}

void group_msg_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  u_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_msg_ans::~group_msg_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.group_msg_ans)
  SharedDtor();
}

void group_msg_ans::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete u_id_;
  }
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void group_msg_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_msg_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_msg_ans_descriptor_;
}

const group_msg_ans& group_msg_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

group_msg_ans* group_msg_ans::default_instance_ = NULL;

group_msg_ans* group_msg_ans::New() const {
  return new group_msg_ans;
}

void group_msg_ans::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_u_id()) {
      if (u_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        u_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  groupmsg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_msg_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.group_msg_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_u_id;
        break;
      }

      // optional bytes u_id = 2;
      case 2: {
        if (tag == 18) {
         parse_u_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_u_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_id;
        break;
      }

      // optional bytes group_id = 3;
      case 3: {
        if (tag == 26) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_groupmsg_list;
        break;
      }

      // repeated .AFP_main_frame.msg_info groupmsg_list = 4;
      case 4: {
        if (tag == 34) {
         parse_groupmsg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupmsg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_groupmsg_list;
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.group_msg_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.group_msg_ans)
  return false;
#undef DO_
}

void group_msg_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.group_msg_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->u_id(), output);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->group_id(), output);
  }

  // repeated .AFP_main_frame.msg_info groupmsg_list = 4;
  for (int i = 0; i < this->groupmsg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->groupmsg_list(i), output);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.group_msg_ans)
}

::google::protobuf::uint8* group_msg_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.group_msg_ans)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional bytes u_id = 2;
  if (has_u_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->u_id(), target);
  }

  // optional bytes group_id = 3;
  if (has_group_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->group_id(), target);
  }

  // repeated .AFP_main_frame.msg_info groupmsg_list = 4;
  for (int i = 0; i < this->groupmsg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->groupmsg_list(i), target);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.group_msg_ans)
  return target;
}

int group_msg_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional bytes u_id = 2;
    if (has_u_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->u_id());
    }

    // optional bytes group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.msg_info groupmsg_list = 4;
  total_size += 1 * this->groupmsg_list_size();
  for (int i = 0; i < this->groupmsg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupmsg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_msg_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_msg_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_msg_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_msg_ans::MergeFrom(const group_msg_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupmsg_list_.MergeFrom(from.groupmsg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_u_id()) {
      set_u_id(from.u_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_msg_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_msg_ans::CopyFrom(const group_msg_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_msg_ans::IsInitialized() const {

  return true;
}

void group_msg_ans::Swap(group_msg_ans* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(u_id_, other->u_id_);
    std::swap(group_id_, other->group_id_);
    groupmsg_list_.Swap(&other->groupmsg_list_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_msg_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_msg_ans_descriptor_;
  metadata.reflection = group_msg_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int usebasicinfo_ask::kUserIdFieldNumber;
const int usebasicinfo_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

usebasicinfo_ask::usebasicinfo_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.usebasicinfo_ask)
}

void usebasicinfo_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

usebasicinfo_ask::usebasicinfo_ask(const usebasicinfo_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.usebasicinfo_ask)
}

void usebasicinfo_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

usebasicinfo_ask::~usebasicinfo_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.usebasicinfo_ask)
  SharedDtor();
}

void usebasicinfo_ask::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void usebasicinfo_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* usebasicinfo_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return usebasicinfo_ask_descriptor_;
}

const usebasicinfo_ask& usebasicinfo_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

usebasicinfo_ask* usebasicinfo_ask::default_instance_ = NULL;

usebasicinfo_ask* usebasicinfo_ask::New() const {
  return new usebasicinfo_ask;
}

void usebasicinfo_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool usebasicinfo_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.usebasicinfo_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.usebasicinfo_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.usebasicinfo_ask)
  return false;
#undef DO_
}

void usebasicinfo_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.usebasicinfo_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.usebasicinfo_ask)
}

::google::protobuf::uint8* usebasicinfo_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.usebasicinfo_ask)
  // optional bytes user_id = 1;
  if (has_user_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_id(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.usebasicinfo_ask)
  return target;
}

int usebasicinfo_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_id());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void usebasicinfo_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const usebasicinfo_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const usebasicinfo_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void usebasicinfo_ask::MergeFrom(const usebasicinfo_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void usebasicinfo_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usebasicinfo_ask::CopyFrom(const usebasicinfo_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usebasicinfo_ask::IsInitialized() const {

  return true;
}

void usebasicinfo_ask::Swap(usebasicinfo_ask* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata usebasicinfo_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = usebasicinfo_ask_descriptor_;
  metadata.reflection = usebasicinfo_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int usebasicinfo_ans::kNicknameFieldNumber;
const int usebasicinfo_ans::kMobilePhoneFieldNumber;
const int usebasicinfo_ans::kIdCardFieldNumber;
const int usebasicinfo_ans::kAvatarUrlFieldNumber;
const int usebasicinfo_ans::kSexFieldNumber;
const int usebasicinfo_ans::kIsOverdueFieldNumber;
const int usebasicinfo_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

usebasicinfo_ans::usebasicinfo_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.usebasicinfo_ans)
}

void usebasicinfo_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

usebasicinfo_ans::usebasicinfo_ans(const usebasicinfo_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.usebasicinfo_ans)
}

void usebasicinfo_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 1;
  is_overdue_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

usebasicinfo_ans::~usebasicinfo_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.usebasicinfo_ans)
  SharedDtor();
}

void usebasicinfo_ans::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void usebasicinfo_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* usebasicinfo_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return usebasicinfo_ans_descriptor_;
}

const usebasicinfo_ans& usebasicinfo_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

usebasicinfo_ans* usebasicinfo_ans::default_instance_ = NULL;

usebasicinfo_ans* usebasicinfo_ans::New() const {
  return new usebasicinfo_ans;
}

void usebasicinfo_ans::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    sex_ = 1;
    is_overdue_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool usebasicinfo_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.usebasicinfo_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_avatar_url;
        break;
      }

      // optional bytes avatar_url = 4;
      case 4: {
        if (tag == 34) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .common.sex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::sex_IsValid(value)) {
            set_sex(static_cast< ::common::sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_overdue;
        break;
      }

      // optional int32 is_overdue = 6;
      case 6: {
        if (tag == 48) {
         parse_is_overdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_overdue_)));
          set_has_is_overdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 7;
      case 7: {
        if (tag == 58) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.usebasicinfo_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.usebasicinfo_ans)
  return false;
#undef DO_
}

void usebasicinfo_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.usebasicinfo_ans)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nickname(), output);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobilephone(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional bytes avatar_url = 4;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->avatar_url(), output);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional int32 is_overdue = 6;
  if (has_is_overdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_overdue(), output);
  }

  // optional .common.errorinfo error = 7;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.usebasicinfo_ans)
}

::google::protobuf::uint8* usebasicinfo_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.usebasicinfo_ans)
  // optional bytes nickname = 1;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nickname(), target);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobilephone(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional bytes avatar_url = 4;
  if (has_avatar_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->avatar_url(), target);
  }

  // optional .common.sex sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional int32 is_overdue = 6;
  if (has_is_overdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_overdue(), target);
  }

  // optional .common.errorinfo error = 7;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.usebasicinfo_ans)
  return target;
}

int usebasicinfo_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional bytes mobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes avatar_url = 4;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_url());
    }

    // optional .common.sex sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

    // optional int32 is_overdue = 6;
    if (has_is_overdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_overdue());
    }

    // optional .common.errorinfo error = 7;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void usebasicinfo_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const usebasicinfo_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const usebasicinfo_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void usebasicinfo_ans::MergeFrom(const usebasicinfo_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_is_overdue()) {
      set_is_overdue(from.is_overdue());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void usebasicinfo_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usebasicinfo_ans::CopyFrom(const usebasicinfo_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usebasicinfo_ans::IsInitialized() const {

  return true;
}

void usebasicinfo_ans::Swap(usebasicinfo_ans* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(sex_, other->sex_);
    std::swap(is_overdue_, other->is_overdue_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata usebasicinfo_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = usebasicinfo_ans_descriptor_;
  metadata.reflection = usebasicinfo_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_detail_ask::kStartTimeFieldNumber;
const int afp_detail_ask::kEndTimeFieldNumber;
const int afp_detail_ask::kMobilePhoneFieldNumber;
const int afp_detail_ask::kIdCardFieldNumber;
const int afp_detail_ask::kModelResultFieldNumber;
const int afp_detail_ask::kPageNumFieldNumber;
const int afp_detail_ask::kCurPageFieldNumber;
const int afp_detail_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

afp_detail_ask::afp_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_detail_ask)
}

void afp_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

afp_detail_ask::afp_detail_ask(const afp_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_detail_ask)
}

void afp_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_result_ = 0;
  page_num_ = 0;
  cur_page_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_detail_ask::~afp_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_detail_ask)
  SharedDtor();
}

void afp_detail_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void afp_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_detail_ask_descriptor_;
}

const afp_detail_ask& afp_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_detail_ask* afp_detail_ask::default_instance_ = NULL;

afp_detail_ask* afp_detail_ask::New() const {
  return new afp_detail_ask;
}

void afp_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<afp_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(model_result_, page_num_);
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    cur_page_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 2;
      case 2: {
        if (tag == 18) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_model_result;
        break;
      }

      // optional int32 model_result = 5;
      case 5: {
        if (tag == 40) {
         parse_model_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_result_)));
          set_has_model_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 6;
      case 6: {
        if (tag == 48) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 8;
      case 8: {
        if (tag == 66) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_detail_ask)
  return false;
#undef DO_
}

void afp_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_time(), output);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_time(), output);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobilephone(), output);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card(), output);
  }

  // optional int32 model_result = 5;
  if (has_model_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->model_result(), output);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_num(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  // optional .common.common_ask_header ask_header = 8;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_detail_ask)
}

::google::protobuf::uint8* afp_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_time(), target);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_time(), target);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobilephone(), target);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card(), target);
  }

  // optional int32 model_result = 5;
  if (has_model_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->model_result(), target);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_num(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  // optional .common.common_ask_header ask_header = 8;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_detail_ask)
  return target;
}

int afp_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional bytes mobilePhone = 3;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 4;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional int32 model_result = 5;
    if (has_model_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_result());
    }

    // optional int32 page_num = 6;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

    // optional .common.common_ask_header ask_header = 8;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_detail_ask::MergeFrom(const afp_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_model_result()) {
      set_model_result(from.model_result());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_detail_ask::CopyFrom(const afp_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_detail_ask::IsInitialized() const {

  return true;
}

void afp_detail_ask::Swap(afp_detail_ask* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(model_result_, other->model_result_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_detail_ask_descriptor_;
  metadata.reflection = afp_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_detail::kRealNameFieldNumber;
const int afp_detail::kMobilePhoneFieldNumber;
const int afp_detail::kIdCardFieldNumber;
const int afp_detail::kResultTimeFieldNumber;
const int afp_detail::kModelNameFieldNumber;
const int afp_detail::kModelResultFieldNumber;
const int afp_detail::kStatusFieldNumber;
const int afp_detail::kErrorInfoFieldNumber;
const int afp_detail::kAppIdFieldNumber;
const int afp_detail::kRequestJsonFieldNumber;
const int afp_detail::kResultJsonFieldNumber;
const int afp_detail::kVersionFieldNumber;
#endif  // !_MSC_VER

afp_detail::afp_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_detail)
}

void afp_detail::InitAsDefaultInstance() {
}

afp_detail::afp_detail(const afp_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_detail)
}

void afp_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_result_ = 0;
  status_ = 0;
  error_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_detail::~afp_detail() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_detail)
  SharedDtor();
}

void afp_detail::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_name_;
  }
  if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_info_;
  }
  if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_id_;
  }
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void afp_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_detail_descriptor_;
}

const afp_detail& afp_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_detail* afp_detail::default_instance_ = NULL;

afp_detail* afp_detail::New() const {
  return new afp_detail;
}

void afp_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<afp_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(model_result_, status_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_result_time()) {
      if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_time_->clear();
      }
    }
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_name_->clear();
      }
    }
    if (has_error_info()) {
      if (error_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_id_->clear();
      }
    }
    if (has_request_json()) {
      if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_json_->clear();
      }
    }
    if (has_result_json()) {
      if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_json_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_time;
        break;
      }

      // optional bytes result_time = 4;
      case 4: {
        if (tag == 34) {
         parse_result_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_model_name;
        break;
      }

      // optional bytes model_name = 5;
      case 5: {
        if (tag == 42) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_model_result;
        break;
      }

      // optional int32 model_result = 6;
      case 6: {
        if (tag == 48) {
         parse_model_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_result_)));
          set_has_model_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_error_info;
        break;
      }

      // optional bytes error_info = 8;
      case 8: {
        if (tag == 66) {
         parse_error_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_app_id;
        break;
      }

      // optional bytes app_id = 9;
      case 9: {
        if (tag == 74) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_request_json;
        break;
      }

      // optional bytes request_json = 10;
      case 10: {
        if (tag == 82) {
         parse_request_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_result_json;
        break;
      }

      // optional bytes result_json = 11;
      case 11: {
        if (tag == 90) {
         parse_result_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_version;
        break;
      }

      // optional bytes version = 12;
      case 12: {
        if (tag == 98) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_detail)
  return false;
#undef DO_
}

void afp_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobilephone(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional bytes result_time = 4;
  if (has_result_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_time(), output);
  }

  // optional bytes model_name = 5;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->model_name(), output);
  }

  // optional int32 model_result = 6;
  if (has_model_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->model_result(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional bytes error_info = 8;
  if (has_error_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->error_info(), output);
  }

  // optional bytes app_id = 9;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->app_id(), output);
  }

  // optional bytes request_json = 10;
  if (has_request_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->request_json(), output);
  }

  // optional bytes result_json = 11;
  if (has_result_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->result_json(), output);
  }

  // optional bytes version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_detail)
}

::google::protobuf::uint8* afp_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobilephone(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional bytes result_time = 4;
  if (has_result_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_time(), target);
  }

  // optional bytes model_name = 5;
  if (has_model_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->model_name(), target);
  }

  // optional int32 model_result = 6;
  if (has_model_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->model_result(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  // optional bytes error_info = 8;
  if (has_error_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->error_info(), target);
  }

  // optional bytes app_id = 9;
  if (has_app_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->app_id(), target);
  }

  // optional bytes request_json = 10;
  if (has_request_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->request_json(), target);
  }

  // optional bytes result_json = 11;
  if (has_result_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->result_json(), target);
  }

  // optional bytes version = 12;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_detail)
  return target;
}

int afp_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes result_time = 4;
    if (has_result_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_time());
    }

    // optional bytes model_name = 5;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_name());
    }

    // optional int32 model_result = 6;
    if (has_model_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_result());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bytes error_info = 8;
    if (has_error_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->error_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes app_id = 9;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_id());
    }

    // optional bytes request_json = 10;
    if (has_request_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_json());
    }

    // optional bytes result_json = 11;
    if (has_result_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_json());
    }

    // optional bytes version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_detail::MergeFrom(const afp_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_result_time()) {
      set_result_time(from.result_time());
    }
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_model_result()) {
      set_model_result(from.model_result());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error_info()) {
      set_error_info(from.error_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_request_json()) {
      set_request_json(from.request_json());
    }
    if (from.has_result_json()) {
      set_result_json(from.result_json());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_detail::CopyFrom(const afp_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_detail::IsInitialized() const {

  return true;
}

void afp_detail::Swap(afp_detail* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(result_time_, other->result_time_);
    std::swap(model_name_, other->model_name_);
    std::swap(model_result_, other->model_result_);
    std::swap(status_, other->status_);
    std::swap(error_info_, other->error_info_);
    std::swap(app_id_, other->app_id_);
    std::swap(request_json_, other->request_json_);
    std::swap(result_json_, other->result_json_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_detail_descriptor_;
  metadata.reflection = afp_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int afp_detail_ans::kAfpDetailListFieldNumber;
const int afp_detail_ans::kTotalNumberFieldNumber;
const int afp_detail_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

afp_detail_ans::afp_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.afp_detail_ans)
}

void afp_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

afp_detail_ans::afp_detail_ans(const afp_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.afp_detail_ans)
}

void afp_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  total_number_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

afp_detail_ans::~afp_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.afp_detail_ans)
  SharedDtor();
}

void afp_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void afp_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* afp_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return afp_detail_ans_descriptor_;
}

const afp_detail_ans& afp_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

afp_detail_ans* afp_detail_ans::default_instance_ = NULL;

afp_detail_ans* afp_detail_ans::New() const {
  return new afp_detail_ans;
}

void afp_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    total_number_ = 0;
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  afp_detail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool afp_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.afp_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
      case 1: {
        if (tag == 10) {
         parse_afp_detail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_afp_detail_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_afp_detail_list;
        if (input->ExpectTag(16)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 2;
      case 2: {
        if (tag == 16) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.afp_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.afp_detail_ans)
  return false;
#undef DO_
}

void afp_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.afp_detail_ans)
  // repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
  for (int i = 0; i < this->afp_detail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->afp_detail_list(i), output);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_number(), output);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.afp_detail_ans)
}

::google::protobuf::uint8* afp_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.afp_detail_ans)
  // repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
  for (int i = 0; i < this->afp_detail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->afp_detail_list(i), target);
  }

  // optional int32 total_number = 2;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_number(), target);
  }

  // optional .common.errorinfo error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.afp_detail_ans)
  return target;
}

int afp_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_number = 2;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

    // optional .common.errorinfo error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.afp_detail afp_detail_list = 1;
  total_size += 1 * this->afp_detail_list_size();
  for (int i = 0; i < this->afp_detail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->afp_detail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void afp_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const afp_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const afp_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void afp_detail_ans::MergeFrom(const afp_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  afp_detail_list_.MergeFrom(from.afp_detail_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void afp_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void afp_detail_ans::CopyFrom(const afp_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool afp_detail_ans::IsInitialized() const {

  return true;
}

void afp_detail_ans::Swap(afp_detail_ans* other) {
  if (other != this) {
    afp_detail_list_.Swap(&other->afp_detail_list_);
    std::swap(total_number_, other->total_number_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata afp_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = afp_detail_ans_descriptor_;
  metadata.reflection = afp_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ccs_detail_ask::kStartTimeFieldNumber;
const int ccs_detail_ask::kEndTimeFieldNumber;
const int ccs_detail_ask::kMobilePhoneFieldNumber;
const int ccs_detail_ask::kIdCardFieldNumber;
const int ccs_detail_ask::kAskHeaderFieldNumber;
const int ccs_detail_ask::kPageNumFieldNumber;
const int ccs_detail_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

ccs_detail_ask::ccs_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.ccs_detail_ask)
}

void ccs_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

ccs_detail_ask::ccs_detail_ask(const ccs_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.ccs_detail_ask)
}

void ccs_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ccs_detail_ask::~ccs_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.ccs_detail_ask)
  SharedDtor();
}

void ccs_detail_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void ccs_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ccs_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ccs_detail_ask_descriptor_;
}

const ccs_detail_ask& ccs_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

ccs_detail_ask* ccs_detail_ask::default_instance_ = NULL;

ccs_detail_ask* ccs_detail_ask::New() const {
  return new ccs_detail_ask;
}

void ccs_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ccs_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(page_num_, cur_page_);
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ccs_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.ccs_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 2;
      case 2: {
        if (tag == 18) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 6;
      case 6: {
        if (tag == 48) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.ccs_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.ccs_detail_ask)
  return false;
#undef DO_
}

void ccs_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.ccs_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_time(), output);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_time(), output);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobilephone(), output);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_num(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.ccs_detail_ask)
}

::google::protobuf::uint8* ccs_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.ccs_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_time(), target);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_time(), target);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobilephone(), target);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_num(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.ccs_detail_ask)
  return target;
}

int ccs_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional bytes mobilePhone = 3;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 4;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 page_num = 6;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ccs_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ccs_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ccs_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ccs_detail_ask::MergeFrom(const ccs_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ccs_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ccs_detail_ask::CopyFrom(const ccs_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccs_detail_ask::IsInitialized() const {

  return true;
}

void ccs_detail_ask::Swap(ccs_detail_ask* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ccs_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ccs_detail_ask_descriptor_;
  metadata.reflection = ccs_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ccs_detail::kRealNameFieldNumber;
const int ccs_detail::kMobilePhoneFieldNumber;
const int ccs_detail::kIdCardFieldNumber;
const int ccs_detail::kResultTimeFieldNumber;
const int ccs_detail::kUserTypeFieldNumber;
const int ccs_detail::kIsSuccessFieldNumber;
const int ccs_detail::kCurCreditFieldNumber;
const int ccs_detail::kSumInfoFieldNumber;
const int ccs_detail::kRequestJsonFieldNumber;
const int ccs_detail::kResultJsonFieldNumber;
const int ccs_detail::kVersionFieldNumber;
#endif  // !_MSC_VER

ccs_detail::ccs_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.ccs_detail)
}

void ccs_detail::InitAsDefaultInstance() {
}

ccs_detail::ccs_detail(const ccs_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.ccs_detail)
}

void ccs_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_type_ = 0;
  is_success_ = 0;
  cur_credit_ = 0;
  sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ccs_detail::~ccs_detail() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.ccs_detail)
  SharedDtor();
}

void ccs_detail::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_time_;
  }
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void ccs_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ccs_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ccs_detail_descriptor_;
}

const ccs_detail& ccs_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

ccs_detail* ccs_detail::default_instance_ = NULL;

ccs_detail* ccs_detail::New() const {
  return new ccs_detail;
}

void ccs_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ccs_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_type_, is_success_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_result_time()) {
      if (result_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_time_->clear();
      }
    }
    cur_credit_ = 0;
    if (has_sum_info()) {
      if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sum_info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_request_json()) {
      if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_json_->clear();
      }
    }
    if (has_result_json()) {
      if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_json_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ccs_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.ccs_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_time;
        break;
      }

      // optional bytes result_time = 4;
      case 4: {
        if (tag == 34) {
         parse_result_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_type;
        break;
      }

      // optional int32 user_type = 5;
      case 5: {
        if (tag == 40) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_type_)));
          set_has_user_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 6;
      case 6: {
        if (tag == 48) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_credit;
        break;
      }

      // optional int32 cur_credit = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_credit_)));
          set_has_cur_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sum_info;
        break;
      }

      // optional bytes sum_info = 8;
      case 8: {
        if (tag == 66) {
         parse_sum_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sum_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_request_json;
        break;
      }

      // optional bytes request_json = 9;
      case 9: {
        if (tag == 74) {
         parse_request_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_result_json;
        break;
      }

      // optional bytes result_json = 10;
      case 10: {
        if (tag == 82) {
         parse_result_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }

      // optional bytes version = 11;
      case 11: {
        if (tag == 90) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.ccs_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.ccs_detail)
  return false;
#undef DO_
}

void ccs_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.ccs_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobilephone(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional bytes result_time = 4;
  if (has_result_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_time(), output);
  }

  // optional int32 user_type = 5;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_type(), output);
  }

  // optional int32 is_success = 6;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_success(), output);
  }

  // optional int32 cur_credit = 7;
  if (has_cur_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_credit(), output);
  }

  // optional bytes sum_info = 8;
  if (has_sum_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sum_info(), output);
  }

  // optional bytes request_json = 9;
  if (has_request_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->request_json(), output);
  }

  // optional bytes result_json = 10;
  if (has_result_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->result_json(), output);
  }

  // optional bytes version = 11;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.ccs_detail)
}

::google::protobuf::uint8* ccs_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.ccs_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobilephone(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional bytes result_time = 4;
  if (has_result_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_time(), target);
  }

  // optional int32 user_type = 5;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_type(), target);
  }

  // optional int32 is_success = 6;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_success(), target);
  }

  // optional int32 cur_credit = 7;
  if (has_cur_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_credit(), target);
  }

  // optional bytes sum_info = 8;
  if (has_sum_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sum_info(), target);
  }

  // optional bytes request_json = 9;
  if (has_request_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->request_json(), target);
  }

  // optional bytes result_json = 10;
  if (has_result_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->result_json(), target);
  }

  // optional bytes version = 11;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.ccs_detail)
  return target;
}

int ccs_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes result_time = 4;
    if (has_result_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_time());
    }

    // optional int32 user_type = 5;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_type());
    }

    // optional int32 is_success = 6;
    if (has_is_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_success());
    }

    // optional int32 cur_credit = 7;
    if (has_cur_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_credit());
    }

    // optional bytes sum_info = 8;
    if (has_sum_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sum_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes request_json = 9;
    if (has_request_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_json());
    }

    // optional bytes result_json = 10;
    if (has_result_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_json());
    }

    // optional bytes version = 11;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ccs_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ccs_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ccs_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ccs_detail::MergeFrom(const ccs_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_result_time()) {
      set_result_time(from.result_time());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_cur_credit()) {
      set_cur_credit(from.cur_credit());
    }
    if (from.has_sum_info()) {
      set_sum_info(from.sum_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_request_json()) {
      set_request_json(from.request_json());
    }
    if (from.has_result_json()) {
      set_result_json(from.result_json());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ccs_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ccs_detail::CopyFrom(const ccs_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccs_detail::IsInitialized() const {

  return true;
}

void ccs_detail::Swap(ccs_detail* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(result_time_, other->result_time_);
    std::swap(user_type_, other->user_type_);
    std::swap(is_success_, other->is_success_);
    std::swap(cur_credit_, other->cur_credit_);
    std::swap(sum_info_, other->sum_info_);
    std::swap(request_json_, other->request_json_);
    std::swap(result_json_, other->result_json_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ccs_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ccs_detail_descriptor_;
  metadata.reflection = ccs_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ccs_detail_ans::kCcsDetailListFieldNumber;
const int ccs_detail_ans::kErrorFieldNumber;
const int ccs_detail_ans::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

ccs_detail_ans::ccs_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.ccs_detail_ans)
}

void ccs_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

ccs_detail_ans::ccs_detail_ans(const ccs_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.ccs_detail_ans)
}

void ccs_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ccs_detail_ans::~ccs_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.ccs_detail_ans)
  SharedDtor();
}

void ccs_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ccs_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ccs_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ccs_detail_ans_descriptor_;
}

const ccs_detail_ans& ccs_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

ccs_detail_ans* ccs_detail_ans::default_instance_ = NULL;

ccs_detail_ans* ccs_detail_ans::New() const {
  return new ccs_detail_ans;
}

void ccs_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    total_number_ = 0;
  }
  ccs_detail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ccs_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.ccs_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
      case 1: {
        if (tag == 10) {
         parse_ccs_detail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ccs_detail_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ccs_detail_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 3;
      case 3: {
        if (tag == 24) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.ccs_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.ccs_detail_ans)
  return false;
#undef DO_
}

void ccs_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.ccs_detail_ans)
  // repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
  for (int i = 0; i < this->ccs_detail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ccs_detail_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.ccs_detail_ans)
}

::google::protobuf::uint8* ccs_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.ccs_detail_ans)
  // repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
  for (int i = 0; i < this->ccs_detail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ccs_detail_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.ccs_detail_ans)
  return target;
}

int ccs_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional int32 total_number = 3;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  // repeated .AFP_main_frame.ccs_detail ccs_detail_list = 1;
  total_size += 1 * this->ccs_detail_list_size();
  for (int i = 0; i < this->ccs_detail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ccs_detail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ccs_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ccs_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ccs_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ccs_detail_ans::MergeFrom(const ccs_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  ccs_detail_list_.MergeFrom(from.ccs_detail_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ccs_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ccs_detail_ans::CopyFrom(const ccs_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ccs_detail_ans::IsInitialized() const {

  return true;
}

void ccs_detail_ans::Swap(ccs_detail_ans* other) {
  if (other != this) {
    ccs_detail_list_.Swap(&other->ccs_detail_list_);
    std::swap(error_, other->error_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ccs_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ccs_detail_ans_descriptor_;
  metadata.reflection = ccs_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int weidanbao_detail_ask::kStartTimeFieldNumber;
const int weidanbao_detail_ask::kEndTimeFieldNumber;
const int weidanbao_detail_ask::kMobilePhoneFieldNumber;
const int weidanbao_detail_ask::kIdCardFieldNumber;
const int weidanbao_detail_ask::kAskHeaderFieldNumber;
const int weidanbao_detail_ask::kPageNumFieldNumber;
const int weidanbao_detail_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

weidanbao_detail_ask::weidanbao_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.weidanbao_detail_ask)
}

void weidanbao_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

weidanbao_detail_ask::weidanbao_detail_ask(const weidanbao_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.weidanbao_detail_ask)
}

void weidanbao_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

weidanbao_detail_ask::~weidanbao_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.weidanbao_detail_ask)
  SharedDtor();
}

void weidanbao_detail_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void weidanbao_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* weidanbao_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return weidanbao_detail_ask_descriptor_;
}

const weidanbao_detail_ask& weidanbao_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

weidanbao_detail_ask* weidanbao_detail_ask::default_instance_ = NULL;

weidanbao_detail_ask* weidanbao_detail_ask::New() const {
  return new weidanbao_detail_ask;
}

void weidanbao_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<weidanbao_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(page_num_, cur_page_);
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool weidanbao_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.weidanbao_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 2;
      case 2: {
        if (tag == 18) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 6;
      case 6: {
        if (tag == 48) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.weidanbao_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.weidanbao_detail_ask)
  return false;
#undef DO_
}

void weidanbao_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.weidanbao_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_time(), output);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_time(), output);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobilephone(), output);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_num(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.weidanbao_detail_ask)
}

::google::protobuf::uint8* weidanbao_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.weidanbao_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_time(), target);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_time(), target);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobilephone(), target);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_num(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.weidanbao_detail_ask)
  return target;
}

int weidanbao_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional bytes mobilePhone = 3;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 4;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 page_num = 6;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void weidanbao_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const weidanbao_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const weidanbao_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void weidanbao_detail_ask::MergeFrom(const weidanbao_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void weidanbao_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void weidanbao_detail_ask::CopyFrom(const weidanbao_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool weidanbao_detail_ask::IsInitialized() const {

  return true;
}

void weidanbao_detail_ask::Swap(weidanbao_detail_ask* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata weidanbao_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = weidanbao_detail_ask_descriptor_;
  metadata.reflection = weidanbao_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int weidanbao_detail::kRealNameFieldNumber;
const int weidanbao_detail::kMobilePhoneFieldNumber;
const int weidanbao_detail::kIdCardFieldNumber;
const int weidanbao_detail::kUpdateTimeFieldNumber;
const int weidanbao_detail::kIsSuccessFieldNumber;
const int weidanbao_detail::kCurCreditFieldNumber;
const int weidanbao_detail::kSumInfoFieldNumber;
const int weidanbao_detail::kRequestJsonFieldNumber;
const int weidanbao_detail::kResultJsonFieldNumber;
const int weidanbao_detail::kVersionFieldNumber;
#endif  // !_MSC_VER

weidanbao_detail::weidanbao_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.weidanbao_detail)
}

void weidanbao_detail::InitAsDefaultInstance() {
}

weidanbao_detail::weidanbao_detail(const weidanbao_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.weidanbao_detail)
}

void weidanbao_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_success_ = 0;
  cur_credit_ = 0;
  sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

weidanbao_detail::~weidanbao_detail() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.weidanbao_detail)
  SharedDtor();
}

void weidanbao_detail::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_json_;
  }
  if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_json_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void weidanbao_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* weidanbao_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return weidanbao_detail_descriptor_;
}

const weidanbao_detail& weidanbao_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

weidanbao_detail* weidanbao_detail::default_instance_ = NULL;

weidanbao_detail* weidanbao_detail::New() const {
  return new weidanbao_detail;
}

void weidanbao_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<weidanbao_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(is_success_, cur_credit_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
    if (has_sum_info()) {
      if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sum_info_->clear();
      }
    }
    if (has_request_json()) {
      if (request_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_json_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_result_json()) {
      if (result_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_json_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool weidanbao_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.weidanbao_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 4;
      case 4: {
        if (tag == 34) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 5;
      case 5: {
        if (tag == 40) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cur_credit;
        break;
      }

      // optional int32 cur_credit = 6;
      case 6: {
        if (tag == 48) {
         parse_cur_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_credit_)));
          set_has_cur_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sum_info;
        break;
      }

      // optional bytes sum_info = 7;
      case 7: {
        if (tag == 58) {
         parse_sum_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sum_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_request_json;
        break;
      }

      // optional bytes request_json = 8;
      case 8: {
        if (tag == 66) {
         parse_request_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_result_json;
        break;
      }

      // optional bytes result_json = 9;
      case 9: {
        if (tag == 74) {
         parse_result_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }

      // optional bytes version = 10;
      case 10: {
        if (tag == 82) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.weidanbao_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.weidanbao_detail)
  return false;
#undef DO_
}

void weidanbao_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.weidanbao_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobilephone(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional bytes update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->update_time(), output);
  }

  // optional int32 is_success = 5;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_success(), output);
  }

  // optional int32 cur_credit = 6;
  if (has_cur_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_credit(), output);
  }

  // optional bytes sum_info = 7;
  if (has_sum_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sum_info(), output);
  }

  // optional bytes request_json = 8;
  if (has_request_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->request_json(), output);
  }

  // optional bytes result_json = 9;
  if (has_result_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->result_json(), output);
  }

  // optional bytes version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.weidanbao_detail)
}

::google::protobuf::uint8* weidanbao_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.weidanbao_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobilephone(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional bytes update_time = 4;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->update_time(), target);
  }

  // optional int32 is_success = 5;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_success(), target);
  }

  // optional int32 cur_credit = 6;
  if (has_cur_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_credit(), target);
  }

  // optional bytes sum_info = 7;
  if (has_sum_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sum_info(), target);
  }

  // optional bytes request_json = 8;
  if (has_request_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->request_json(), target);
  }

  // optional bytes result_json = 9;
  if (has_result_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->result_json(), target);
  }

  // optional bytes version = 10;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.weidanbao_detail)
  return target;
}

int weidanbao_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional bytes update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

    // optional int32 is_success = 5;
    if (has_is_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_success());
    }

    // optional int32 cur_credit = 6;
    if (has_cur_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_credit());
    }

    // optional bytes sum_info = 7;
    if (has_sum_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sum_info());
    }

    // optional bytes request_json = 8;
    if (has_request_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_json());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes result_json = 9;
    if (has_result_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_json());
    }

    // optional bytes version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void weidanbao_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const weidanbao_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const weidanbao_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void weidanbao_detail::MergeFrom(const weidanbao_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_cur_credit()) {
      set_cur_credit(from.cur_credit());
    }
    if (from.has_sum_info()) {
      set_sum_info(from.sum_info());
    }
    if (from.has_request_json()) {
      set_request_json(from.request_json());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result_json()) {
      set_result_json(from.result_json());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void weidanbao_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void weidanbao_detail::CopyFrom(const weidanbao_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool weidanbao_detail::IsInitialized() const {

  return true;
}

void weidanbao_detail::Swap(weidanbao_detail* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(update_time_, other->update_time_);
    std::swap(is_success_, other->is_success_);
    std::swap(cur_credit_, other->cur_credit_);
    std::swap(sum_info_, other->sum_info_);
    std::swap(request_json_, other->request_json_);
    std::swap(result_json_, other->result_json_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata weidanbao_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = weidanbao_detail_descriptor_;
  metadata.reflection = weidanbao_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int weidanbao_detail_ans::kWeidanbaoDetailListFieldNumber;
const int weidanbao_detail_ans::kErrorFieldNumber;
const int weidanbao_detail_ans::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

weidanbao_detail_ans::weidanbao_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.weidanbao_detail_ans)
}

void weidanbao_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

weidanbao_detail_ans::weidanbao_detail_ans(const weidanbao_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.weidanbao_detail_ans)
}

void weidanbao_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

weidanbao_detail_ans::~weidanbao_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.weidanbao_detail_ans)
  SharedDtor();
}

void weidanbao_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void weidanbao_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* weidanbao_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return weidanbao_detail_ans_descriptor_;
}

const weidanbao_detail_ans& weidanbao_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

weidanbao_detail_ans* weidanbao_detail_ans::default_instance_ = NULL;

weidanbao_detail_ans* weidanbao_detail_ans::New() const {
  return new weidanbao_detail_ans;
}

void weidanbao_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    total_number_ = 0;
  }
  weidanbao_detail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool weidanbao_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.weidanbao_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
      case 1: {
        if (tag == 10) {
         parse_weidanbao_detail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weidanbao_detail_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weidanbao_detail_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 3;
      case 3: {
        if (tag == 24) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.weidanbao_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.weidanbao_detail_ans)
  return false;
#undef DO_
}

void weidanbao_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.weidanbao_detail_ans)
  // repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
  for (int i = 0; i < this->weidanbao_detail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weidanbao_detail_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.weidanbao_detail_ans)
}

::google::protobuf::uint8* weidanbao_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.weidanbao_detail_ans)
  // repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
  for (int i = 0; i < this->weidanbao_detail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weidanbao_detail_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.weidanbao_detail_ans)
  return target;
}

int weidanbao_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional int32 total_number = 3;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  // repeated .AFP_main_frame.weidanbao_detail weidanbao_detail_list = 1;
  total_size += 1 * this->weidanbao_detail_list_size();
  for (int i = 0; i < this->weidanbao_detail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weidanbao_detail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void weidanbao_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const weidanbao_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const weidanbao_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void weidanbao_detail_ans::MergeFrom(const weidanbao_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  weidanbao_detail_list_.MergeFrom(from.weidanbao_detail_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void weidanbao_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void weidanbao_detail_ans::CopyFrom(const weidanbao_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool weidanbao_detail_ans::IsInitialized() const {

  return true;
}

void weidanbao_detail_ans::Swap(weidanbao_detail_ans* other) {
  if (other != this) {
    weidanbao_detail_list_.Swap(&other->weidanbao_detail_list_);
    std::swap(error_, other->error_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata weidanbao_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = weidanbao_detail_ans_descriptor_;
  metadata.reflection = weidanbao_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qiaoqiaoccs_detail_ask::kStartTimeFieldNumber;
const int qiaoqiaoccs_detail_ask::kEndTimeFieldNumber;
const int qiaoqiaoccs_detail_ask::kMobilePhoneFieldNumber;
const int qiaoqiaoccs_detail_ask::kIdCardFieldNumber;
const int qiaoqiaoccs_detail_ask::kAskHeaderFieldNumber;
const int qiaoqiaoccs_detail_ask::kPageNumFieldNumber;
const int qiaoqiaoccs_detail_ask::kCurPageFieldNumber;
#endif  // !_MSC_VER

qiaoqiaoccs_detail_ask::qiaoqiaoccs_detail_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.qiaoqiaoccs_detail_ask)
}

void qiaoqiaoccs_detail_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

qiaoqiaoccs_detail_ask::qiaoqiaoccs_detail_ask(const qiaoqiaoccs_detail_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.qiaoqiaoccs_detail_ask)
}

void qiaoqiaoccs_detail_ask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ask_header_ = NULL;
  page_num_ = 0;
  cur_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qiaoqiaoccs_detail_ask::~qiaoqiaoccs_detail_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.qiaoqiaoccs_detail_ask)
  SharedDtor();
}

void qiaoqiaoccs_detail_ask::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void qiaoqiaoccs_detail_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qiaoqiaoccs_detail_ask_descriptor_;
}

const qiaoqiaoccs_detail_ask& qiaoqiaoccs_detail_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

qiaoqiaoccs_detail_ask* qiaoqiaoccs_detail_ask::default_instance_ = NULL;

qiaoqiaoccs_detail_ask* qiaoqiaoccs_detail_ask::New() const {
  return new qiaoqiaoccs_detail_ask;
}

void qiaoqiaoccs_detail_ask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<qiaoqiaoccs_detail_ask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(page_num_, cur_page_);
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qiaoqiaoccs_detail_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.qiaoqiaoccs_detail_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_time;
        break;
      }

      // optional bytes end_time = 2;
      case 2: {
        if (tag == 18) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 3;
      case 3: {
        if (tag == 26) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 4;
      case 4: {
        if (tag == 34) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 5;
      case 5: {
        if (tag == 42) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_page_num;
        break;
      }

      // optional int32 page_num = 6;
      case 6: {
        if (tag == 48) {
         parse_page_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cur_page;
        break;
      }

      // optional int32 cur_page = 7;
      case 7: {
        if (tag == 56) {
         parse_cur_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_page_)));
          set_has_cur_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.qiaoqiaoccs_detail_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.qiaoqiaoccs_detail_ask)
  return false;
#undef DO_
}

void qiaoqiaoccs_detail_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.qiaoqiaoccs_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_time(), output);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_time(), output);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mobilephone(), output);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->id_card(), output);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ask_header(), output);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->page_num(), output);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.qiaoqiaoccs_detail_ask)
}

::google::protobuf::uint8* qiaoqiaoccs_detail_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.qiaoqiaoccs_detail_ask)
  // optional bytes start_time = 1;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_time(), target);
  }

  // optional bytes end_time = 2;
  if (has_end_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_time(), target);
  }

  // optional bytes mobilePhone = 3;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mobilephone(), target);
  }

  // optional bytes id_card = 4;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->id_card(), target);
  }

  // optional .common.common_ask_header ask_header = 5;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ask_header(), target);
  }

  // optional int32 page_num = 6;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->page_num(), target);
  }

  // optional int32 cur_page = 7;
  if (has_cur_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.qiaoqiaoccs_detail_ask)
  return target;
}

int qiaoqiaoccs_detail_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // optional bytes end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_time());
    }

    // optional bytes mobilePhone = 3;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 4;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional .common.common_ask_header ask_header = 5;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional int32 page_num = 6;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_num());
    }

    // optional int32 cur_page = 7;
    if (has_cur_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qiaoqiaoccs_detail_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qiaoqiaoccs_detail_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qiaoqiaoccs_detail_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qiaoqiaoccs_detail_ask::MergeFrom(const qiaoqiaoccs_detail_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
    if (from.has_cur_page()) {
      set_cur_page(from.cur_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qiaoqiaoccs_detail_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qiaoqiaoccs_detail_ask::CopyFrom(const qiaoqiaoccs_detail_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qiaoqiaoccs_detail_ask::IsInitialized() const {

  return true;
}

void qiaoqiaoccs_detail_ask::Swap(qiaoqiaoccs_detail_ask* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(page_num_, other->page_num_);
    std::swap(cur_page_, other->cur_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qiaoqiaoccs_detail_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qiaoqiaoccs_detail_ask_descriptor_;
  metadata.reflection = qiaoqiaoccs_detail_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qiaoqiaoccs_detail::kRealNameFieldNumber;
const int qiaoqiaoccs_detail::kMobilePhoneFieldNumber;
const int qiaoqiaoccs_detail::kIdCardFieldNumber;
const int qiaoqiaoccs_detail::kCurCreditFieldNumber;
const int qiaoqiaoccs_detail::kFriendshipCreditFieldNumber;
const int qiaoqiaoccs_detail::kWorthCreditFieldNumber;
const int qiaoqiaoccs_detail::kRiskCreditFieldNumber;
const int qiaoqiaoccs_detail::kSumInfoFieldNumber;
const int qiaoqiaoccs_detail::kVersionFieldNumber;
#endif  // !_MSC_VER

qiaoqiaoccs_detail::qiaoqiaoccs_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.qiaoqiaoccs_detail)
}

void qiaoqiaoccs_detail::InitAsDefaultInstance() {
}

qiaoqiaoccs_detail::qiaoqiaoccs_detail(const qiaoqiaoccs_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.qiaoqiaoccs_detail)
}

void qiaoqiaoccs_detail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_credit_ = 0;
  friendship_credit_ = 0;
  worth_credit_ = 0;
  risk_credit_ = 0;
  sum_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qiaoqiaoccs_detail::~qiaoqiaoccs_detail() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.qiaoqiaoccs_detail)
  SharedDtor();
}

void qiaoqiaoccs_detail::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilephone_;
  }
  if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_card_;
  }
  if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sum_info_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void qiaoqiaoccs_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qiaoqiaoccs_detail_descriptor_;
}

const qiaoqiaoccs_detail& qiaoqiaoccs_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

qiaoqiaoccs_detail* qiaoqiaoccs_detail::default_instance_ = NULL;

qiaoqiaoccs_detail* qiaoqiaoccs_detail::New() const {
  return new qiaoqiaoccs_detail;
}

void qiaoqiaoccs_detail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<qiaoqiaoccs_detail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cur_credit_, risk_credit_);
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_name_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilephone_->clear();
      }
    }
    if (has_id_card()) {
      if (id_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_card_->clear();
      }
    }
    if (has_sum_info()) {
      if (sum_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sum_info_->clear();
      }
    }
  }
  if (has_version()) {
    if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      version_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qiaoqiaoccs_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.qiaoqiaoccs_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes real_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_real_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mobilePhone;
        break;
      }

      // optional bytes mobilePhone = 2;
      case 2: {
        if (tag == 18) {
         parse_mobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mobilephone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id_card;
        break;
      }

      // optional bytes id_card = 3;
      case 3: {
        if (tag == 26) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_credit;
        break;
      }

      // optional int32 cur_credit = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_credit_)));
          set_has_cur_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_friendship_credit;
        break;
      }

      // optional float friendship_credit = 5;
      case 5: {
        if (tag == 45) {
         parse_friendship_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &friendship_credit_)));
          set_has_friendship_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_worth_credit;
        break;
      }

      // optional float worth_credit = 6;
      case 6: {
        if (tag == 53) {
         parse_worth_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &worth_credit_)));
          set_has_worth_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_risk_credit;
        break;
      }

      // optional float risk_credit = 7;
      case 7: {
        if (tag == 61) {
         parse_risk_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &risk_credit_)));
          set_has_risk_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sum_info;
        break;
      }

      // optional bytes sum_info = 8;
      case 8: {
        if (tag == 66) {
         parse_sum_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sum_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }

      // optional bytes version = 9;
      case 9: {
        if (tag == 74) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.qiaoqiaoccs_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.qiaoqiaoccs_detail)
  return false;
#undef DO_
}

void qiaoqiaoccs_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.qiaoqiaoccs_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->real_name(), output);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mobilephone(), output);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id_card(), output);
  }

  // optional int32 cur_credit = 4;
  if (has_cur_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_credit(), output);
  }

  // optional float friendship_credit = 5;
  if (has_friendship_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->friendship_credit(), output);
  }

  // optional float worth_credit = 6;
  if (has_worth_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->worth_credit(), output);
  }

  // optional float risk_credit = 7;
  if (has_risk_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->risk_credit(), output);
  }

  // optional bytes sum_info = 8;
  if (has_sum_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sum_info(), output);
  }

  // optional bytes version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.qiaoqiaoccs_detail)
}

::google::protobuf::uint8* qiaoqiaoccs_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.qiaoqiaoccs_detail)
  // optional bytes real_name = 1;
  if (has_real_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->real_name(), target);
  }

  // optional bytes mobilePhone = 2;
  if (has_mobilephone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mobilephone(), target);
  }

  // optional bytes id_card = 3;
  if (has_id_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id_card(), target);
  }

  // optional int32 cur_credit = 4;
  if (has_cur_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_credit(), target);
  }

  // optional float friendship_credit = 5;
  if (has_friendship_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->friendship_credit(), target);
  }

  // optional float worth_credit = 6;
  if (has_worth_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->worth_credit(), target);
  }

  // optional float risk_credit = 7;
  if (has_risk_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->risk_credit(), target);
  }

  // optional bytes sum_info = 8;
  if (has_sum_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sum_info(), target);
  }

  // optional bytes version = 9;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.qiaoqiaoccs_detail)
  return target;
}

int qiaoqiaoccs_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes real_name = 1;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->real_name());
    }

    // optional bytes mobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mobilephone());
    }

    // optional bytes id_card = 3;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id_card());
    }

    // optional int32 cur_credit = 4;
    if (has_cur_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_credit());
    }

    // optional float friendship_credit = 5;
    if (has_friendship_credit()) {
      total_size += 1 + 4;
    }

    // optional float worth_credit = 6;
    if (has_worth_credit()) {
      total_size += 1 + 4;
    }

    // optional float risk_credit = 7;
    if (has_risk_credit()) {
      total_size += 1 + 4;
    }

    // optional bytes sum_info = 8;
    if (has_sum_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sum_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qiaoqiaoccs_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qiaoqiaoccs_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qiaoqiaoccs_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qiaoqiaoccs_detail::MergeFrom(const qiaoqiaoccs_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_id_card()) {
      set_id_card(from.id_card());
    }
    if (from.has_cur_credit()) {
      set_cur_credit(from.cur_credit());
    }
    if (from.has_friendship_credit()) {
      set_friendship_credit(from.friendship_credit());
    }
    if (from.has_worth_credit()) {
      set_worth_credit(from.worth_credit());
    }
    if (from.has_risk_credit()) {
      set_risk_credit(from.risk_credit());
    }
    if (from.has_sum_info()) {
      set_sum_info(from.sum_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qiaoqiaoccs_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qiaoqiaoccs_detail::CopyFrom(const qiaoqiaoccs_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qiaoqiaoccs_detail::IsInitialized() const {

  return true;
}

void qiaoqiaoccs_detail::Swap(qiaoqiaoccs_detail* other) {
  if (other != this) {
    std::swap(real_name_, other->real_name_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(id_card_, other->id_card_);
    std::swap(cur_credit_, other->cur_credit_);
    std::swap(friendship_credit_, other->friendship_credit_);
    std::swap(worth_credit_, other->worth_credit_);
    std::swap(risk_credit_, other->risk_credit_);
    std::swap(sum_info_, other->sum_info_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qiaoqiaoccs_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qiaoqiaoccs_detail_descriptor_;
  metadata.reflection = qiaoqiaoccs_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qiaoqiaoccs_detail_ans::kQiaoqiaoccsDetailListFieldNumber;
const int qiaoqiaoccs_detail_ans::kErrorFieldNumber;
const int qiaoqiaoccs_detail_ans::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

qiaoqiaoccs_detail_ans::qiaoqiaoccs_detail_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.qiaoqiaoccs_detail_ans)
}

void qiaoqiaoccs_detail_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

qiaoqiaoccs_detail_ans::qiaoqiaoccs_detail_ans(const qiaoqiaoccs_detail_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.qiaoqiaoccs_detail_ans)
}

void qiaoqiaoccs_detail_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  total_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qiaoqiaoccs_detail_ans::~qiaoqiaoccs_detail_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.qiaoqiaoccs_detail_ans)
  SharedDtor();
}

void qiaoqiaoccs_detail_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void qiaoqiaoccs_detail_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qiaoqiaoccs_detail_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qiaoqiaoccs_detail_ans_descriptor_;
}

const qiaoqiaoccs_detail_ans& qiaoqiaoccs_detail_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

qiaoqiaoccs_detail_ans* qiaoqiaoccs_detail_ans::default_instance_ = NULL;

qiaoqiaoccs_detail_ans* qiaoqiaoccs_detail_ans::New() const {
  return new qiaoqiaoccs_detail_ans;
}

void qiaoqiaoccs_detail_ans::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
    total_number_ = 0;
  }
  qiaoqiaoccs_detail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qiaoqiaoccs_detail_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.qiaoqiaoccs_detail_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
      case 1: {
        if (tag == 10) {
         parse_qiaoqiaoccs_detail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qiaoqiaoccs_detail_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_qiaoqiaoccs_detail_list;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_number;
        break;
      }

      // optional int32 total_number = 3;
      case 3: {
        if (tag == 24) {
         parse_total_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_number_)));
          set_has_total_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.qiaoqiaoccs_detail_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.qiaoqiaoccs_detail_ans)
  return false;
#undef DO_
}

void qiaoqiaoccs_detail_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.qiaoqiaoccs_detail_ans)
  // repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
  for (int i = 0; i < this->qiaoqiaoccs_detail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qiaoqiaoccs_detail_list(i), output);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->error(), output);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.qiaoqiaoccs_detail_ans)
}

::google::protobuf::uint8* qiaoqiaoccs_detail_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.qiaoqiaoccs_detail_ans)
  // repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
  for (int i = 0; i < this->qiaoqiaoccs_detail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qiaoqiaoccs_detail_list(i), target);
  }

  // optional .common.errorinfo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->error(), target);
  }

  // optional int32 total_number = 3;
  if (has_total_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.qiaoqiaoccs_detail_ans)
  return target;
}

int qiaoqiaoccs_detail_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .common.errorinfo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional int32 total_number = 3;
    if (has_total_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_number());
    }

  }
  // repeated .AFP_main_frame.qiaoqiaoccs_detail qiaoqiaoccs_detail_list = 1;
  total_size += 1 * this->qiaoqiaoccs_detail_list_size();
  for (int i = 0; i < this->qiaoqiaoccs_detail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qiaoqiaoccs_detail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qiaoqiaoccs_detail_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qiaoqiaoccs_detail_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qiaoqiaoccs_detail_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qiaoqiaoccs_detail_ans::MergeFrom(const qiaoqiaoccs_detail_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  qiaoqiaoccs_detail_list_.MergeFrom(from.qiaoqiaoccs_detail_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (from.has_total_number()) {
      set_total_number(from.total_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qiaoqiaoccs_detail_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qiaoqiaoccs_detail_ans::CopyFrom(const qiaoqiaoccs_detail_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qiaoqiaoccs_detail_ans::IsInitialized() const {

  return true;
}

void qiaoqiaoccs_detail_ans::Swap(qiaoqiaoccs_detail_ans* other) {
  if (other != this) {
    qiaoqiaoccs_detail_list_.Swap(&other->qiaoqiaoccs_detail_list_);
    std::swap(error_, other->error_);
    std::swap(total_number_, other->total_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qiaoqiaoccs_detail_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qiaoqiaoccs_detail_ans_descriptor_;
  metadata.reflection = qiaoqiaoccs_detail_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_request_monitor_ask::kHandleTypeFieldNumber;
const int credit_request_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_request_monitor_ask::credit_request_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_request_monitor_ask)
}

void credit_request_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_request_monitor_ask::credit_request_monitor_ask(const credit_request_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_request_monitor_ask)
}

void credit_request_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  handle_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_request_monitor_ask::~credit_request_monitor_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_request_monitor_ask)
  SharedDtor();
}

void credit_request_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_request_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_request_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_request_monitor_ask_descriptor_;
}

const credit_request_monitor_ask& credit_request_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_request_monitor_ask* credit_request_monitor_ask::default_instance_ = NULL;

credit_request_monitor_ask* credit_request_monitor_ask::New() const {
  return new credit_request_monitor_ask;
}

void credit_request_monitor_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    handle_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_request_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_request_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_request_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_request_monitor_ask)
  return false;
#undef DO_
}

void credit_request_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_request_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle_type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_request_monitor_ask)
}

::google::protobuf::uint8* credit_request_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_request_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle_type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_request_monitor_ask)
  return target;
}

int credit_request_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle_type = 1;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_request_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_request_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_request_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_request_monitor_ask::MergeFrom(const credit_request_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_request_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_request_monitor_ask::CopyFrom(const credit_request_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_request_monitor_ask::IsInitialized() const {

  return true;
}

void credit_request_monitor_ask::Swap(credit_request_monitor_ask* other) {
  if (other != this) {
    std::swap(handle_type_, other->handle_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_request_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_request_monitor_ask_descriptor_;
  metadata.reflection = credit_request_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_request_monitor_ans::kIdFieldNumber;
const int credit_request_monitor_ans::kUpdateTimeFieldNumber;
const int credit_request_monitor_ans::kHandleTypeFieldNumber;
const int credit_request_monitor_ans::kJsonFieldNumber;
const int credit_request_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_request_monitor_ans::credit_request_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_request_monitor_ans)
}

void credit_request_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_request_monitor_ans::credit_request_monitor_ans(const credit_request_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_request_monitor_ans)
}

void credit_request_monitor_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_type_ = 0;
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_request_monitor_ans::~credit_request_monitor_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_request_monitor_ans)
  SharedDtor();
}

void credit_request_monitor_ans::SharedDtor() {
  if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete update_time_;
  }
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_request_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_request_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_request_monitor_ans_descriptor_;
}

const credit_request_monitor_ans& credit_request_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_request_monitor_ans* credit_request_monitor_ans::default_instance_ = NULL;

credit_request_monitor_ans* credit_request_monitor_ans::New() const {
  return new credit_request_monitor_ans;
}

void credit_request_monitor_ans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<credit_request_monitor_ans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, handle_type_);
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        update_time_->clear();
      }
    }
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_request_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_request_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_update_time;
        break;
      }

      // optional bytes update_time = 2;
      case 2: {
        if (tag == 18) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_type;
        break;
      }

      // optional int32 handle_type = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json;
        break;
      }

      // optional bytes json = 4;
      case 4: {
        if (tag == 34) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_request_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_request_monitor_ans)
  return false;
#undef DO_
}

void credit_request_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_request_monitor_ans)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->update_time(), output);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->handle_type(), output);
  }

  // optional bytes json = 4;
  if (has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->json(), output);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_request_monitor_ans)
}

::google::protobuf::uint8* credit_request_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_request_monitor_ans)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes update_time = 2;
  if (has_update_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->update_time(), target);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handle_type(), target);
  }

  // optional bytes json = 4;
  if (has_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->json(), target);
  }

  // optional .common.errorinfo error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_request_monitor_ans)
  return target;
}

int credit_request_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_time());
    }

    // optional int32 handle_type = 3;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional bytes json = 4;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_request_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_request_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_request_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_request_monitor_ans::MergeFrom(const credit_request_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_json()) {
      set_json(from.json());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_request_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_request_monitor_ans::CopyFrom(const credit_request_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_request_monitor_ans::IsInitialized() const {

  return true;
}

void credit_request_monitor_ans::Swap(credit_request_monitor_ans* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(update_time_, other->update_time_);
    std::swap(handle_type_, other->handle_type_);
    std::swap(json_, other->json_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_request_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_request_monitor_ans_descriptor_;
  metadata.reflection = credit_request_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_response_monitor_ask::kHandleTypeFieldNumber;
const int credit_response_monitor_ask::kAskHeaderFieldNumber;
#endif  // !_MSC_VER

credit_response_monitor_ask::credit_response_monitor_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_response_monitor_ask)
}

void credit_response_monitor_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
}

credit_response_monitor_ask::credit_response_monitor_ask(const credit_response_monitor_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_response_monitor_ask)
}

void credit_response_monitor_ask::SharedCtor() {
  _cached_size_ = 0;
  handle_type_ = 0;
  ask_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_response_monitor_ask::~credit_response_monitor_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_response_monitor_ask)
  SharedDtor();
}

void credit_response_monitor_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
  }
}

void credit_response_monitor_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_response_monitor_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_response_monitor_ask_descriptor_;
}

const credit_response_monitor_ask& credit_response_monitor_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_response_monitor_ask* credit_response_monitor_ask::default_instance_ = NULL;

credit_response_monitor_ask* credit_response_monitor_ask::New() const {
  return new credit_response_monitor_ask;
}

void credit_response_monitor_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    handle_type_ = 0;
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_response_monitor_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_response_monitor_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ask_header;
        break;
      }

      // optional .common.common_ask_header ask_header = 2;
      case 2: {
        if (tag == 18) {
         parse_ask_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_response_monitor_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_response_monitor_ask)
  return false;
#undef DO_
}

void credit_response_monitor_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_response_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle_type(), output);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ask_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_response_monitor_ask)
}

::google::protobuf::uint8* credit_response_monitor_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_response_monitor_ask)
  // optional int32 handle_type = 1;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle_type(), target);
  }

  // optional .common.common_ask_header ask_header = 2;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ask_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_response_monitor_ask)
  return target;
}

int credit_response_monitor_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle_type = 1;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

    // optional .common.common_ask_header ask_header = 2;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_response_monitor_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_response_monitor_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_response_monitor_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_response_monitor_ask::MergeFrom(const credit_response_monitor_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_response_monitor_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_response_monitor_ask::CopyFrom(const credit_response_monitor_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_response_monitor_ask::IsInitialized() const {

  return true;
}

void credit_response_monitor_ask::Swap(credit_response_monitor_ask* other) {
  if (other != this) {
    std::swap(handle_type_, other->handle_type_);
    std::swap(ask_header_, other->ask_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_response_monitor_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_response_monitor_ask_descriptor_;
  metadata.reflection = credit_response_monitor_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int credit_response_monitor_ans::kIdFieldNumber;
const int credit_response_monitor_ans::kInsetTimeFieldNumber;
const int credit_response_monitor_ans::kJsonFieldNumber;
const int credit_response_monitor_ans::kErrorFieldNumber;
#endif  // !_MSC_VER

credit_response_monitor_ans::credit_response_monitor_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.credit_response_monitor_ans)
}

void credit_response_monitor_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

credit_response_monitor_ans::credit_response_monitor_ans(const credit_response_monitor_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.credit_response_monitor_ans)
}

void credit_response_monitor_ans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  inset_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

credit_response_monitor_ans::~credit_response_monitor_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.credit_response_monitor_ans)
  SharedDtor();
}

void credit_response_monitor_ans::SharedDtor() {
  if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inset_time_;
  }
  if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete json_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void credit_response_monitor_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* credit_response_monitor_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return credit_response_monitor_ans_descriptor_;
}

const credit_response_monitor_ans& credit_response_monitor_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

credit_response_monitor_ans* credit_response_monitor_ans::default_instance_ = NULL;

credit_response_monitor_ans* credit_response_monitor_ans::New() const {
  return new credit_response_monitor_ans;
}

void credit_response_monitor_ans::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_inset_time()) {
      if (inset_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inset_time_->clear();
      }
    }
    if (has_json()) {
      if (json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        json_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::common::errorinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool credit_response_monitor_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.credit_response_monitor_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inset_time;
        break;
      }

      // optional bytes inset_time = 2;
      case 2: {
        if (tag == 18) {
         parse_inset_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inset_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_json;
        break;
      }

      // optional bytes json = 3;
      case 3: {
        if (tag == 26) {
         parse_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .common.errorinfo error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.credit_response_monitor_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.credit_response_monitor_ans)
  return false;
#undef DO_
}

void credit_response_monitor_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.credit_response_monitor_ans)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes inset_time = 2;
  if (has_inset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inset_time(), output);
  }

  // optional bytes json = 3;
  if (has_json()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->json(), output);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.credit_response_monitor_ans)
}

::google::protobuf::uint8* credit_response_monitor_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.credit_response_monitor_ans)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes inset_time = 2;
  if (has_inset_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->inset_time(), target);
  }

  // optional bytes json = 3;
  if (has_json()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->json(), target);
  }

  // optional .common.errorinfo error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.credit_response_monitor_ans)
  return target;
}

int credit_response_monitor_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes inset_time = 2;
    if (has_inset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inset_time());
    }

    // optional bytes json = 3;
    if (has_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->json());
    }

    // optional .common.errorinfo error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void credit_response_monitor_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const credit_response_monitor_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const credit_response_monitor_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void credit_response_monitor_ans::MergeFrom(const credit_response_monitor_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inset_time()) {
      set_inset_time(from.inset_time());
    }
    if (from.has_json()) {
      set_json(from.json());
    }
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void credit_response_monitor_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void credit_response_monitor_ans::CopyFrom(const credit_response_monitor_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool credit_response_monitor_ans::IsInitialized() const {

  return true;
}

void credit_response_monitor_ans::Swap(credit_response_monitor_ans* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inset_time_, other->inset_time_);
    std::swap(json_, other->json_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata credit_response_monitor_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = credit_response_monitor_ans_descriptor_;
  metadata.reflection = credit_response_monitor_ans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_verification_history_ask::kAskHeaderFieldNumber;
const int user_verification_history_ask::kInfoFieldNumber;
#endif  // !_MSC_VER

user_verification_history_ask::user_verification_history_ask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_verification_history_ask)
}

void user_verification_history_ask::InitAsDefaultInstance() {
  ask_header_ = const_cast< ::common::common_ask_header*>(&::common::common_ask_header::default_instance());
  info_ = const_cast< ::QDP_basic_info::user_basic_info*>(&::QDP_basic_info::user_basic_info::default_instance());
}

user_verification_history_ask::user_verification_history_ask(const user_verification_history_ask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_verification_history_ask)
}

void user_verification_history_ask::SharedCtor() {
  _cached_size_ = 0;
  ask_header_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_verification_history_ask::~user_verification_history_ask() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_verification_history_ask)
  SharedDtor();
}

void user_verification_history_ask::SharedDtor() {
  if (this != default_instance_) {
    delete ask_header_;
    delete info_;
  }
}

void user_verification_history_ask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_verification_history_ask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_verification_history_ask_descriptor_;
}

const user_verification_history_ask& user_verification_history_ask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_verification_history_ask* user_verification_history_ask::default_instance_ = NULL;

user_verification_history_ask* user_verification_history_ask::New() const {
  return new user_verification_history_ask;
}

void user_verification_history_ask::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ask_header()) {
      if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::QDP_basic_info::user_basic_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_verification_history_ask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_verification_history_ask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.common_ask_header ask_header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ask_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .QDP_basic_info.user_basic_info info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_verification_history_ask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_verification_history_ask)
  return false;
#undef DO_
}

void user_verification_history_ask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_verification_history_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ask_header(), output);
  }

  // optional .QDP_basic_info.user_basic_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_verification_history_ask)
}

::google::protobuf::uint8* user_verification_history_ask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_verification_history_ask)
  // optional .common.common_ask_header ask_header = 1;
  if (has_ask_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ask_header(), target);
  }

  // optional .QDP_basic_info.user_basic_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_verification_history_ask)
  return target;
}

int user_verification_history_ask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.common_ask_header ask_header = 1;
    if (has_ask_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ask_header());
    }

    // optional .QDP_basic_info.user_basic_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_verification_history_ask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_verification_history_ask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_verification_history_ask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_verification_history_ask::MergeFrom(const user_verification_history_ask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ask_header()) {
      mutable_ask_header()->::common::common_ask_header::MergeFrom(from.ask_header());
    }
    if (from.has_info()) {
      mutable_info()->::QDP_basic_info::user_basic_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_verification_history_ask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_verification_history_ask::CopyFrom(const user_verification_history_ask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_verification_history_ask::IsInitialized() const {

  return true;
}

void user_verification_history_ask::Swap(user_verification_history_ask* other) {
  if (other != this) {
    std::swap(ask_header_, other->ask_header_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_verification_history_ask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_verification_history_ask_descriptor_;
  metadata.reflection = user_verification_history_ask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_verification_history_ans::kErrorFieldNumber;
const int user_verification_history_ans::kFucverOutFieldNumber;
#endif  // !_MSC_VER

user_verification_history_ans::user_verification_history_ans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFP_main_frame.user_verification_history_ans)
}

void user_verification_history_ans::InitAsDefaultInstance() {
  error_ = const_cast< ::common::errorinfo*>(&::common::errorinfo::default_instance());
}

user_verification_history_ans::user_verification_history_ans(const user_verification_history_ans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFP_main_frame.user_verification_history_ans)
}

void user_verification_history_ans::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_verification_history_ans::~user_verification_history_ans() {
  // @@protoc_insertion_point(destructor:AFP_main_frame.user_verification_history_ans)
  SharedDtor();
}

void user_verification_history_ans::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void user_verification_history_ans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_verification_history_ans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_verification_history_ans_descriptor_;
}

const user_verification_history_ans& user_verification_history_ans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFP_5fmain_5fframe_2eproto();
  return *default_instance_;
}

user_verification_history_ans* user_verification_history_ans::default_instance_ = NULL;

user_verification_history_ans* user_verification_history_ans::New() const {
  return new user_verification_history_ans;
}

void user_verification_history_ans::Clear() {
  if (has_error()) {
    if (error_ != NULL) error_->::common::errorinfo::Clear();
  }
  fucver_out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_verification_history_ans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFP_main_frame.user_verification_history_ans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.errorinfo error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fucver_out;
        break;
      }

      // repeated .AFP_main_frame.function_verification_out fucver_out = 2;
      case 2: {
        if (tag == 18) {
         parse_fucver_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fucver_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fucver_out;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFP_main_frame.user_verification_history_ans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFP_main_frame.user_verification_history_ans)
  return false;
#undef DO_
}

void user_verification_history_ans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFP_main_frame.user_verification_history_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }

  // repeated .AFP_main_frame.function_verification_out fucver_out = 2;
  for (int i = 0; i < this->fucver_out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fucver_out(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFP_main_frame.user_verification_history_ans)
}

::google::protobuf::uint8* user_verification_history_ans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFP_main_frame.user_verification_history_ans)
  // optional .common.errorinfo error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }

  // repeated .AFP_main_frame.function_verification_out fucver_out = 2;
  for (int i = 0; i < this->fucver_out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fucver_out(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFP_main_frame.user_verification_history_ans)
  return target;
}

int user_verification_history_ans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.errorinfo error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  // repeated .AFP_main_frame.function_verification_out fucver_out = 2;
  total_size += 1 * this->fucver_out_size();
  for (int i = 0; i < this->fucver_out_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fucver_out(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_verification_history_ans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_verification_history_ans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_verification_history_ans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_verification_history_ans::MergeFrom(const user_verification_history_ans& from) {
  GOOGLE_CHECK_NE(&from, this);
  fucver_out_.MergeFrom(from.fucver_out_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_verification_history_ans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_verification_history_ans::CopyFrom(const user_verification_history_ans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_verification_history_ans::IsInitialized() const {

  return true;
}

void user_verification_history_ans::Swap(user_verification_history_ans* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    fucver_out_.Swap(&other->fucver_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_verification_history_ans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_verification_history_ans_descriptor_;
  metadata.reflection = user_verification_history_ans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFP_main_frame

// @@protoc_insertion_point(global_scope)
