#coding=utf8

"""
eval()函数十分强大，官方demo解释为：将字符串str当成有效的表达式来求值并返回计算结果。
"""

# a = "[[1,2], [3,4], [5,6], [7,8], [9,0]]"
# a = "{1: 'a', 2: 'b'}"
a = "([1,2], [3,4], [5,6], [7,8], (9,0))"
b = eval(a)

print b
print type(b)

'''
强大的函数有代价。安全性是其最大的缺点
想一想这种使用环境：需要用户输入一个表达式，并求值。

如果用户恶意输入，例如：
__import__('os').system('dir')
那么eval()之后，你会发现，当前目录文件都会展现在用户前面

怎么避免安全问题？
１、自行写检查函数；
２、使用ast.literal_eval
'''
