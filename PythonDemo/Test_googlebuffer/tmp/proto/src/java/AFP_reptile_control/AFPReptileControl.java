// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFP_reptile_control.proto

package AFP_reptile_control;

public final class AFPReptileControl {
  private AFPReptileControl() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code AFP_reptile_control.operation_status}
   *
   * <pre>
   *操作类型
   * </pre>
   */
  public enum operation_status
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>starting = 0;</code>
     *
     * <pre>
     *启动
     * </pre>
     */
    starting(0, 0),
    /**
     * <code>closeing = 1;</code>
     *
     * <pre>
     *关闭
     * </pre>
     */
    closeing(1, 1),
    ;

    /**
     * <code>starting = 0;</code>
     *
     * <pre>
     *启动
     * </pre>
     */
    public static final int starting_VALUE = 0;
    /**
     * <code>closeing = 1;</code>
     *
     * <pre>
     *关闭
     * </pre>
     */
    public static final int closeing_VALUE = 1;


    public final int getNumber() { return value; }

    public static operation_status valueOf(int value) {
      switch (value) {
        case 0: return starting;
        case 1: return closeing;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<operation_status>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<operation_status>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<operation_status>() {
            public operation_status findValueByNumber(int number) {
              return operation_status.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.getDescriptor().getEnumTypes().get(0);
    }

    private static final operation_status[] VALUES = values();

    public static operation_status valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private operation_status(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AFP_reptile_control.operation_status)
  }

  public interface reptile_basic_infoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_basic_info)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    boolean hasReptileId();
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    int getReptileId();

    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    boolean hasReptileName();
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    com.google.protobuf.ByteString getReptileName();

    /**
     * <code>optional bytes Crawl_site = 3;</code>
     *
     * <pre>
     *爬取的网址
     * </pre>
     */
    boolean hasCrawlSite();
    /**
     * <code>optional bytes Crawl_site = 3;</code>
     *
     * <pre>
     *爬取的网址
     * </pre>
     */
    com.google.protobuf.ByteString getCrawlSite();

    /**
     * <code>optional bytes ip = 4;</code>
     *
     * <pre>
     *所在的服务器IP地址
     * </pre>
     */
    boolean hasIp();
    /**
     * <code>optional bytes ip = 4;</code>
     *
     * <pre>
     *所在的服务器IP地址
     * </pre>
     */
    com.google.protobuf.ByteString getIp();

    /**
     * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
     *
     * <pre>
     *爬虫的运行状态
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
     *
     * <pre>
     *爬虫的运行状态
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.operation_status getStatus();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_basic_info}
   *
   * <pre>
   *爬虫基本信息
   * </pre>
   */
  public static final class reptile_basic_info extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_basic_info)
      reptile_basic_infoOrBuilder {
    // Use reptile_basic_info.newBuilder() to construct.
    private reptile_basic_info(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_basic_info(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_basic_info defaultInstance;
    public static reptile_basic_info getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_basic_info getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_basic_info(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              reptileId_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              reptileName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              crawlSite_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              ip_ = input.readBytes();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              AFP_reptile_control.AFPReptileControl.operation_status value = AFP_reptile_control.AFPReptileControl.operation_status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                status_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_basic_info_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_basic_info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.class, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_basic_info> PARSER =
        new com.google.protobuf.AbstractParser<reptile_basic_info>() {
      public reptile_basic_info parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_basic_info(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_basic_info> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int REPTILE_ID_FIELD_NUMBER = 1;
    private int reptileId_;
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    public boolean hasReptileId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    public int getReptileId() {
      return reptileId_;
    }

    public static final int REPTILE_NAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString reptileName_;
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public boolean hasReptileName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public com.google.protobuf.ByteString getReptileName() {
      return reptileName_;
    }

    public static final int CRAWL_SITE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString crawlSite_;
    /**
     * <code>optional bytes Crawl_site = 3;</code>
     *
     * <pre>
     *爬取的网址
     * </pre>
     */
    public boolean hasCrawlSite() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes Crawl_site = 3;</code>
     *
     * <pre>
     *爬取的网址
     * </pre>
     */
    public com.google.protobuf.ByteString getCrawlSite() {
      return crawlSite_;
    }

    public static final int IP_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString ip_;
    /**
     * <code>optional bytes ip = 4;</code>
     *
     * <pre>
     *所在的服务器IP地址
     * </pre>
     */
    public boolean hasIp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes ip = 4;</code>
     *
     * <pre>
     *所在的服务器IP地址
     * </pre>
     */
    public com.google.protobuf.ByteString getIp() {
      return ip_;
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private AFP_reptile_control.AFPReptileControl.operation_status status_;
    /**
     * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
     *
     * <pre>
     *爬虫的运行状态
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
     *
     * <pre>
     *爬虫的运行状态
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.operation_status getStatus() {
      return status_;
    }

    private void initFields() {
      reptileId_ = 0;
      reptileName_ = com.google.protobuf.ByteString.EMPTY;
      crawlSite_ = com.google.protobuf.ByteString.EMPTY;
      ip_ = com.google.protobuf.ByteString.EMPTY;
      status_ = AFP_reptile_control.AFPReptileControl.operation_status.starting;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, reptileId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, reptileName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, crawlSite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, ip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, status_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, reptileId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, reptileName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, crawlSite_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, ip_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, status_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_basic_info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_basic_info prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_basic_info}
     *
     * <pre>
     *爬虫基本信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_basic_info)
        AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_basic_info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_basic_info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_basic_info.class, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_basic_info.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        reptileId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        reptileName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        crawlSite_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        ip_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        status_ = AFP_reptile_control.AFPReptileControl.operation_status.starting;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_basic_info_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_basic_info build() {
        AFP_reptile_control.AFPReptileControl.reptile_basic_info result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_basic_info buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_basic_info result = new AFP_reptile_control.AFPReptileControl.reptile_basic_info(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.reptileId_ = reptileId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reptileName_ = reptileName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.crawlSite_ = crawlSite_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.ip_ = ip_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_basic_info) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_basic_info)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_basic_info other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance()) return this;
        if (other.hasReptileId()) {
          setReptileId(other.getReptileId());
        }
        if (other.hasReptileName()) {
          setReptileName(other.getReptileName());
        }
        if (other.hasCrawlSite()) {
          setCrawlSite(other.getCrawlSite());
        }
        if (other.hasIp()) {
          setIp(other.getIp());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_basic_info parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_basic_info) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int reptileId_ ;
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public boolean hasReptileId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public int getReptileId() {
        return reptileId_;
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public Builder setReptileId(int value) {
        bitField0_ |= 0x00000001;
        reptileId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public Builder clearReptileId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        reptileId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString reptileName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public boolean hasReptileName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public com.google.protobuf.ByteString getReptileName() {
        return reptileName_;
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder setReptileName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        reptileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder clearReptileName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reptileName_ = getDefaultInstance().getReptileName();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString crawlSite_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes Crawl_site = 3;</code>
       *
       * <pre>
       *爬取的网址
       * </pre>
       */
      public boolean hasCrawlSite() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes Crawl_site = 3;</code>
       *
       * <pre>
       *爬取的网址
       * </pre>
       */
      public com.google.protobuf.ByteString getCrawlSite() {
        return crawlSite_;
      }
      /**
       * <code>optional bytes Crawl_site = 3;</code>
       *
       * <pre>
       *爬取的网址
       * </pre>
       */
      public Builder setCrawlSite(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        crawlSite_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes Crawl_site = 3;</code>
       *
       * <pre>
       *爬取的网址
       * </pre>
       */
      public Builder clearCrawlSite() {
        bitField0_ = (bitField0_ & ~0x00000004);
        crawlSite_ = getDefaultInstance().getCrawlSite();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString ip_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes ip = 4;</code>
       *
       * <pre>
       *所在的服务器IP地址
       * </pre>
       */
      public boolean hasIp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes ip = 4;</code>
       *
       * <pre>
       *所在的服务器IP地址
       * </pre>
       */
      public com.google.protobuf.ByteString getIp() {
        return ip_;
      }
      /**
       * <code>optional bytes ip = 4;</code>
       *
       * <pre>
       *所在的服务器IP地址
       * </pre>
       */
      public Builder setIp(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        ip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes ip = 4;</code>
       *
       * <pre>
       *所在的服务器IP地址
       * </pre>
       */
      public Builder clearIp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ip_ = getDefaultInstance().getIp();
        onChanged();
        return this;
      }

      private AFP_reptile_control.AFPReptileControl.operation_status status_ = AFP_reptile_control.AFPReptileControl.operation_status.starting;
      /**
       * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
       *
       * <pre>
       *爬虫的运行状态
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
       *
       * <pre>
       *爬虫的运行状态
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.operation_status getStatus() {
        return status_;
      }
      /**
       * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
       *
       * <pre>
       *爬虫的运行状态
       * </pre>
       */
      public Builder setStatus(AFP_reptile_control.AFPReptileControl.operation_status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.operation_status status = 5;</code>
       *
       * <pre>
       *爬虫的运行状态
       * </pre>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = AFP_reptile_control.AFPReptileControl.operation_status.starting;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_basic_info)
    }

    static {
      defaultInstance = new reptile_basic_info(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_basic_info)
  }

  public interface reptile_config_infoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_config_info)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    boolean hasReptileId();
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    int getReptileId();

    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    boolean hasReptileName();
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    com.google.protobuf.ByteString getReptileName();

    /**
     * <code>optional bytes mongodb_address = 3;</code>
     *
     * <pre>
     *mongodb地址 
     * </pre>
     */
    boolean hasMongodbAddress();
    /**
     * <code>optional bytes mongodb_address = 3;</code>
     *
     * <pre>
     *mongodb地址 
     * </pre>
     */
    com.google.protobuf.ByteString getMongodbAddress();

    /**
     * <code>optional int32 mongodb_port = 4;</code>
     *
     * <pre>
     *mongodb端口 
     * </pre>
     */
    boolean hasMongodbPort();
    /**
     * <code>optional int32 mongodb_port = 4;</code>
     *
     * <pre>
     *mongodb端口 
     * </pre>
     */
    int getMongodbPort();

    /**
     * <code>optional bytes mongodb_name = 5;</code>
     *
     * <pre>
     *mongodb名字
     * </pre>
     */
    boolean hasMongodbName();
    /**
     * <code>optional bytes mongodb_name = 5;</code>
     *
     * <pre>
     *mongodb名字
     * </pre>
     */
    com.google.protobuf.ByteString getMongodbName();

    /**
     * <code>optional int32 interval = 6;</code>
     *
     * <pre>
     *每次捕获数据的间隔 单位毫秒
     * </pre>
     */
    boolean hasInterval();
    /**
     * <code>optional int32 interval = 6;</code>
     *
     * <pre>
     *每次捕获数据的间隔 单位毫秒
     * </pre>
     */
    int getInterval();

    /**
     * <code>optional int32 trigger_interval = 7;</code>
     *
     * <pre>
     *爬虫的运行规则 单位秒
     * </pre>
     */
    boolean hasTriggerInterval();
    /**
     * <code>optional int32 trigger_interval = 7;</code>
     *
     * <pre>
     *爬虫的运行规则 单位秒
     * </pre>
     */
    int getTriggerInterval();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_config_info}
   *
   * <pre>
   *爬虫的配置信息
   * </pre>
   */
  public static final class reptile_config_info extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_config_info)
      reptile_config_infoOrBuilder {
    // Use reptile_config_info.newBuilder() to construct.
    private reptile_config_info(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_config_info(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_config_info defaultInstance;
    public static reptile_config_info getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_config_info getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_config_info(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              reptileId_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              reptileName_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              mongodbAddress_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              mongodbPort_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              mongodbName_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              interval_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              triggerInterval_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_config_info_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_config_info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_config_info.class, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_config_info> PARSER =
        new com.google.protobuf.AbstractParser<reptile_config_info>() {
      public reptile_config_info parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_config_info(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_config_info> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int REPTILE_ID_FIELD_NUMBER = 1;
    private int reptileId_;
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    public boolean hasReptileId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 reptile_id = 1;</code>
     *
     * <pre>
     *爬虫id 
     * </pre>
     */
    public int getReptileId() {
      return reptileId_;
    }

    public static final int REPTILE_NAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString reptileName_;
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public boolean hasReptileName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes reptile_name = 2;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public com.google.protobuf.ByteString getReptileName() {
      return reptileName_;
    }

    public static final int MONGODB_ADDRESS_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString mongodbAddress_;
    /**
     * <code>optional bytes mongodb_address = 3;</code>
     *
     * <pre>
     *mongodb地址 
     * </pre>
     */
    public boolean hasMongodbAddress() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes mongodb_address = 3;</code>
     *
     * <pre>
     *mongodb地址 
     * </pre>
     */
    public com.google.protobuf.ByteString getMongodbAddress() {
      return mongodbAddress_;
    }

    public static final int MONGODB_PORT_FIELD_NUMBER = 4;
    private int mongodbPort_;
    /**
     * <code>optional int32 mongodb_port = 4;</code>
     *
     * <pre>
     *mongodb端口 
     * </pre>
     */
    public boolean hasMongodbPort() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 mongodb_port = 4;</code>
     *
     * <pre>
     *mongodb端口 
     * </pre>
     */
    public int getMongodbPort() {
      return mongodbPort_;
    }

    public static final int MONGODB_NAME_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString mongodbName_;
    /**
     * <code>optional bytes mongodb_name = 5;</code>
     *
     * <pre>
     *mongodb名字
     * </pre>
     */
    public boolean hasMongodbName() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes mongodb_name = 5;</code>
     *
     * <pre>
     *mongodb名字
     * </pre>
     */
    public com.google.protobuf.ByteString getMongodbName() {
      return mongodbName_;
    }

    public static final int INTERVAL_FIELD_NUMBER = 6;
    private int interval_;
    /**
     * <code>optional int32 interval = 6;</code>
     *
     * <pre>
     *每次捕获数据的间隔 单位毫秒
     * </pre>
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 interval = 6;</code>
     *
     * <pre>
     *每次捕获数据的间隔 单位毫秒
     * </pre>
     */
    public int getInterval() {
      return interval_;
    }

    public static final int TRIGGER_INTERVAL_FIELD_NUMBER = 7;
    private int triggerInterval_;
    /**
     * <code>optional int32 trigger_interval = 7;</code>
     *
     * <pre>
     *爬虫的运行规则 单位秒
     * </pre>
     */
    public boolean hasTriggerInterval() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 trigger_interval = 7;</code>
     *
     * <pre>
     *爬虫的运行规则 单位秒
     * </pre>
     */
    public int getTriggerInterval() {
      return triggerInterval_;
    }

    private void initFields() {
      reptileId_ = 0;
      reptileName_ = com.google.protobuf.ByteString.EMPTY;
      mongodbAddress_ = com.google.protobuf.ByteString.EMPTY;
      mongodbPort_ = 0;
      mongodbName_ = com.google.protobuf.ByteString.EMPTY;
      interval_ = 0;
      triggerInterval_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, reptileId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, reptileName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, mongodbAddress_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, mongodbPort_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, mongodbName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, interval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, triggerInterval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, reptileId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, reptileName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, mongodbAddress_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, mongodbPort_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, mongodbName_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, interval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, triggerInterval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_config_info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_config_info prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_config_info}
     *
     * <pre>
     *爬虫的配置信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_config_info)
        AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_config_info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_config_info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_config_info.class, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_config_info.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        reptileId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        reptileName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        mongodbAddress_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        mongodbPort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mongodbName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        interval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        triggerInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_config_info_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_config_info getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_config_info build() {
        AFP_reptile_control.AFPReptileControl.reptile_config_info result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_config_info buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_config_info result = new AFP_reptile_control.AFPReptileControl.reptile_config_info(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.reptileId_ = reptileId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reptileName_ = reptileName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mongodbAddress_ = mongodbAddress_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mongodbPort_ = mongodbPort_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mongodbName_ = mongodbName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.interval_ = interval_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.triggerInterval_ = triggerInterval_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_config_info) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_config_info)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_config_info other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance()) return this;
        if (other.hasReptileId()) {
          setReptileId(other.getReptileId());
        }
        if (other.hasReptileName()) {
          setReptileName(other.getReptileName());
        }
        if (other.hasMongodbAddress()) {
          setMongodbAddress(other.getMongodbAddress());
        }
        if (other.hasMongodbPort()) {
          setMongodbPort(other.getMongodbPort());
        }
        if (other.hasMongodbName()) {
          setMongodbName(other.getMongodbName());
        }
        if (other.hasInterval()) {
          setInterval(other.getInterval());
        }
        if (other.hasTriggerInterval()) {
          setTriggerInterval(other.getTriggerInterval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_config_info parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_config_info) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int reptileId_ ;
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public boolean hasReptileId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public int getReptileId() {
        return reptileId_;
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public Builder setReptileId(int value) {
        bitField0_ |= 0x00000001;
        reptileId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 reptile_id = 1;</code>
       *
       * <pre>
       *爬虫id 
       * </pre>
       */
      public Builder clearReptileId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        reptileId_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString reptileName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public boolean hasReptileName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public com.google.protobuf.ByteString getReptileName() {
        return reptileName_;
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder setReptileName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        reptileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reptile_name = 2;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder clearReptileName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reptileName_ = getDefaultInstance().getReptileName();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString mongodbAddress_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes mongodb_address = 3;</code>
       *
       * <pre>
       *mongodb地址 
       * </pre>
       */
      public boolean hasMongodbAddress() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes mongodb_address = 3;</code>
       *
       * <pre>
       *mongodb地址 
       * </pre>
       */
      public com.google.protobuf.ByteString getMongodbAddress() {
        return mongodbAddress_;
      }
      /**
       * <code>optional bytes mongodb_address = 3;</code>
       *
       * <pre>
       *mongodb地址 
       * </pre>
       */
      public Builder setMongodbAddress(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        mongodbAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes mongodb_address = 3;</code>
       *
       * <pre>
       *mongodb地址 
       * </pre>
       */
      public Builder clearMongodbAddress() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mongodbAddress_ = getDefaultInstance().getMongodbAddress();
        onChanged();
        return this;
      }

      private int mongodbPort_ ;
      /**
       * <code>optional int32 mongodb_port = 4;</code>
       *
       * <pre>
       *mongodb端口 
       * </pre>
       */
      public boolean hasMongodbPort() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 mongodb_port = 4;</code>
       *
       * <pre>
       *mongodb端口 
       * </pre>
       */
      public int getMongodbPort() {
        return mongodbPort_;
      }
      /**
       * <code>optional int32 mongodb_port = 4;</code>
       *
       * <pre>
       *mongodb端口 
       * </pre>
       */
      public Builder setMongodbPort(int value) {
        bitField0_ |= 0x00000008;
        mongodbPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mongodb_port = 4;</code>
       *
       * <pre>
       *mongodb端口 
       * </pre>
       */
      public Builder clearMongodbPort() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mongodbPort_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString mongodbName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes mongodb_name = 5;</code>
       *
       * <pre>
       *mongodb名字
       * </pre>
       */
      public boolean hasMongodbName() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes mongodb_name = 5;</code>
       *
       * <pre>
       *mongodb名字
       * </pre>
       */
      public com.google.protobuf.ByteString getMongodbName() {
        return mongodbName_;
      }
      /**
       * <code>optional bytes mongodb_name = 5;</code>
       *
       * <pre>
       *mongodb名字
       * </pre>
       */
      public Builder setMongodbName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        mongodbName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes mongodb_name = 5;</code>
       *
       * <pre>
       *mongodb名字
       * </pre>
       */
      public Builder clearMongodbName() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mongodbName_ = getDefaultInstance().getMongodbName();
        onChanged();
        return this;
      }

      private int interval_ ;
      /**
       * <code>optional int32 interval = 6;</code>
       *
       * <pre>
       *每次捕获数据的间隔 单位毫秒
       * </pre>
       */
      public boolean hasInterval() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 interval = 6;</code>
       *
       * <pre>
       *每次捕获数据的间隔 单位毫秒
       * </pre>
       */
      public int getInterval() {
        return interval_;
      }
      /**
       * <code>optional int32 interval = 6;</code>
       *
       * <pre>
       *每次捕获数据的间隔 单位毫秒
       * </pre>
       */
      public Builder setInterval(int value) {
        bitField0_ |= 0x00000020;
        interval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 interval = 6;</code>
       *
       * <pre>
       *每次捕获数据的间隔 单位毫秒
       * </pre>
       */
      public Builder clearInterval() {
        bitField0_ = (bitField0_ & ~0x00000020);
        interval_ = 0;
        onChanged();
        return this;
      }

      private int triggerInterval_ ;
      /**
       * <code>optional int32 trigger_interval = 7;</code>
       *
       * <pre>
       *爬虫的运行规则 单位秒
       * </pre>
       */
      public boolean hasTriggerInterval() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 trigger_interval = 7;</code>
       *
       * <pre>
       *爬虫的运行规则 单位秒
       * </pre>
       */
      public int getTriggerInterval() {
        return triggerInterval_;
      }
      /**
       * <code>optional int32 trigger_interval = 7;</code>
       *
       * <pre>
       *爬虫的运行规则 单位秒
       * </pre>
       */
      public Builder setTriggerInterval(int value) {
        bitField0_ |= 0x00000040;
        triggerInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 trigger_interval = 7;</code>
       *
       * <pre>
       *爬虫的运行规则 单位秒
       * </pre>
       */
      public Builder clearTriggerInterval() {
        bitField0_ = (bitField0_ & ~0x00000040);
        triggerInterval_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_config_info)
    }

    static {
      defaultInstance = new reptile_config_info(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_config_info)
  }

  public interface schedule_infoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.schedule_info)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    boolean hasInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder();

    /**
     * <code>optional int32 webpage_sum = 2;</code>
     *
     * <pre>
     *网页总数
     * </pre>
     */
    boolean hasWebpageSum();
    /**
     * <code>optional int32 webpage_sum = 2;</code>
     *
     * <pre>
     *网页总数
     * </pre>
     */
    int getWebpageSum();

    /**
     * <code>optional int32 invalid_webpage_count = 3;</code>
     *
     * <pre>
     *无效页面数
     * </pre>
     */
    boolean hasInvalidWebpageCount();
    /**
     * <code>optional int32 invalid_webpage_count = 3;</code>
     *
     * <pre>
     *无效页面数
     * </pre>
     */
    int getInvalidWebpageCount();

    /**
     * <code>optional int32 valid_webpage_count = 4;</code>
     *
     * <pre>
     *有效页面数
     * </pre>
     */
    boolean hasValidWebpageCount();
    /**
     * <code>optional int32 valid_webpage_count = 4;</code>
     *
     * <pre>
     *有效页面数
     * </pre>
     */
    int getValidWebpageCount();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.schedule_info}
   *
   * <pre>
   *进度 网页数，无效页面数
   * </pre>
   */
  public static final class schedule_info extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.schedule_info)
      schedule_infoOrBuilder {
    // Use schedule_info.newBuilder() to construct.
    private schedule_info(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private schedule_info(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final schedule_info defaultInstance;
    public static schedule_info getDefaultInstance() {
      return defaultInstance;
    }

    public schedule_info getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private schedule_info(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = info_.toBuilder();
              }
              info_ = input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(info_);
                info_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              webpageSum_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              invalidWebpageCount_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              validWebpageCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_schedule_info_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_schedule_info_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.schedule_info.class, AFP_reptile_control.AFPReptileControl.schedule_info.Builder.class);
    }

    public static com.google.protobuf.Parser<schedule_info> PARSER =
        new com.google.protobuf.AbstractParser<schedule_info>() {
      public schedule_info parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new schedule_info(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<schedule_info> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private AFP_reptile_control.AFPReptileControl.reptile_basic_info info_;
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo() {
      return info_;
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder() {
      return info_;
    }

    public static final int WEBPAGE_SUM_FIELD_NUMBER = 2;
    private int webpageSum_;
    /**
     * <code>optional int32 webpage_sum = 2;</code>
     *
     * <pre>
     *网页总数
     * </pre>
     */
    public boolean hasWebpageSum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 webpage_sum = 2;</code>
     *
     * <pre>
     *网页总数
     * </pre>
     */
    public int getWebpageSum() {
      return webpageSum_;
    }

    public static final int INVALID_WEBPAGE_COUNT_FIELD_NUMBER = 3;
    private int invalidWebpageCount_;
    /**
     * <code>optional int32 invalid_webpage_count = 3;</code>
     *
     * <pre>
     *无效页面数
     * </pre>
     */
    public boolean hasInvalidWebpageCount() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 invalid_webpage_count = 3;</code>
     *
     * <pre>
     *无效页面数
     * </pre>
     */
    public int getInvalidWebpageCount() {
      return invalidWebpageCount_;
    }

    public static final int VALID_WEBPAGE_COUNT_FIELD_NUMBER = 4;
    private int validWebpageCount_;
    /**
     * <code>optional int32 valid_webpage_count = 4;</code>
     *
     * <pre>
     *有效页面数
     * </pre>
     */
    public boolean hasValidWebpageCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 valid_webpage_count = 4;</code>
     *
     * <pre>
     *有效页面数
     * </pre>
     */
    public int getValidWebpageCount() {
      return validWebpageCount_;
    }

    private void initFields() {
      info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      webpageSum_ = 0;
      invalidWebpageCount_ = 0;
      validWebpageCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, webpageSum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, invalidWebpageCount_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, validWebpageCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, webpageSum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, invalidWebpageCount_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, validWebpageCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.schedule_info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.schedule_info prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.schedule_info}
     *
     * <pre>
     *进度 网页数，无效页面数
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.schedule_info)
        AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_schedule_info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_schedule_info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.schedule_info.class, AFP_reptile_control.AFPReptileControl.schedule_info.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.schedule_info.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        webpageSum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        invalidWebpageCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        validWebpageCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_schedule_info_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.schedule_info getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.schedule_info.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.schedule_info build() {
        AFP_reptile_control.AFPReptileControl.schedule_info result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.schedule_info buildPartial() {
        AFP_reptile_control.AFPReptileControl.schedule_info result = new AFP_reptile_control.AFPReptileControl.schedule_info(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (infoBuilder_ == null) {
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.webpageSum_ = webpageSum_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.invalidWebpageCount_ = invalidWebpageCount_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.validWebpageCount_ = validWebpageCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.schedule_info) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.schedule_info)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.schedule_info other) {
        if (other == AFP_reptile_control.AFPReptileControl.schedule_info.getDefaultInstance()) return this;
        if (other.hasInfo()) {
          mergeInfo(other.getInfo());
        }
        if (other.hasWebpageSum()) {
          setWebpageSum(other.getWebpageSum());
        }
        if (other.hasInvalidWebpageCount()) {
          setInvalidWebpageCount(other.getInvalidWebpageCount());
        }
        if (other.hasValidWebpageCount()) {
          setValidWebpageCount(other.getValidWebpageCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.schedule_info parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.schedule_info) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private AFP_reptile_control.AFPReptileControl.reptile_basic_info info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo() {
        if (infoBuilder_ == null) {
          return info_;
        } else {
          return infoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder setInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          info_ = value;
          onChanged();
        } else {
          infoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder setInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          info_ = builderForValue.build();
          onChanged();
        } else {
          infoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder mergeInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              info_ != AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance()) {
            info_ =
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.newBuilder(info_).mergeFrom(value).buildPartial();
          } else {
            info_ = value;
          }
          onChanged();
        } else {
          infoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilder();
        } else {
          return info_;
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  getInfo(),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private int webpageSum_ ;
      /**
       * <code>optional int32 webpage_sum = 2;</code>
       *
       * <pre>
       *网页总数
       * </pre>
       */
      public boolean hasWebpageSum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 webpage_sum = 2;</code>
       *
       * <pre>
       *网页总数
       * </pre>
       */
      public int getWebpageSum() {
        return webpageSum_;
      }
      /**
       * <code>optional int32 webpage_sum = 2;</code>
       *
       * <pre>
       *网页总数
       * </pre>
       */
      public Builder setWebpageSum(int value) {
        bitField0_ |= 0x00000002;
        webpageSum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 webpage_sum = 2;</code>
       *
       * <pre>
       *网页总数
       * </pre>
       */
      public Builder clearWebpageSum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        webpageSum_ = 0;
        onChanged();
        return this;
      }

      private int invalidWebpageCount_ ;
      /**
       * <code>optional int32 invalid_webpage_count = 3;</code>
       *
       * <pre>
       *无效页面数
       * </pre>
       */
      public boolean hasInvalidWebpageCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 invalid_webpage_count = 3;</code>
       *
       * <pre>
       *无效页面数
       * </pre>
       */
      public int getInvalidWebpageCount() {
        return invalidWebpageCount_;
      }
      /**
       * <code>optional int32 invalid_webpage_count = 3;</code>
       *
       * <pre>
       *无效页面数
       * </pre>
       */
      public Builder setInvalidWebpageCount(int value) {
        bitField0_ |= 0x00000004;
        invalidWebpageCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 invalid_webpage_count = 3;</code>
       *
       * <pre>
       *无效页面数
       * </pre>
       */
      public Builder clearInvalidWebpageCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        invalidWebpageCount_ = 0;
        onChanged();
        return this;
      }

      private int validWebpageCount_ ;
      /**
       * <code>optional int32 valid_webpage_count = 4;</code>
       *
       * <pre>
       *有效页面数
       * </pre>
       */
      public boolean hasValidWebpageCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 valid_webpage_count = 4;</code>
       *
       * <pre>
       *有效页面数
       * </pre>
       */
      public int getValidWebpageCount() {
        return validWebpageCount_;
      }
      /**
       * <code>optional int32 valid_webpage_count = 4;</code>
       *
       * <pre>
       *有效页面数
       * </pre>
       */
      public Builder setValidWebpageCount(int value) {
        bitField0_ |= 0x00000008;
        validWebpageCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 valid_webpage_count = 4;</code>
       *
       * <pre>
       *有效页面数
       * </pre>
       */
      public Builder clearValidWebpageCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        validWebpageCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.schedule_info)
    }

    static {
      defaultInstance = new schedule_info(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.schedule_info)
  }

  public interface set_reptile_configOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.set_reptile_config)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    boolean hasBasicInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getBasicInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getBasicInfoOrBuilder();

    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    boolean hasConfigInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_config_info getConfigInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getConfigInfoOrBuilder();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.set_reptile_config}
   */
  public static final class set_reptile_config extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.set_reptile_config)
      set_reptile_configOrBuilder {
    // Use set_reptile_config.newBuilder() to construct.
    private set_reptile_config(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private set_reptile_config(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final set_reptile_config defaultInstance;
    public static set_reptile_config getDefaultInstance() {
      return defaultInstance;
    }

    public set_reptile_config getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private set_reptile_config(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = basicInfo_.toBuilder();
              }
              basicInfo_ = input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(basicInfo_);
                basicInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = configInfo_.toBuilder();
              }
              configInfo_ = input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_config_info.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(configInfo_);
                configInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.set_reptile_config.class, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder.class);
    }

    public static com.google.protobuf.Parser<set_reptile_config> PARSER =
        new com.google.protobuf.AbstractParser<set_reptile_config>() {
      public set_reptile_config parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new set_reptile_config(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<set_reptile_config> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BASIC_INFO_FIELD_NUMBER = 1;
    private AFP_reptile_control.AFPReptileControl.reptile_basic_info basicInfo_;
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    public boolean hasBasicInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getBasicInfo() {
      return basicInfo_;
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getBasicInfoOrBuilder() {
      return basicInfo_;
    }

    public static final int CONFIG_INFO_FIELD_NUMBER = 2;
    private AFP_reptile_control.AFPReptileControl.reptile_config_info configInfo_;
    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    public boolean hasConfigInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_config_info getConfigInfo() {
      return configInfo_;
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getConfigInfoOrBuilder() {
      return configInfo_;
    }

    private void initFields() {
      basicInfo_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      configInfo_ = AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, basicInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, configInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, basicInfo_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, configInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.set_reptile_config prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.set_reptile_config}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.set_reptile_config)
        AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.set_reptile_config.class, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.set_reptile_config.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBasicInfoFieldBuilder();
          getConfigInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (basicInfoBuilder_ == null) {
          basicInfo_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
        } else {
          basicInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (configInfoBuilder_ == null) {
          configInfo_ = AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance();
        } else {
          configInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.set_reptile_config.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config build() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config buildPartial() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config result = new AFP_reptile_control.AFPReptileControl.set_reptile_config(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (basicInfoBuilder_ == null) {
          result.basicInfo_ = basicInfo_;
        } else {
          result.basicInfo_ = basicInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (configInfoBuilder_ == null) {
          result.configInfo_ = configInfo_;
        } else {
          result.configInfo_ = configInfoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.set_reptile_config) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.set_reptile_config)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.set_reptile_config other) {
        if (other == AFP_reptile_control.AFPReptileControl.set_reptile_config.getDefaultInstance()) return this;
        if (other.hasBasicInfo()) {
          mergeBasicInfo(other.getBasicInfo());
        }
        if (other.hasConfigInfo()) {
          mergeConfigInfo(other.getConfigInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.set_reptile_config parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.set_reptile_config) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private AFP_reptile_control.AFPReptileControl.reptile_basic_info basicInfo_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> basicInfoBuilder_;
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public boolean hasBasicInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getBasicInfo() {
        if (basicInfoBuilder_ == null) {
          return basicInfo_;
        } else {
          return basicInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public Builder setBasicInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (basicInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          basicInfo_ = value;
          onChanged();
        } else {
          basicInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public Builder setBasicInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (basicInfoBuilder_ == null) {
          basicInfo_ = builderForValue.build();
          onChanged();
        } else {
          basicInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public Builder mergeBasicInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (basicInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              basicInfo_ != AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance()) {
            basicInfo_ =
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.newBuilder(basicInfo_).mergeFrom(value).buildPartial();
          } else {
            basicInfo_ = value;
          }
          onChanged();
        } else {
          basicInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public Builder clearBasicInfo() {
        if (basicInfoBuilder_ == null) {
          basicInfo_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
          onChanged();
        } else {
          basicInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getBasicInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getBasicInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getBasicInfoOrBuilder() {
        if (basicInfoBuilder_ != null) {
          return basicInfoBuilder_.getMessageOrBuilder();
        } else {
          return basicInfo_;
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info basic_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getBasicInfoFieldBuilder() {
        if (basicInfoBuilder_ == null) {
          basicInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  getBasicInfo(),
                  getParentForChildren(),
                  isClean());
          basicInfo_ = null;
        }
        return basicInfoBuilder_;
      }

      private AFP_reptile_control.AFPReptileControl.reptile_config_info configInfo_ = AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> configInfoBuilder_;
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public boolean hasConfigInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info getConfigInfo() {
        if (configInfoBuilder_ == null) {
          return configInfo_;
        } else {
          return configInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public Builder setConfigInfo(AFP_reptile_control.AFPReptileControl.reptile_config_info value) {
        if (configInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          configInfo_ = value;
          onChanged();
        } else {
          configInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public Builder setConfigInfo(
          AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder builderForValue) {
        if (configInfoBuilder_ == null) {
          configInfo_ = builderForValue.build();
          onChanged();
        } else {
          configInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public Builder mergeConfigInfo(AFP_reptile_control.AFPReptileControl.reptile_config_info value) {
        if (configInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              configInfo_ != AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance()) {
            configInfo_ =
              AFP_reptile_control.AFPReptileControl.reptile_config_info.newBuilder(configInfo_).mergeFrom(value).buildPartial();
          } else {
            configInfo_ = value;
          }
          onChanged();
        } else {
          configInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public Builder clearConfigInfo() {
        if (configInfoBuilder_ == null) {
          configInfo_ = AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance();
          onChanged();
        } else {
          configInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder getConfigInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getConfigInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getConfigInfoOrBuilder() {
        if (configInfoBuilder_ != null) {
          return configInfoBuilder_.getMessageOrBuilder();
        } else {
          return configInfo_;
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_config_info config_info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> 
          getConfigInfoFieldBuilder() {
        if (configInfoBuilder_ == null) {
          configInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder>(
                  getConfigInfo(),
                  getParentForChildren(),
                  isClean());
          configInfo_ = null;
        }
        return configInfoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.set_reptile_config)
    }

    static {
      defaultInstance = new set_reptile_config(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config)
  }

  public interface reptile_historyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_history)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    boolean hasInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo();
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder();

    /**
     * <code>optional int32 new_data = 2;</code>
     *
     * <pre>
     *新增数据量
     * </pre>
     */
    boolean hasNewData();
    /**
     * <code>optional int32 new_data = 2;</code>
     *
     * <pre>
     *新增数据量
     * </pre>
     */
    int getNewData();

    /**
     * <code>optional int32 update_data = 3;</code>
     *
     * <pre>
     *更新数据量
     * </pre>
     */
    boolean hasUpdateData();
    /**
     * <code>optional int32 update_data = 3;</code>
     *
     * <pre>
     *更新数据量
     * </pre>
     */
    int getUpdateData();

    /**
     * <code>optional int32 webpage_count = 4;</code>
     *
     * <pre>
     *访问的页面数量
     * </pre>
     */
    boolean hasWebpageCount();
    /**
     * <code>optional int32 webpage_count = 4;</code>
     *
     * <pre>
     *访问的页面数量
     * </pre>
     */
    int getWebpageCount();

    /**
     * <code>optional bytes time = 5;</code>
     *
     * <pre>
     *爬取的时间
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>optional bytes time = 5;</code>
     *
     * <pre>
     *爬取的时间
     * </pre>
     */
    com.google.protobuf.ByteString getTime();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_history}
   */
  public static final class reptile_history extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_history)
      reptile_historyOrBuilder {
    // Use reptile_history.newBuilder() to construct.
    private reptile_history(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_history(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_history defaultInstance;
    public static reptile_history getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_history getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_history(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = info_.toBuilder();
              }
              info_ = input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(info_);
                info_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              newData_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              updateData_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              webpageCount_ = input.readInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              time_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_history.class, AFP_reptile_control.AFPReptileControl.reptile_history.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_history> PARSER =
        new com.google.protobuf.AbstractParser<reptile_history>() {
      public reptile_history parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_history(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_history> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private AFP_reptile_control.AFPReptileControl.reptile_basic_info info_;
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo() {
      return info_;
    }
    /**
     * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder() {
      return info_;
    }

    public static final int NEW_DATA_FIELD_NUMBER = 2;
    private int newData_;
    /**
     * <code>optional int32 new_data = 2;</code>
     *
     * <pre>
     *新增数据量
     * </pre>
     */
    public boolean hasNewData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 new_data = 2;</code>
     *
     * <pre>
     *新增数据量
     * </pre>
     */
    public int getNewData() {
      return newData_;
    }

    public static final int UPDATE_DATA_FIELD_NUMBER = 3;
    private int updateData_;
    /**
     * <code>optional int32 update_data = 3;</code>
     *
     * <pre>
     *更新数据量
     * </pre>
     */
    public boolean hasUpdateData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 update_data = 3;</code>
     *
     * <pre>
     *更新数据量
     * </pre>
     */
    public int getUpdateData() {
      return updateData_;
    }

    public static final int WEBPAGE_COUNT_FIELD_NUMBER = 4;
    private int webpageCount_;
    /**
     * <code>optional int32 webpage_count = 4;</code>
     *
     * <pre>
     *访问的页面数量
     * </pre>
     */
    public boolean hasWebpageCount() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 webpage_count = 4;</code>
     *
     * <pre>
     *访问的页面数量
     * </pre>
     */
    public int getWebpageCount() {
      return webpageCount_;
    }

    public static final int TIME_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString time_;
    /**
     * <code>optional bytes time = 5;</code>
     *
     * <pre>
     *爬取的时间
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes time = 5;</code>
     *
     * <pre>
     *爬取的时间
     * </pre>
     */
    public com.google.protobuf.ByteString getTime() {
      return time_;
    }

    private void initFields() {
      info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      newData_ = 0;
      updateData_ = 0;
      webpageCount_ = 0;
      time_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, newData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, updateData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, webpageCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, time_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, newData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, updateData_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, webpageCount_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, time_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_history prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_history}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_history)
        AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_history.class, AFP_reptile_control.AFPReptileControl.reptile_history.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_history.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        newData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        updateData_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        webpageCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        time_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_history.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history build() {
        AFP_reptile_control.AFPReptileControl.reptile_history result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_history result = new AFP_reptile_control.AFPReptileControl.reptile_history(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (infoBuilder_ == null) {
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.newData_ = newData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.updateData_ = updateData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.webpageCount_ = webpageCount_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.time_ = time_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_history) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_history)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_history other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_history.getDefaultInstance()) return this;
        if (other.hasInfo()) {
          mergeInfo(other.getInfo());
        }
        if (other.hasNewData()) {
          setNewData(other.getNewData());
        }
        if (other.hasUpdateData()) {
          setUpdateData(other.getUpdateData());
        }
        if (other.hasWebpageCount()) {
          setWebpageCount(other.getWebpageCount());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_history parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_history) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private AFP_reptile_control.AFPReptileControl.reptile_basic_info info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo() {
        if (infoBuilder_ == null) {
          return info_;
        } else {
          return infoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder setInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          info_ = value;
          onChanged();
        } else {
          infoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder setInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          info_ = builderForValue.build();
          onChanged();
        } else {
          infoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder mergeInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              info_ != AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance()) {
            info_ =
              AFP_reptile_control.AFPReptileControl.reptile_basic_info.newBuilder(info_).mergeFrom(value).buildPartial();
          } else {
            info_ = value;
          }
          onChanged();
        } else {
          infoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance();
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilder();
        } else {
          return info_;
        }
      }
      /**
       * <code>optional .AFP_reptile_control.reptile_basic_info info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  getInfo(),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private int newData_ ;
      /**
       * <code>optional int32 new_data = 2;</code>
       *
       * <pre>
       *新增数据量
       * </pre>
       */
      public boolean hasNewData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 new_data = 2;</code>
       *
       * <pre>
       *新增数据量
       * </pre>
       */
      public int getNewData() {
        return newData_;
      }
      /**
       * <code>optional int32 new_data = 2;</code>
       *
       * <pre>
       *新增数据量
       * </pre>
       */
      public Builder setNewData(int value) {
        bitField0_ |= 0x00000002;
        newData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_data = 2;</code>
       *
       * <pre>
       *新增数据量
       * </pre>
       */
      public Builder clearNewData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        newData_ = 0;
        onChanged();
        return this;
      }

      private int updateData_ ;
      /**
       * <code>optional int32 update_data = 3;</code>
       *
       * <pre>
       *更新数据量
       * </pre>
       */
      public boolean hasUpdateData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 update_data = 3;</code>
       *
       * <pre>
       *更新数据量
       * </pre>
       */
      public int getUpdateData() {
        return updateData_;
      }
      /**
       * <code>optional int32 update_data = 3;</code>
       *
       * <pre>
       *更新数据量
       * </pre>
       */
      public Builder setUpdateData(int value) {
        bitField0_ |= 0x00000004;
        updateData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 update_data = 3;</code>
       *
       * <pre>
       *更新数据量
       * </pre>
       */
      public Builder clearUpdateData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        updateData_ = 0;
        onChanged();
        return this;
      }

      private int webpageCount_ ;
      /**
       * <code>optional int32 webpage_count = 4;</code>
       *
       * <pre>
       *访问的页面数量
       * </pre>
       */
      public boolean hasWebpageCount() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 webpage_count = 4;</code>
       *
       * <pre>
       *访问的页面数量
       * </pre>
       */
      public int getWebpageCount() {
        return webpageCount_;
      }
      /**
       * <code>optional int32 webpage_count = 4;</code>
       *
       * <pre>
       *访问的页面数量
       * </pre>
       */
      public Builder setWebpageCount(int value) {
        bitField0_ |= 0x00000008;
        webpageCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 webpage_count = 4;</code>
       *
       * <pre>
       *访问的页面数量
       * </pre>
       */
      public Builder clearWebpageCount() {
        bitField0_ = (bitField0_ & ~0x00000008);
        webpageCount_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString time_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes time = 5;</code>
       *
       * <pre>
       *爬取的时间
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes time = 5;</code>
       *
       * <pre>
       *爬取的时间
       * </pre>
       */
      public com.google.protobuf.ByteString getTime() {
        return time_;
      }
      /**
       * <code>optional bytes time = 5;</code>
       *
       * <pre>
       *爬取的时间
       * </pre>
       */
      public Builder setTime(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes time = 5;</code>
       *
       * <pre>
       *爬取的时间
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        time_ = getDefaultInstance().getTime();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_history)
    }

    static {
      defaultInstance = new reptile_history(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history)
  }

  public interface reptile_info_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_info_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_info_ask}
   *
   * <pre>
   *&#47;/  client&lt;------&gt;server
   *把自身所带爬虫的信息（爬虫ID，爬虫名称,所在的服务器IP地址，所爬网站的中文名）推送给server，同时获取server的爬虫相关的配置信息
   * </pre>
   */
  public static final class reptile_info_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_info_ask)
      reptile_info_askOrBuilder {
    // Use reptile_info_ask.newBuilder() to construct.
    private reptile_info_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_info_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_info_ask defaultInstance;
    public static reptile_info_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_info_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_info_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_info_ask.class, AFP_reptile_control.AFPReptileControl.reptile_info_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_info_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_info_ask>() {
      public reptile_info_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_info_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_info_ask> getParserForType() {
      return PARSER;
    }

    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_info_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_info_ask}
     *
     * <pre>
     *&#47;/  client&lt;------&gt;server
     *把自身所带爬虫的信息（爬虫ID，爬虫名称,所在的服务器IP地址，所爬网站的中文名）推送给server，同时获取server的爬虫相关的配置信息
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_info_ask)
        AFP_reptile_control.AFPReptileControl.reptile_info_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_info_ask.class, AFP_reptile_control.AFPReptileControl.reptile_info_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_info_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_info_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_info_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_info_ask result = new AFP_reptile_control.AFPReptileControl.reptile_info_ask(this);
        int from_bitField0_ = bitField0_;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_info_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_info_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_info_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_info_ask.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_info_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_info_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_info_ask)
    }

    static {
      defaultInstance = new reptile_info_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_info_ask)
  }

  public interface reptile_info_ansOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_info_ans)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfo getError();
    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfoOrBuilder getErrorOrBuilder();

    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_config_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_info_ans}
   */
  public static final class reptile_info_ans extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_info_ans)
      reptile_info_ansOrBuilder {
    // Use reptile_info_ans.newBuilder() to construct.
    private reptile_info_ans(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_info_ans(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_info_ans defaultInstance;
    public static reptile_info_ans getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_info_ans getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_info_ans(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              common.Common.errorinfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(common.Common.errorinfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_config_info>();
                mutable_bitField0_ |= 0x00000002;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_config_info.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ans_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ans_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_info_ans.class, AFP_reptile_control.AFPReptileControl.reptile_info_ans.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_info_ans> PARSER =
        new com.google.protobuf.AbstractParser<reptile_info_ans>() {
      public reptile_info_ans parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_info_ans(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_info_ans> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private common.Common.errorinfo error_;
    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfo getError() {
      return error_;
    }
    /**
     * <code>optional .common.errorinfo error = 1;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
      return error_;
    }

    public static final int INFO_FIELD_NUMBER = 2;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_config_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
     *
     * <pre>
     *爬虫配置信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    private void initFields() {
      error_ = common.Common.errorinfo.getDefaultInstance();
      info_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, error_);
      }
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(2, info_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, error_);
      }
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, info_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_info_ans parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_info_ans prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_info_ans}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_info_ans)
        AFP_reptile_control.AFPReptileControl.reptile_info_ansOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ans_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ans_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_info_ans.class, AFP_reptile_control.AFPReptileControl.reptile_info_ans.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_info_ans.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getErrorFieldBuilder();
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          infoBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_info_ans_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ans getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_info_ans.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ans build() {
        AFP_reptile_control.AFPReptileControl.reptile_info_ans result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_info_ans buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_info_ans result = new AFP_reptile_control.AFPReptileControl.reptile_info_ans(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_info_ans) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_info_ans)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_info_ans other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_info_ans.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000002);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_info_ans parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_info_ans) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private common.Common.errorinfo error_ = common.Common.errorinfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> errorBuilder_;
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo getError() {
        if (errorBuilder_ == null) {
          return error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(
          common.Common.errorinfo.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder mergeError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              error_ != common.Common.errorinfo.getDefaultInstance()) {
            error_ =
              common.Common.errorinfo.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
          onChanged();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo.Builder getErrorBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_;
        }
      }
      /**
       * <code>optional .common.errorinfo error = 1;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_config_info>(info_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_config_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_config_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_config_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_config_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_config_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_config_info info = 2;</code>
       *
       * <pre>
       *爬虫配置信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_config_info, AFP_reptile_control.AFPReptileControl.reptile_config_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_config_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_info_ans)
    }

    static {
      defaultInstance = new reptile_info_ans(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_info_ans)
  }

  public interface reptile_schedule_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_schedule_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info> 
        getScheduleList();
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.schedule_info getSchedule(int index);
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    int getScheduleCount();
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder> 
        getScheduleOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder getScheduleOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_schedule_ask}
   *
   * <pre>
   *爬虫的进度
   * </pre>
   */
  public static final class reptile_schedule_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_schedule_ask)
      reptile_schedule_askOrBuilder {
    // Use reptile_schedule_ask.newBuilder() to construct.
    private reptile_schedule_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_schedule_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_schedule_ask defaultInstance;
    public static reptile_schedule_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_schedule_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_schedule_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                schedule_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.schedule_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              schedule_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.schedule_info.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          schedule_ = java.util.Collections.unmodifiableList(schedule_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_schedule_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.class, AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_schedule_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_schedule_ask>() {
      public reptile_schedule_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_schedule_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_schedule_ask> getParserForType() {
      return PARSER;
    }

    public static final int SCHEDULE_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info> schedule_;
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info> getScheduleList() {
      return schedule_;
    }
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder> 
        getScheduleOrBuilderList() {
      return schedule_;
    }
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    public int getScheduleCount() {
      return schedule_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.schedule_info getSchedule(int index) {
      return schedule_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder getScheduleOrBuilder(
        int index) {
      return schedule_.get(index);
    }

    private void initFields() {
      schedule_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < schedule_.size(); i++) {
        output.writeMessage(1, schedule_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < schedule_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, schedule_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_schedule_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_schedule_ask}
     *
     * <pre>
     *爬虫的进度
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_schedule_ask)
        AFP_reptile_control.AFPReptileControl.reptile_schedule_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_schedule_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.class, AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getScheduleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (scheduleBuilder_ == null) {
          schedule_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          scheduleBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_schedule_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_schedule_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_schedule_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_schedule_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_schedule_ask result = new AFP_reptile_control.AFPReptileControl.reptile_schedule_ask(this);
        int from_bitField0_ = bitField0_;
        if (scheduleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            schedule_ = java.util.Collections.unmodifiableList(schedule_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.schedule_ = schedule_;
        } else {
          result.schedule_ = scheduleBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_schedule_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_schedule_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_schedule_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_schedule_ask.getDefaultInstance()) return this;
        if (scheduleBuilder_ == null) {
          if (!other.schedule_.isEmpty()) {
            if (schedule_.isEmpty()) {
              schedule_ = other.schedule_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureScheduleIsMutable();
              schedule_.addAll(other.schedule_);
            }
            onChanged();
          }
        } else {
          if (!other.schedule_.isEmpty()) {
            if (scheduleBuilder_.isEmpty()) {
              scheduleBuilder_.dispose();
              scheduleBuilder_ = null;
              schedule_ = other.schedule_;
              bitField0_ = (bitField0_ & ~0x00000001);
              scheduleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScheduleFieldBuilder() : null;
            } else {
              scheduleBuilder_.addAllMessages(other.schedule_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_schedule_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_schedule_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info> schedule_ =
        java.util.Collections.emptyList();
      private void ensureScheduleIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          schedule_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.schedule_info>(schedule_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.schedule_info, AFP_reptile_control.AFPReptileControl.schedule_info.Builder, AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder> scheduleBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info> getScheduleList() {
        if (scheduleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(schedule_);
        } else {
          return scheduleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public int getScheduleCount() {
        if (scheduleBuilder_ == null) {
          return schedule_.size();
        } else {
          return scheduleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.schedule_info getSchedule(int index) {
        if (scheduleBuilder_ == null) {
          return schedule_.get(index);
        } else {
          return scheduleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder setSchedule(
          int index, AFP_reptile_control.AFPReptileControl.schedule_info value) {
        if (scheduleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScheduleIsMutable();
          schedule_.set(index, value);
          onChanged();
        } else {
          scheduleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder setSchedule(
          int index, AFP_reptile_control.AFPReptileControl.schedule_info.Builder builderForValue) {
        if (scheduleBuilder_ == null) {
          ensureScheduleIsMutable();
          schedule_.set(index, builderForValue.build());
          onChanged();
        } else {
          scheduleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder addSchedule(AFP_reptile_control.AFPReptileControl.schedule_info value) {
        if (scheduleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScheduleIsMutable();
          schedule_.add(value);
          onChanged();
        } else {
          scheduleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder addSchedule(
          int index, AFP_reptile_control.AFPReptileControl.schedule_info value) {
        if (scheduleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScheduleIsMutable();
          schedule_.add(index, value);
          onChanged();
        } else {
          scheduleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder addSchedule(
          AFP_reptile_control.AFPReptileControl.schedule_info.Builder builderForValue) {
        if (scheduleBuilder_ == null) {
          ensureScheduleIsMutable();
          schedule_.add(builderForValue.build());
          onChanged();
        } else {
          scheduleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder addSchedule(
          int index, AFP_reptile_control.AFPReptileControl.schedule_info.Builder builderForValue) {
        if (scheduleBuilder_ == null) {
          ensureScheduleIsMutable();
          schedule_.add(index, builderForValue.build());
          onChanged();
        } else {
          scheduleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder addAllSchedule(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.schedule_info> values) {
        if (scheduleBuilder_ == null) {
          ensureScheduleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, schedule_);
          onChanged();
        } else {
          scheduleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder clearSchedule() {
        if (scheduleBuilder_ == null) {
          schedule_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          scheduleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public Builder removeSchedule(int index) {
        if (scheduleBuilder_ == null) {
          ensureScheduleIsMutable();
          schedule_.remove(index);
          onChanged();
        } else {
          scheduleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.schedule_info.Builder getScheduleBuilder(
          int index) {
        return getScheduleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder getScheduleOrBuilder(
          int index) {
        if (scheduleBuilder_ == null) {
          return schedule_.get(index);  } else {
          return scheduleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder> 
           getScheduleOrBuilderList() {
        if (scheduleBuilder_ != null) {
          return scheduleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(schedule_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.schedule_info.Builder addScheduleBuilder() {
        return getScheduleFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.schedule_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.schedule_info.Builder addScheduleBuilder(
          int index) {
        return getScheduleFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.schedule_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.schedule_info schedule = 1;</code>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.schedule_info.Builder> 
           getScheduleBuilderList() {
        return getScheduleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.schedule_info, AFP_reptile_control.AFPReptileControl.schedule_info.Builder, AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder> 
          getScheduleFieldBuilder() {
        if (scheduleBuilder_ == null) {
          scheduleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.schedule_info, AFP_reptile_control.AFPReptileControl.schedule_info.Builder, AFP_reptile_control.AFPReptileControl.schedule_infoOrBuilder>(
                  schedule_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          schedule_ = null;
        }
        return scheduleBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_schedule_ask)
    }

    static {
      defaultInstance = new reptile_schedule_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_schedule_ask)
  }

  public interface set_reptile_config_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.set_reptile_config_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config> 
        getConfigList();
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.set_reptile_config getConfig(int index);
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    int getConfigCount();
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder> 
        getConfigOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder getConfigOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code AFP_reptile_control.set_reptile_config_ask}
   *
   * <pre>
   *爬虫的基本配置设置
   * </pre>
   */
  public static final class set_reptile_config_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.set_reptile_config_ask)
      set_reptile_config_askOrBuilder {
    // Use set_reptile_config_ask.newBuilder() to construct.
    private set_reptile_config_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private set_reptile_config_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final set_reptile_config_ask defaultInstance;
    public static set_reptile_config_ask getDefaultInstance() {
      return defaultInstance;
    }

    public set_reptile_config_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private set_reptile_config_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                config_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.set_reptile_config>();
                mutable_bitField0_ |= 0x00000001;
              }
              config_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.set_reptile_config.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          config_ = java.util.Collections.unmodifiableList(config_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.class, AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<set_reptile_config_ask> PARSER =
        new com.google.protobuf.AbstractParser<set_reptile_config_ask>() {
      public set_reptile_config_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new set_reptile_config_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<set_reptile_config_ask> getParserForType() {
      return PARSER;
    }

    public static final int CONFIG_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config> config_;
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config> getConfigList() {
      return config_;
    }
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder> 
        getConfigOrBuilderList() {
      return config_;
    }
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    public int getConfigCount() {
      return config_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.set_reptile_config getConfig(int index) {
      return config_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
     */
    public AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder getConfigOrBuilder(
        int index) {
      return config_.get(index);
    }

    private void initFields() {
      config_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < config_.size(); i++) {
        output.writeMessage(1, config_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < config_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, config_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.set_reptile_config_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.set_reptile_config_ask}
     *
     * <pre>
     *爬虫的基本配置设置
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.set_reptile_config_ask)
        AFP_reptile_control.AFPReptileControl.set_reptile_config_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.class, AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getConfigFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (configBuilder_ == null) {
          config_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          configBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ask build() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ask result = new AFP_reptile_control.AFPReptileControl.set_reptile_config_ask(this);
        int from_bitField0_ = bitField0_;
        if (configBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            config_ = java.util.Collections.unmodifiableList(config_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.set_reptile_config_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.set_reptile_config_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.set_reptile_config_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.set_reptile_config_ask.getDefaultInstance()) return this;
        if (configBuilder_ == null) {
          if (!other.config_.isEmpty()) {
            if (config_.isEmpty()) {
              config_ = other.config_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureConfigIsMutable();
              config_.addAll(other.config_);
            }
            onChanged();
          }
        } else {
          if (!other.config_.isEmpty()) {
            if (configBuilder_.isEmpty()) {
              configBuilder_.dispose();
              configBuilder_ = null;
              config_ = other.config_;
              bitField0_ = (bitField0_ & ~0x00000001);
              configBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getConfigFieldBuilder() : null;
            } else {
              configBuilder_.addAllMessages(other.config_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.set_reptile_config_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config> config_ =
        java.util.Collections.emptyList();
      private void ensureConfigIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          config_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.set_reptile_config>(config_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.set_reptile_config, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder, AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder> configBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config> getConfigList() {
        if (configBuilder_ == null) {
          return java.util.Collections.unmodifiableList(config_);
        } else {
          return configBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public int getConfigCount() {
        if (configBuilder_ == null) {
          return config_.size();
        } else {
          return configBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.set_reptile_config getConfig(int index) {
        if (configBuilder_ == null) {
          return config_.get(index);
        } else {
          return configBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder setConfig(
          int index, AFP_reptile_control.AFPReptileControl.set_reptile_config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.set(index, value);
          onChanged();
        } else {
          configBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder setConfig(
          int index, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.set(index, builderForValue.build());
          onChanged();
        } else {
          configBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder addConfig(AFP_reptile_control.AFPReptileControl.set_reptile_config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.add(value);
          onChanged();
        } else {
          configBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder addConfig(
          int index, AFP_reptile_control.AFPReptileControl.set_reptile_config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConfigIsMutable();
          config_.add(index, value);
          onChanged();
        } else {
          configBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder addConfig(
          AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.add(builderForValue.build());
          onChanged();
        } else {
          configBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder addConfig(
          int index, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder builderForValue) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.add(index, builderForValue.build());
          onChanged();
        } else {
          configBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder addAllConfig(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.set_reptile_config> values) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, config_);
          onChanged();
        } else {
          configBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          configBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public Builder removeConfig(int index) {
        if (configBuilder_ == null) {
          ensureConfigIsMutable();
          config_.remove(index);
          onChanged();
        } else {
          configBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder getConfigBuilder(
          int index) {
        return getConfigFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder getConfigOrBuilder(
          int index) {
        if (configBuilder_ == null) {
          return config_.get(index);  } else {
          return configBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder> 
           getConfigOrBuilderList() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(config_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder addConfigBuilder() {
        return getConfigFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.set_reptile_config.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder addConfigBuilder(
          int index) {
        return getConfigFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.set_reptile_config.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.set_reptile_config config = 1;</code>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder> 
           getConfigBuilderList() {
        return getConfigFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.set_reptile_config, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder, AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder> 
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.set_reptile_config, AFP_reptile_control.AFPReptileControl.set_reptile_config.Builder, AFP_reptile_control.AFPReptileControl.set_reptile_configOrBuilder>(
                  config_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.set_reptile_config_ask)
    }

    static {
      defaultInstance = new set_reptile_config_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config_ask)
  }

  public interface set_reptile_config_ansOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.set_reptile_config_ans)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);

    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfo getError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfoOrBuilder getErrorOrBuilder();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.set_reptile_config_ans}
   */
  public static final class set_reptile_config_ans extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.set_reptile_config_ans)
      set_reptile_config_ansOrBuilder {
    // Use set_reptile_config_ans.newBuilder() to construct.
    private set_reptile_config_ans(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private set_reptile_config_ans(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final set_reptile_config_ans defaultInstance;
    public static set_reptile_config_ans getDefaultInstance() {
      return defaultInstance;
    }

    public set_reptile_config_ans getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private set_reptile_config_ans(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              common.Common.errorinfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(common.Common.errorinfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ans_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.class, AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.Builder.class);
    }

    public static com.google.protobuf.Parser<set_reptile_config_ans> PARSER =
        new com.google.protobuf.AbstractParser<set_reptile_config_ans>() {
      public set_reptile_config_ans parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new set_reptile_config_ans(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<set_reptile_config_ans> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *配置失败的爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private common.Common.errorinfo error_;
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfo getError() {
      return error_;
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
      return error_;
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
      error_ = common.Common.errorinfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, error_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, error_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.set_reptile_config_ans prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.set_reptile_config_ans}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.set_reptile_config_ans)
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ansOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ans_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.class, AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
          getErrorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ans getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ans build() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ans result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.set_reptile_config_ans buildPartial() {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ans result = new AFP_reptile_control.AFPReptileControl.set_reptile_config_ans(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.set_reptile_config_ans) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.set_reptile_config_ans)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.set_reptile_config_ans other) {
        if (other == AFP_reptile_control.AFPReptileControl.set_reptile_config_ans.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        if (other.hasError()) {
          mergeError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.set_reptile_config_ans parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.set_reptile_config_ans) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *配置失败的爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private common.Common.errorinfo error_ = common.Common.errorinfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> errorBuilder_;
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo getError() {
        if (errorBuilder_ == null) {
          return error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(
          common.Common.errorinfo.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder mergeError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              error_ != common.Common.errorinfo.getDefaultInstance()) {
            error_ =
              common.Common.errorinfo.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
          onChanged();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo.Builder getErrorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_;
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.set_reptile_config_ans)
    }

    static {
      defaultInstance = new set_reptile_config_ans(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.set_reptile_config_ans)
  }

  public interface reptile_operation_status_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_operation_status_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_operation_status_ask}
   *
   * <pre>
   *爬虫启动关闭设置
   * </pre>
   */
  public static final class reptile_operation_status_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_operation_status_ask)
      reptile_operation_status_askOrBuilder {
    // Use reptile_operation_status_ask.newBuilder() to construct.
    private reptile_operation_status_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_operation_status_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_operation_status_ask defaultInstance;
    public static reptile_operation_status_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_operation_status_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_operation_status_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.class, AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_operation_status_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_operation_status_ask>() {
      public reptile_operation_status_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_operation_status_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_operation_status_ask> getParserForType() {
      return PARSER;
    }

    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_operation_status_ask}
     *
     * <pre>
     *爬虫启动关闭设置
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_operation_status_ask)
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.class, AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask result = new AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask(this);
        int from_bitField0_ = bitField0_;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_operation_status_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_operation_status_ask)
    }

    static {
      defaultInstance = new reptile_operation_status_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_operation_status_ask)
  }

  public interface reptile_operation_status_ansOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_operation_status_ans)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);

    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfo getError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfoOrBuilder getErrorOrBuilder();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_operation_status_ans}
   */
  public static final class reptile_operation_status_ans extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_operation_status_ans)
      reptile_operation_status_ansOrBuilder {
    // Use reptile_operation_status_ans.newBuilder() to construct.
    private reptile_operation_status_ans(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_operation_status_ans(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_operation_status_ans defaultInstance;
    public static reptile_operation_status_ans getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_operation_status_ans getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_operation_status_ans(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              common.Common.errorinfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(common.Common.errorinfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ans_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.class, AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_operation_status_ans> PARSER =
        new com.google.protobuf.AbstractParser<reptile_operation_status_ans>() {
      public reptile_operation_status_ans parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_operation_status_ans(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_operation_status_ans> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *失败的爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private common.Common.errorinfo error_;
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfo getError() {
      return error_;
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
      return error_;
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
      error_ = common.Common.errorinfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, error_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, error_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_operation_status_ans}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_operation_status_ans)
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ansOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ans_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.class, AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
          getErrorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans build() {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans result = new AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        if (other.hasError()) {
          mergeError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_operation_status_ans) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *失败的爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private common.Common.errorinfo error_ = common.Common.errorinfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> errorBuilder_;
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo getError() {
        if (errorBuilder_ == null) {
          return error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(
          common.Common.errorinfo.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder mergeError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              error_ != common.Common.errorinfo.getDefaultInstance()) {
            error_ =
              common.Common.errorinfo.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
          onChanged();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo.Builder getErrorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_;
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_operation_status_ans)
    }

    static {
      defaultInstance = new reptile_operation_status_ans(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_operation_status_ans)
  }

  public interface reptile_abnormal_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_abnormal_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);

    /**
     * <code>optional bytes abnormal_info = 2;</code>
     *
     * <pre>
     *异常信息
     * </pre>
     */
    boolean hasAbnormalInfo();
    /**
     * <code>optional bytes abnormal_info = 2;</code>
     *
     * <pre>
     *异常信息
     * </pre>
     */
    com.google.protobuf.ByteString getAbnormalInfo();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_abnormal_ask}
   *
   * <pre>
   *爬虫异常
   * </pre>
   */
  public static final class reptile_abnormal_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_abnormal_ask)
      reptile_abnormal_askOrBuilder {
    // Use reptile_abnormal_ask.newBuilder() to construct.
    private reptile_abnormal_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_abnormal_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_abnormal_ask defaultInstance;
    public static reptile_abnormal_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_abnormal_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_abnormal_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              bitField0_ |= 0x00000001;
              abnormalInfo_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_abnormal_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.class, AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_abnormal_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_abnormal_ask>() {
      public reptile_abnormal_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_abnormal_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_abnormal_ask> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    public static final int ABNORMAL_INFO_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString abnormalInfo_;
    /**
     * <code>optional bytes abnormal_info = 2;</code>
     *
     * <pre>
     *异常信息
     * </pre>
     */
    public boolean hasAbnormalInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes abnormal_info = 2;</code>
     *
     * <pre>
     *异常信息
     * </pre>
     */
    public com.google.protobuf.ByteString getAbnormalInfo() {
      return abnormalInfo_;
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
      abnormalInfo_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(2, abnormalInfo_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, abnormalInfo_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_abnormal_ask}
     *
     * <pre>
     *爬虫异常
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_abnormal_ask)
        AFP_reptile_control.AFPReptileControl.reptile_abnormal_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_abnormal_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.class, AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        abnormalInfo_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask result = new AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.abnormalInfo_ = abnormalInfo_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        if (other.hasAbnormalInfo()) {
          setAbnormalInfo(other.getAbnormalInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_abnormal_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private com.google.protobuf.ByteString abnormalInfo_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes abnormal_info = 2;</code>
       *
       * <pre>
       *异常信息
       * </pre>
       */
      public boolean hasAbnormalInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes abnormal_info = 2;</code>
       *
       * <pre>
       *异常信息
       * </pre>
       */
      public com.google.protobuf.ByteString getAbnormalInfo() {
        return abnormalInfo_;
      }
      /**
       * <code>optional bytes abnormal_info = 2;</code>
       *
       * <pre>
       *异常信息
       * </pre>
       */
      public Builder setAbnormalInfo(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        abnormalInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes abnormal_info = 2;</code>
       *
       * <pre>
       *异常信息
       * </pre>
       */
      public Builder clearAbnormalInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        abnormalInfo_ = getDefaultInstance().getAbnormalInfo();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_abnormal_ask)
    }

    static {
      defaultInstance = new reptile_abnormal_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_abnormal_ask)
  }

  public interface reptile_history_record_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_history_record_ask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bytes reptile_name = 1;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    boolean hasReptileName();
    /**
     * <code>optional bytes reptile_name = 1;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    com.google.protobuf.ByteString getReptileName();

    /**
     * <code>optional bytes time = 2;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>optional bytes time = 2;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    com.google.protobuf.ByteString getTime();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_history_record_ask}
   *
   * <pre>
   *爬虫历史爬的记录
   * </pre>
   */
  public static final class reptile_history_record_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_history_record_ask)
      reptile_history_record_askOrBuilder {
    // Use reptile_history_record_ask.newBuilder() to construct.
    private reptile_history_record_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_history_record_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_history_record_ask defaultInstance;
    public static reptile_history_record_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_history_record_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_history_record_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              reptileName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              time_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.class, AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_history_record_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_history_record_ask>() {
      public reptile_history_record_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_history_record_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_history_record_ask> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int REPTILE_NAME_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString reptileName_;
    /**
     * <code>optional bytes reptile_name = 1;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public boolean hasReptileName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes reptile_name = 1;</code>
     *
     * <pre>
     *爬虫名字
     * </pre>
     */
    public com.google.protobuf.ByteString getReptileName() {
      return reptileName_;
    }

    public static final int TIME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString time_;
    /**
     * <code>optional bytes time = 2;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes time = 2;</code>
     *
     * <pre>
     *时间
     * </pre>
     */
    public com.google.protobuf.ByteString getTime() {
      return time_;
    }

    private void initFields() {
      reptileName_ = com.google.protobuf.ByteString.EMPTY;
      time_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, reptileName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, time_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, reptileName_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, time_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_history_record_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_history_record_ask}
     *
     * <pre>
     *爬虫历史爬的记录
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_history_record_ask)
        AFP_reptile_control.AFPReptileControl.reptile_history_record_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.class, AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        reptileName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ask result = new AFP_reptile_control.AFPReptileControl.reptile_history_record_ask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.reptileName_ = reptileName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.time_ = time_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_history_record_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_history_record_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_history_record_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_history_record_ask.getDefaultInstance()) return this;
        if (other.hasReptileName()) {
          setReptileName(other.getReptileName());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_history_record_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString reptileName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes reptile_name = 1;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public boolean hasReptileName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes reptile_name = 1;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public com.google.protobuf.ByteString getReptileName() {
        return reptileName_;
      }
      /**
       * <code>optional bytes reptile_name = 1;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder setReptileName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        reptileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes reptile_name = 1;</code>
       *
       * <pre>
       *爬虫名字
       * </pre>
       */
      public Builder clearReptileName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        reptileName_ = getDefaultInstance().getReptileName();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString time_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes time = 2;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes time = 2;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public com.google.protobuf.ByteString getTime() {
        return time_;
      }
      /**
       * <code>optional bytes time = 2;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder setTime(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes time = 2;</code>
       *
       * <pre>
       *时间
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = getDefaultInstance().getTime();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_history_record_ask)
    }

    static {
      defaultInstance = new reptile_history_record_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history_record_ask)
  }

  public interface reptile_history_record_ansOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_history_record_ans)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history> 
        getRecordList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_history getRecord(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    int getRecordCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder> 
        getRecordOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder getRecordOrBuilder(
        int index);

    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfo getError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfoOrBuilder getErrorOrBuilder();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_history_record_ans}
   */
  public static final class reptile_history_record_ans extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_history_record_ans)
      reptile_history_record_ansOrBuilder {
    // Use reptile_history_record_ans.newBuilder() to construct.
    private reptile_history_record_ans(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_history_record_ans(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_history_record_ans defaultInstance;
    public static reptile_history_record_ans getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_history_record_ans getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_history_record_ans(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                record_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_history>();
                mutable_bitField0_ |= 0x00000001;
              }
              record_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_history.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              common.Common.errorinfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(common.Common.errorinfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          record_ = java.util.Collections.unmodifiableList(record_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ans_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.class, AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_history_record_ans> PARSER =
        new com.google.protobuf.AbstractParser<reptile_history_record_ans>() {
      public reptile_history_record_ans parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_history_record_ans(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_history_record_ans> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RECORD_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history> record_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history> getRecordList() {
      return record_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder> 
        getRecordOrBuilderList() {
      return record_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    public int getRecordCount() {
      return record_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_history getRecord(int index) {
      return record_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
     *
     * <pre>
     *返回的历史记录
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder getRecordOrBuilder(
        int index) {
      return record_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private common.Common.errorinfo error_;
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfo getError() {
      return error_;
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
      return error_;
    }

    private void initFields() {
      record_ = java.util.Collections.emptyList();
      error_ = common.Common.errorinfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < record_.size(); i++) {
        output.writeMessage(1, record_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, error_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < record_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, record_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, error_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_history_record_ans prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_history_record_ans}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_history_record_ans)
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ansOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ans_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.class, AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRecordFieldBuilder();
          getErrorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          recordBuilder_.clear();
        }
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ans getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ans build() {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ans result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_history_record_ans buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ans result = new AFP_reptile_control.AFPReptileControl.reptile_history_record_ans(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (recordBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            record_ = java.util.Collections.unmodifiableList(record_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.record_ = record_;
        } else {
          result.record_ = recordBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_history_record_ans) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_history_record_ans)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_history_record_ans other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_history_record_ans.getDefaultInstance()) return this;
        if (recordBuilder_ == null) {
          if (!other.record_.isEmpty()) {
            if (record_.isEmpty()) {
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRecordIsMutable();
              record_.addAll(other.record_);
            }
            onChanged();
          }
        } else {
          if (!other.record_.isEmpty()) {
            if (recordBuilder_.isEmpty()) {
              recordBuilder_.dispose();
              recordBuilder_ = null;
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000001);
              recordBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRecordFieldBuilder() : null;
            } else {
              recordBuilder_.addAllMessages(other.record_);
            }
          }
        }
        if (other.hasError()) {
          mergeError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_history_record_ans parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_history_record_ans) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history> record_ =
        java.util.Collections.emptyList();
      private void ensureRecordIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          record_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_history>(record_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_history, AFP_reptile_control.AFPReptileControl.reptile_history.Builder, AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder> recordBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history> getRecordList() {
        if (recordBuilder_ == null) {
          return java.util.Collections.unmodifiableList(record_);
        } else {
          return recordBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public int getRecordCount() {
        if (recordBuilder_ == null) {
          return record_.size();
        } else {
          return recordBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_history getRecord(int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);
        } else {
          return recordBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder setRecord(
          int index, AFP_reptile_control.AFPReptileControl.reptile_history value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.set(index, value);
          onChanged();
        } else {
          recordBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder setRecord(
          int index, AFP_reptile_control.AFPReptileControl.reptile_history.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.set(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder addRecord(AFP_reptile_control.AFPReptileControl.reptile_history value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(value);
          onChanged();
        } else {
          recordBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder addRecord(
          int index, AFP_reptile_control.AFPReptileControl.reptile_history value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(index, value);
          onChanged();
        } else {
          recordBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder addRecord(
          AFP_reptile_control.AFPReptileControl.reptile_history.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder addRecord(
          int index, AFP_reptile_control.AFPReptileControl.reptile_history.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder addAllRecord(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_history> values) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, record_);
          onChanged();
        } else {
          recordBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder clearRecord() {
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          recordBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public Builder removeRecord(int index) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.remove(index);
          onChanged();
        } else {
          recordBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_history.Builder getRecordBuilder(
          int index) {
        return getRecordFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder getRecordOrBuilder(
          int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);  } else {
          return recordBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder> 
           getRecordOrBuilderList() {
        if (recordBuilder_ != null) {
          return recordBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(record_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_history.Builder addRecordBuilder() {
        return getRecordFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_history.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_history.Builder addRecordBuilder(
          int index) {
        return getRecordFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_history.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_history record = 1;</code>
       *
       * <pre>
       *返回的历史记录
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_history.Builder> 
           getRecordBuilderList() {
        return getRecordFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_history, AFP_reptile_control.AFPReptileControl.reptile_history.Builder, AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder> 
          getRecordFieldBuilder() {
        if (recordBuilder_ == null) {
          recordBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_history, AFP_reptile_control.AFPReptileControl.reptile_history.Builder, AFP_reptile_control.AFPReptileControl.reptile_historyOrBuilder>(
                  record_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          record_ = null;
        }
        return recordBuilder_;
      }

      private common.Common.errorinfo error_ = common.Common.errorinfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> errorBuilder_;
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo getError() {
        if (errorBuilder_ == null) {
          return error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(
          common.Common.errorinfo.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder mergeError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              error_ != common.Common.errorinfo.getDefaultInstance()) {
            error_ =
              common.Common.errorinfo.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
          onChanged();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo.Builder getErrorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_;
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_history_record_ans)
    }

    static {
      defaultInstance = new reptile_history_record_ans(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_history_record_ans)
  }

  public interface reptile_heartbeat_monitoring_askOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_heartbeat_monitoring_ask}
   *
   * <pre>
   *心跳监控
   * </pre>
   */
  public static final class reptile_heartbeat_monitoring_ask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
      reptile_heartbeat_monitoring_askOrBuilder {
    // Use reptile_heartbeat_monitoring_ask.newBuilder() to construct.
    private reptile_heartbeat_monitoring_ask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_heartbeat_monitoring_ask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_heartbeat_monitoring_ask defaultInstance;
    public static reptile_heartbeat_monitoring_ask getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_heartbeat_monitoring_ask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_heartbeat_monitoring_ask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.class, AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_heartbeat_monitoring_ask> PARSER =
        new com.google.protobuf.AbstractParser<reptile_heartbeat_monitoring_ask>() {
      public reptile_heartbeat_monitoring_ask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_heartbeat_monitoring_ask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_heartbeat_monitoring_ask> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_heartbeat_monitoring_ask}
     *
     * <pre>
     *心跳监控
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_askOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.class, AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask build() {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask result = new AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
    }

    static {
      defaultInstance = new reptile_heartbeat_monitoring_ask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ask)
  }

  public interface reptile_heartbeat_monitoring_ansOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> 
        getInfoList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index);
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    int getInfoCount();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList();
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index);

    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    boolean hasError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfo getError();
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    common.Common.errorinfoOrBuilder getErrorOrBuilder();
  }
  /**
   * Protobuf type {@code AFP_reptile_control.reptile_heartbeat_monitoring_ans}
   */
  public static final class reptile_heartbeat_monitoring_ans extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
      reptile_heartbeat_monitoring_ansOrBuilder {
    // Use reptile_heartbeat_monitoring_ans.newBuilder() to construct.
    private reptile_heartbeat_monitoring_ans(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private reptile_heartbeat_monitoring_ans(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final reptile_heartbeat_monitoring_ans defaultInstance;
    public static reptile_heartbeat_monitoring_ans getDefaultInstance() {
      return defaultInstance;
    }

    public reptile_heartbeat_monitoring_ans getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private reptile_heartbeat_monitoring_ans(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>();
                mutable_bitField0_ |= 0x00000001;
              }
              info_.add(input.readMessage(AFP_reptile_control.AFPReptileControl.reptile_basic_info.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              common.Common.errorinfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = error_.toBuilder();
              }
              error_ = input.readMessage(common.Common.errorinfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(error_);
                error_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = java.util.Collections.unmodifiableList(info_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.class, AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.Builder.class);
    }

    public static com.google.protobuf.Parser<reptile_heartbeat_monitoring_ans> PARSER =
        new com.google.protobuf.AbstractParser<reptile_heartbeat_monitoring_ans>() {
      public reptile_heartbeat_monitoring_ans parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new reptile_heartbeat_monitoring_ans(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<reptile_heartbeat_monitoring_ans> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_;
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
        getInfoOrBuilderList() {
      return info_;
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public int getInfoCount() {
      return info_.size();
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
      return info_.get(index);
    }
    /**
     * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
     *
     * <pre>
     *爬虫信息
     * </pre>
     */
    public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
        int index) {
      return info_.get(index);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private common.Common.errorinfo error_;
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfo getError() {
      return error_;
    }
    /**
     * <code>optional .common.errorinfo error = 2;</code>
     *
     * <pre>
     *错误代码
     * </pre>
     */
    public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
      return error_;
    }

    private void initFields() {
      info_ = java.util.Collections.emptyList();
      error_ = common.Common.errorinfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < info_.size(); i++) {
        output.writeMessage(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, error_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < info_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, error_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AFP_reptile_control.reptile_heartbeat_monitoring_ans}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ansOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.class, AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.Builder.class);
      }

      // Construct using AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
          getErrorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          infoBuilder_.clear();
        }
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AFP_reptile_control.AFPReptileControl.internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans getDefaultInstanceForType() {
        return AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.getDefaultInstance();
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans build() {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans buildPartial() {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans result = new AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            info_ = java.util.Collections.unmodifiableList(info_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        if (errorBuilder_ == null) {
          result.error_ = error_;
        } else {
          result.error_ = errorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans) {
          return mergeFrom((AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans other) {
        if (other == AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans.getDefaultInstance()) return this;
        if (infoBuilder_ == null) {
          if (!other.info_.isEmpty()) {
            if (info_.isEmpty()) {
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInfoIsMutable();
              info_.addAll(other.info_);
            }
            onChanged();
          }
        } else {
          if (!other.info_.isEmpty()) {
            if (infoBuilder_.isEmpty()) {
              infoBuilder_.dispose();
              infoBuilder_ = null;
              info_ = other.info_;
              bitField0_ = (bitField0_ & ~0x00000001);
              infoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInfoFieldBuilder() : null;
            } else {
              infoBuilder_.addAllMessages(other.info_);
            }
          }
        }
        if (other.hasError()) {
          mergeError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AFP_reptile_control.AFPReptileControl.reptile_heartbeat_monitoring_ans) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> info_ =
        java.util.Collections.emptyList();
      private void ensureInfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          info_ = new java.util.ArrayList<AFP_reptile_control.AFPReptileControl.reptile_basic_info>(info_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> infoBuilder_;

      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info> getInfoList() {
        if (infoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(info_);
        } else {
          return infoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public int getInfoCount() {
        if (infoBuilder_ == null) {
          return info_.size();
        } else {
          return infoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info getInfo(int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);
        } else {
          return infoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.set(index, value);
          onChanged();
        } else {
          infoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder setInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.set(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(value);
          onChanged();
        } else {
          infoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInfoIsMutable();
          info_.add(index, value);
          onChanged();
        } else {
          infoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addInfo(
          int index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder builderForValue) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.add(index, builderForValue.build());
          onChanged();
        } else {
          infoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder addAllInfo(
          java.lang.Iterable<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_info> values) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, info_);
          onChanged();
        } else {
          infoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public Builder removeInfo(int index) {
        if (infoBuilder_ == null) {
          ensureInfoIsMutable();
          info_.remove(index);
          onChanged();
        } else {
          infoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder getInfoBuilder(
          int index) {
        return getInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder getInfoOrBuilder(
          int index) {
        if (infoBuilder_ == null) {
          return info_.get(index);  } else {
          return infoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<? extends AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
           getInfoOrBuilderList() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(info_);
        }
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder() {
        return getInfoFieldBuilder().addBuilder(
            AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder addInfoBuilder(
          int index) {
        return getInfoFieldBuilder().addBuilder(
            index, AFP_reptile_control.AFPReptileControl.reptile_basic_info.getDefaultInstance());
      }
      /**
       * <code>repeated .AFP_reptile_control.reptile_basic_info info = 1;</code>
       *
       * <pre>
       *爬虫信息
       * </pre>
       */
      public java.util.List<AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder> 
           getInfoBuilderList() {
        return getInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              AFP_reptile_control.AFPReptileControl.reptile_basic_info, AFP_reptile_control.AFPReptileControl.reptile_basic_info.Builder, AFP_reptile_control.AFPReptileControl.reptile_basic_infoOrBuilder>(
                  info_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      private common.Common.errorinfo error_ = common.Common.errorinfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> errorBuilder_;
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo getError() {
        if (errorBuilder_ == null) {
          return error_;
        } else {
          return errorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          error_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder setError(
          common.Common.errorinfo.Builder builderForValue) {
        if (errorBuilder_ == null) {
          error_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder mergeError(common.Common.errorinfo value) {
        if (errorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              error_ != common.Common.errorinfo.getDefaultInstance()) {
            error_ =
              common.Common.errorinfo.newBuilder(error_).mergeFrom(value).buildPartial();
          } else {
            error_ = value;
          }
          onChanged();
        } else {
          errorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          error_ = common.Common.errorinfo.getDefaultInstance();
          onChanged();
        } else {
          errorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfo.Builder getErrorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      public common.Common.errorinfoOrBuilder getErrorOrBuilder() {
        if (errorBuilder_ != null) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          return error_;
        }
      }
      /**
       * <code>optional .common.errorinfo error = 2;</code>
       *
       * <pre>
       *错误代码
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              common.Common.errorinfo, common.Common.errorinfo.Builder, common.Common.errorinfoOrBuilder>(
                  getError(),
                  getParentForChildren(),
                  isClean());
          error_ = null;
        }
        return errorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
    }

    static {
      defaultInstance = new reptile_heartbeat_monitoring_ans(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AFP_reptile_control.reptile_heartbeat_monitoring_ans)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_basic_info_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_basic_info_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_config_info_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_config_info_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_schedule_info_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_schedule_info_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_set_reptile_config_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_set_reptile_config_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_history_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_history_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_info_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_info_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_info_ans_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_info_ans_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_schedule_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_set_reptile_config_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_set_reptile_config_ans_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_operation_status_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_operation_status_ans_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_abnormal_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_history_record_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_history_record_ans_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031AFP_reptile_control.proto\022\023AFP_reptile" +
      "_control\032\014common.proto\"\225\001\n\022reptile_basic" +
      "_info\022\022\n\nreptile_id\030\001 \001(\005\022\024\n\014reptile_nam" +
      "e\030\002 \001(\014\022\022\n\nCrawl_site\030\003 \001(\014\022\n\n\002ip\030\004 \001(\014\022" +
      "5\n\006status\030\005 \001(\0162%.AFP_reptile_control.op" +
      "eration_status\"\260\001\n\023reptile_config_info\022\022" +
      "\n\nreptile_id\030\001 \001(\005\022\024\n\014reptile_name\030\002 \001(\014" +
      "\022\027\n\017mongodb_address\030\003 \001(\014\022\024\n\014mongodb_por" +
      "t\030\004 \001(\005\022\024\n\014mongodb_name\030\005 \001(\014\022\020\n\010interva" +
      "l\030\006 \001(\005\022\030\n\020trigger_interval\030\007 \001(\005\"\227\001\n\rsc",
      "hedule_info\0225\n\004info\030\001 \001(\0132\'.AFP_reptile_" +
      "control.reptile_basic_info\022\023\n\013webpage_su" +
      "m\030\002 \001(\005\022\035\n\025invalid_webpage_count\030\003 \001(\005\022\033" +
      "\n\023valid_webpage_count\030\004 \001(\005\"\220\001\n\022set_rept" +
      "ile_config\022;\n\nbasic_info\030\001 \001(\0132\'.AFP_rep" +
      "tile_control.reptile_basic_info\022=\n\013confi" +
      "g_info\030\002 \001(\0132(.AFP_reptile_control.repti" +
      "le_config_info\"\224\001\n\017reptile_history\0225\n\004in" +
      "fo\030\001 \001(\0132\'.AFP_reptile_control.reptile_b" +
      "asic_info\022\020\n\010new_data\030\002 \001(\005\022\023\n\013update_da",
      "ta\030\003 \001(\005\022\025\n\rwebpage_count\030\004 \001(\005\022\014\n\004time\030" +
      "\005 \001(\014\"I\n\020reptile_info_ask\0225\n\004info\030\001 \003(\0132" +
      "\'.AFP_reptile_control.reptile_basic_info" +
      "\"l\n\020reptile_info_ans\022 \n\005error\030\001 \001(\0132\021.co" +
      "mmon.errorinfo\0226\n\004info\030\002 \003(\0132(.AFP_repti" +
      "le_control.reptile_config_info\"L\n\024reptil" +
      "e_schedule_ask\0224\n\010schedule\030\001 \003(\0132\".AFP_r" +
      "eptile_control.schedule_info\"Q\n\026set_rept" +
      "ile_config_ask\0227\n\006config\030\001 \003(\0132\'.AFP_rep" +
      "tile_control.set_reptile_config\"q\n\026set_r",
      "eptile_config_ans\0225\n\004info\030\001 \003(\0132\'.AFP_re" +
      "ptile_control.reptile_basic_info\022 \n\005erro" +
      "r\030\002 \001(\0132\021.common.errorinfo\"U\n\034reptile_op" +
      "eration_status_ask\0225\n\004info\030\001 \003(\0132\'.AFP_r" +
      "eptile_control.reptile_basic_info\"w\n\034rep" +
      "tile_operation_status_ans\0225\n\004info\030\001 \003(\0132" +
      "\'.AFP_reptile_control.reptile_basic_info" +
      "\022 \n\005error\030\002 \001(\0132\021.common.errorinfo\"d\n\024re" +
      "ptile_abnormal_ask\0225\n\004info\030\001 \003(\0132\'.AFP_r" +
      "eptile_control.reptile_basic_info\022\025\n\rabn",
      "ormal_info\030\002 \001(\014\"@\n\032reptile_history_reco" +
      "rd_ask\022\024\n\014reptile_name\030\001 \001(\014\022\014\n\004time\030\002 \001" +
      "(\014\"t\n\032reptile_history_record_ans\0224\n\006reco" +
      "rd\030\001 \003(\0132$.AFP_reptile_control.reptile_h" +
      "istory\022 \n\005error\030\002 \001(\0132\021.common.errorinfo" +
      "\"\"\n reptile_heartbeat_monitoring_ask\"{\n " +
      "reptile_heartbeat_monitoring_ans\0225\n\004info" +
      "\030\001 \003(\0132\'.AFP_reptile_control.reptile_bas" +
      "ic_info\022 \n\005error\030\002 \001(\0132\021.common.errorinf" +
      "o*.\n\020operation_status\022\014\n\010starting\020\000\022\014\n\010c",
      "loseing\020\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          common.Common.getDescriptor(),
        }, assigner);
    internal_static_AFP_reptile_control_reptile_basic_info_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_AFP_reptile_control_reptile_basic_info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_basic_info_descriptor,
        new java.lang.String[] { "ReptileId", "ReptileName", "CrawlSite", "Ip", "Status", });
    internal_static_AFP_reptile_control_reptile_config_info_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_AFP_reptile_control_reptile_config_info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_config_info_descriptor,
        new java.lang.String[] { "ReptileId", "ReptileName", "MongodbAddress", "MongodbPort", "MongodbName", "Interval", "TriggerInterval", });
    internal_static_AFP_reptile_control_schedule_info_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_AFP_reptile_control_schedule_info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_schedule_info_descriptor,
        new java.lang.String[] { "Info", "WebpageSum", "InvalidWebpageCount", "ValidWebpageCount", });
    internal_static_AFP_reptile_control_set_reptile_config_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_AFP_reptile_control_set_reptile_config_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_set_reptile_config_descriptor,
        new java.lang.String[] { "BasicInfo", "ConfigInfo", });
    internal_static_AFP_reptile_control_reptile_history_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_AFP_reptile_control_reptile_history_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_history_descriptor,
        new java.lang.String[] { "Info", "NewData", "UpdateData", "WebpageCount", "Time", });
    internal_static_AFP_reptile_control_reptile_info_ask_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_AFP_reptile_control_reptile_info_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_info_ask_descriptor,
        new java.lang.String[] { "Info", });
    internal_static_AFP_reptile_control_reptile_info_ans_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_AFP_reptile_control_reptile_info_ans_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_info_ans_descriptor,
        new java.lang.String[] { "Error", "Info", });
    internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_AFP_reptile_control_reptile_schedule_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_schedule_ask_descriptor,
        new java.lang.String[] { "Schedule", });
    internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_AFP_reptile_control_set_reptile_config_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_set_reptile_config_ask_descriptor,
        new java.lang.String[] { "Config", });
    internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_AFP_reptile_control_set_reptile_config_ans_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_set_reptile_config_ans_descriptor,
        new java.lang.String[] { "Info", "Error", });
    internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_AFP_reptile_control_reptile_operation_status_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_operation_status_ask_descriptor,
        new java.lang.String[] { "Info", });
    internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_AFP_reptile_control_reptile_operation_status_ans_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_operation_status_ans_descriptor,
        new java.lang.String[] { "Info", "Error", });
    internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_AFP_reptile_control_reptile_abnormal_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_abnormal_ask_descriptor,
        new java.lang.String[] { "Info", "AbnormalInfo", });
    internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_AFP_reptile_control_reptile_history_record_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_history_record_ask_descriptor,
        new java.lang.String[] { "ReptileName", "Time", });
    internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_AFP_reptile_control_reptile_history_record_ans_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_history_record_ans_descriptor,
        new java.lang.String[] { "Record", "Error", });
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ask_descriptor,
        new java.lang.String[] { });
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AFP_reptile_control_reptile_heartbeat_monitoring_ans_descriptor,
        new java.lang.String[] { "Info", "Error", });
    common.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
