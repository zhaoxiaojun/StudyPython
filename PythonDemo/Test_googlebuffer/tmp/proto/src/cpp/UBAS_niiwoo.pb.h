// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UBAS_niiwoo.proto

#ifndef PROTOBUF_UBAS_5fniiwoo_2eproto__INCLUDED
#define PROTOBUF_UBAS_5fniiwoo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace UBAS_niiwoo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

class user_info;
class niiwoo_UBAS_ask;
class niiwoo_student_UBAS_ans;
class niiwoo_tuandai_UBAS_ans;
class niiwoo_no_tuandai_UBAS_ans;
class user_info_ask;
class friend_data;
class user_info_ans;
class address_information;
class user_address_phone_list_ans;
class user_overdue_status_ans;
class loan_or_assure_info;
class borrow_info;
class loan_assure_info_list_ans;
class niiwoo_UBAS_borrow_info_item;
class niiwoo_UBAS_borrow_detail_ask;
class niiwoo_UBAS_borrow_detail_ans;
class user_address_t;
class user_contact_t;
class niiwoo_UBAS_info_ask;
class niiwoo_UBAS_info_ans;
class niiwoo_UBAS_coincide_ask;
class niiwoo_UBAS_coincide_ans;

enum en_sex {
  en_sex_unknown = 0,
  en_sex_man = 1,
  en_sex_woman = 2
};
bool en_sex_IsValid(int value);
const en_sex en_sex_MIN = en_sex_unknown;
const en_sex en_sex_MAX = en_sex_woman;
const int en_sex_ARRAYSIZE = en_sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_sex_descriptor();
inline const ::std::string& en_sex_Name(en_sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_sex_descriptor(), value);
}
inline bool en_sex_Parse(
    const ::std::string& name, en_sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_sex>(
    en_sex_descriptor(), name, value);
}
enum en_marry {
  en_marry_no = 0,
  en_marry_ok = 1,
  en_marry_bye = 2,
  en_death_spouse = 3
};
bool en_marry_IsValid(int value);
const en_marry en_marry_MIN = en_marry_no;
const en_marry en_marry_MAX = en_death_spouse;
const int en_marry_ARRAYSIZE = en_marry_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_marry_descriptor();
inline const ::std::string& en_marry_Name(en_marry value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_marry_descriptor(), value);
}
inline bool en_marry_Parse(
    const ::std::string& name, en_marry* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_marry>(
    en_marry_descriptor(), name, value);
}
enum en_home {
  en_home_other = 0,
  en_home_my = 1,
  en_home_rent = 2,
  em_home_parents = 3,
  en_home_public = 4
};
bool en_home_IsValid(int value);
const en_home en_home_MIN = en_home_other;
const en_home en_home_MAX = en_home_public;
const int en_home_ARRAYSIZE = en_home_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_home_descriptor();
inline const ::std::string& en_home_Name(en_home value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_home_descriptor(), value);
}
inline bool en_home_Parse(
    const ::std::string& name, en_home* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_home>(
    en_home_descriptor(), name, value);
}
enum en_user {
  en_user_student = 0,
  en_user_tuandai = 1,
  en_user_no_tuandai = 2
};
bool en_user_IsValid(int value);
const en_user en_user_MIN = en_user_student;
const en_user en_user_MAX = en_user_no_tuandai;
const int en_user_ARRAYSIZE = en_user_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_user_descriptor();
inline const ::std::string& en_user_Name(en_user value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_user_descriptor(), value);
}
inline bool en_user_Parse(
    const ::std::string& name, en_user* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_user>(
    en_user_descriptor(), name, value);
}
enum niiwoo_ask_type {
  friend_credit = 1,
  address_phone_list = 2,
  overdue_status = 3,
  loan_assure_info_list = 4,
  person_position_track = 5
};
bool niiwoo_ask_type_IsValid(int value);
const niiwoo_ask_type niiwoo_ask_type_MIN = friend_credit;
const niiwoo_ask_type niiwoo_ask_type_MAX = person_position_track;
const int niiwoo_ask_type_ARRAYSIZE = niiwoo_ask_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* niiwoo_ask_type_descriptor();
inline const ::std::string& niiwoo_ask_type_Name(niiwoo_ask_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    niiwoo_ask_type_descriptor(), value);
}
inline bool niiwoo_ask_type_Parse(
    const ::std::string& name, niiwoo_ask_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<niiwoo_ask_type>(
    niiwoo_ask_type_descriptor(), name, value);
}
enum en_apply_status {
  en_applying = 0,
  en_applying_investigation = 1,
  en_investigating = 2,
  en_guaranteeing = 3,
  en_toubiaoing = 4,
  en_bid_success = 5,
  en_repayment_success = 6,
  en_investigation_fail = 31,
  en_guarantee_not_full = 32,
  en_not_full = 33,
  en_mannual_discard_bid = 34,
  en_yellow_warning = 41,
  en_red_warning = 42,
  en_overdue = 43,
  en_bad_bill = 44,
  en_bad_complete = 45
};
bool en_apply_status_IsValid(int value);
const en_apply_status en_apply_status_MIN = en_applying;
const en_apply_status en_apply_status_MAX = en_bad_complete;
const int en_apply_status_ARRAYSIZE = en_apply_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_apply_status_descriptor();
inline const ::std::string& en_apply_status_Name(en_apply_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_apply_status_descriptor(), value);
}
inline bool en_apply_status_Parse(
    const ::std::string& name, en_apply_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_apply_status>(
    en_apply_status_descriptor(), name, value);
}
enum en_address_type {
  en_address_type_work = 1,
  en_address_type_home = 2
};
bool en_address_type_IsValid(int value);
const en_address_type en_address_type_MIN = en_address_type_work;
const en_address_type en_address_type_MAX = en_address_type_home;
const int en_address_type_ARRAYSIZE = en_address_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* en_address_type_descriptor();
inline const ::std::string& en_address_type_Name(en_address_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    en_address_type_descriptor(), value);
}
inline bool en_address_type_Parse(
    const ::std::string& name, en_address_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<en_address_type>(
    en_address_type_descriptor(), name, value);
}
// ===================================================================

class user_info : public ::google::protobuf::Message {
 public:
  user_info();
  virtual ~user_info();

  user_info(const user_info& from);

  inline user_info& operator=(const user_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info& default_instance();

  void Swap(user_info* other);

  // implements Message ----------------------------------------------

  user_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info& from);
  void MergeFrom(const user_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes user_nickname = 2;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 2;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const void* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional bytes college_name = 3;
  inline bool has_college_name() const;
  inline void clear_college_name();
  static const int kCollegeNameFieldNumber = 3;
  inline const ::std::string& college_name() const;
  inline void set_college_name(const ::std::string& value);
  inline void set_college_name(const char* value);
  inline void set_college_name(const void* value, size_t size);
  inline ::std::string* mutable_college_name();
  inline ::std::string* release_college_name();
  inline void set_allocated_college_name(::std::string* college_name);

  // optional .common.degree eduction_degree = 4;
  inline bool has_eduction_degree() const;
  inline void clear_eduction_degree();
  static const int kEductionDegreeFieldNumber = 4;
  inline ::common::degree eduction_degree() const;
  inline void set_eduction_degree(::common::degree value);

  // optional .UBAS_niiwoo.en_sex sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::UBAS_niiwoo::en_sex sex() const;
  inline void set_sex(::UBAS_niiwoo::en_sex value);

  // optional int32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional .UBAS_niiwoo.en_marry marry = 7;
  inline bool has_marry() const;
  inline void clear_marry();
  static const int kMarryFieldNumber = 7;
  inline ::UBAS_niiwoo::en_marry marry() const;
  inline void set_marry(::UBAS_niiwoo::en_marry value);

  // optional bytes card_address = 8;
  inline bool has_card_address() const;
  inline void clear_card_address();
  static const int kCardAddressFieldNumber = 8;
  inline const ::std::string& card_address() const;
  inline void set_card_address(const ::std::string& value);
  inline void set_card_address(const char* value);
  inline void set_card_address(const void* value, size_t size);
  inline ::std::string* mutable_card_address();
  inline ::std::string* release_card_address();
  inline void set_allocated_card_address(::std::string* card_address);

  // optional bytes home_sheng = 9;
  inline bool has_home_sheng() const;
  inline void clear_home_sheng();
  static const int kHomeShengFieldNumber = 9;
  inline const ::std::string& home_sheng() const;
  inline void set_home_sheng(const ::std::string& value);
  inline void set_home_sheng(const char* value);
  inline void set_home_sheng(const void* value, size_t size);
  inline ::std::string* mutable_home_sheng();
  inline ::std::string* release_home_sheng();
  inline void set_allocated_home_sheng(::std::string* home_sheng);

  // optional bytes home_city = 10;
  inline bool has_home_city() const;
  inline void clear_home_city();
  static const int kHomeCityFieldNumber = 10;
  inline const ::std::string& home_city() const;
  inline void set_home_city(const ::std::string& value);
  inline void set_home_city(const char* value);
  inline void set_home_city(const void* value, size_t size);
  inline ::std::string* mutable_home_city();
  inline ::std::string* release_home_city();
  inline void set_allocated_home_city(::std::string* home_city);

  // optional int32 money_for_year = 11;
  inline bool has_money_for_year() const;
  inline void clear_money_for_year();
  static const int kMoneyForYearFieldNumber = 11;
  inline ::google::protobuf::int32 money_for_year() const;
  inline void set_money_for_year(::google::protobuf::int32 value);

  // optional int32 mobile_number_sum = 12;
  inline bool has_mobile_number_sum() const;
  inline void clear_mobile_number_sum();
  static const int kMobileNumberSumFieldNumber = 12;
  inline ::google::protobuf::int32 mobile_number_sum() const;
  inline void set_mobile_number_sum(::google::protobuf::int32 value);

  // optional .UBAS_niiwoo.en_home home_type = 13;
  inline bool has_home_type() const;
  inline void clear_home_type();
  static const int kHomeTypeFieldNumber = 13;
  inline ::UBAS_niiwoo::en_home home_type() const;
  inline void set_home_type(::UBAS_niiwoo::en_home value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_info)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_college_name();
  inline void clear_has_college_name();
  inline void set_has_eduction_degree();
  inline void clear_has_eduction_degree();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_marry();
  inline void clear_has_marry();
  inline void set_has_card_address();
  inline void clear_has_card_address();
  inline void set_has_home_sheng();
  inline void clear_has_home_sheng();
  inline void set_has_home_city();
  inline void clear_has_home_city();
  inline void set_has_money_for_year();
  inline void clear_has_money_for_year();
  inline void set_has_mobile_number_sum();
  inline void clear_has_mobile_number_sum();
  inline void set_has_home_type();
  inline void clear_has_home_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* user_nickname_;
  ::std::string* college_name_;
  int eduction_degree_;
  int sex_;
  ::google::protobuf::int32 age_;
  int marry_;
  ::std::string* card_address_;
  ::std::string* home_sheng_;
  ::std::string* home_city_;
  ::google::protobuf::int32 money_for_year_;
  ::google::protobuf::int32 mobile_number_sum_;
  int home_type_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_info* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_ask : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_ask();
  virtual ~niiwoo_UBAS_ask();

  niiwoo_UBAS_ask(const niiwoo_UBAS_ask& from);

  inline niiwoo_UBAS_ask& operator=(const niiwoo_UBAS_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_ask& default_instance();

  void Swap(niiwoo_UBAS_ask* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_ask& from);
  void MergeFrom(const niiwoo_UBAS_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_niiwoo.en_user user_type = 1;
  inline bool has_user_type() const;
  inline void clear_user_type();
  static const int kUserTypeFieldNumber = 1;
  inline ::UBAS_niiwoo::en_user user_type() const;
  inline void set_user_type(::UBAS_niiwoo::en_user value);

  // optional bytes identity_card = 2;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 2;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes real_name = 3;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 3;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 4;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 4;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional .common.common_ask_header ask_header = 5;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 5;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_ask)
 private:
  inline void set_has_user_type();
  inline void clear_has_user_type();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_ask_header();
  inline void clear_has_ask_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identity_card_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::common::common_ask_header* ask_header_;
  int user_type_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_ask* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_student_UBAS_ans : public ::google::protobuf::Message {
 public:
  niiwoo_student_UBAS_ans();
  virtual ~niiwoo_student_UBAS_ans();

  niiwoo_student_UBAS_ans(const niiwoo_student_UBAS_ans& from);

  inline niiwoo_student_UBAS_ans& operator=(const niiwoo_student_UBAS_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_student_UBAS_ans& default_instance();

  void Swap(niiwoo_student_UBAS_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_student_UBAS_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_student_UBAS_ans& from);
  void MergeFrom(const niiwoo_student_UBAS_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes user_nickname = 2;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 2;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const void* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional .UBAS_niiwoo.en_sex sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::UBAS_niiwoo::en_sex sex() const;
  inline void set_sex(::UBAS_niiwoo::en_sex value);

  // optional bytes college_name = 4;
  inline bool has_college_name() const;
  inline void clear_college_name();
  static const int kCollegeNameFieldNumber = 4;
  inline const ::std::string& college_name() const;
  inline void set_college_name(const ::std::string& value);
  inline void set_college_name(const char* value);
  inline void set_college_name(const void* value, size_t size);
  inline ::std::string* mutable_college_name();
  inline ::std::string* release_college_name();
  inline void set_allocated_college_name(::std::string* college_name);

  // optional .common.degree eduction_degree = 5;
  inline bool has_eduction_degree() const;
  inline void clear_eduction_degree();
  static const int kEductionDegreeFieldNumber = 5;
  inline ::common::degree eduction_degree() const;
  inline void set_eduction_degree(::common::degree value);

  // optional bytes school_end_date = 6;
  inline bool has_school_end_date() const;
  inline void clear_school_end_date();
  static const int kSchoolEndDateFieldNumber = 6;
  inline const ::std::string& school_end_date() const;
  inline void set_school_end_date(const ::std::string& value);
  inline void set_school_end_date(const char* value);
  inline void set_school_end_date(const void* value, size_t size);
  inline ::std::string* mutable_school_end_date();
  inline ::std::string* release_school_end_date();
  inline void set_allocated_school_end_date(::std::string* school_end_date);

  // optional bytes school_sheng = 7;
  inline bool has_school_sheng() const;
  inline void clear_school_sheng();
  static const int kSchoolShengFieldNumber = 7;
  inline const ::std::string& school_sheng() const;
  inline void set_school_sheng(const ::std::string& value);
  inline void set_school_sheng(const char* value);
  inline void set_school_sheng(const void* value, size_t size);
  inline ::std::string* mutable_school_sheng();
  inline ::std::string* release_school_sheng();
  inline void set_allocated_school_sheng(::std::string* school_sheng);

  // optional bytes school_city = 8;
  inline bool has_school_city() const;
  inline void clear_school_city();
  static const int kSchoolCityFieldNumber = 8;
  inline const ::std::string& school_city() const;
  inline void set_school_city(const ::std::string& value);
  inline void set_school_city(const char* value);
  inline void set_school_city(const void* value, size_t size);
  inline ::std::string* mutable_school_city();
  inline ::std::string* release_school_city();
  inline void set_allocated_school_city(::std::string* school_city);

  // optional bytes card_address = 9;
  inline bool has_card_address() const;
  inline void clear_card_address();
  static const int kCardAddressFieldNumber = 9;
  inline const ::std::string& card_address() const;
  inline void set_card_address(const ::std::string& value);
  inline void set_card_address(const char* value);
  inline void set_card_address(const void* value, size_t size);
  inline ::std::string* mutable_card_address();
  inline ::std::string* release_card_address();
  inline void set_allocated_card_address(::std::string* card_address);

  // optional int32 mobile_number_sum = 10;
  inline bool has_mobile_number_sum() const;
  inline void clear_mobile_number_sum();
  static const int kMobileNumberSumFieldNumber = 10;
  inline ::google::protobuf::int32 mobile_number_sum() const;
  inline void set_mobile_number_sum(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 11;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 11;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_student_UBAS_ans)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_college_name();
  inline void clear_has_college_name();
  inline void set_has_eduction_degree();
  inline void clear_has_eduction_degree();
  inline void set_has_school_end_date();
  inline void clear_has_school_end_date();
  inline void set_has_school_sheng();
  inline void clear_has_school_sheng();
  inline void set_has_school_city();
  inline void clear_has_school_city();
  inline void set_has_card_address();
  inline void clear_has_card_address();
  inline void set_has_mobile_number_sum();
  inline void clear_has_mobile_number_sum();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_id_;
  ::std::string* user_nickname_;
  ::std::string* college_name_;
  int sex_;
  int eduction_degree_;
  ::std::string* school_end_date_;
  ::std::string* school_sheng_;
  ::std::string* school_city_;
  ::std::string* card_address_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 mobile_number_sum_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_student_UBAS_ans* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_tuandai_UBAS_ans : public ::google::protobuf::Message {
 public:
  niiwoo_tuandai_UBAS_ans();
  virtual ~niiwoo_tuandai_UBAS_ans();

  niiwoo_tuandai_UBAS_ans(const niiwoo_tuandai_UBAS_ans& from);

  inline niiwoo_tuandai_UBAS_ans& operator=(const niiwoo_tuandai_UBAS_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_tuandai_UBAS_ans& default_instance();

  void Swap(niiwoo_tuandai_UBAS_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_tuandai_UBAS_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_tuandai_UBAS_ans& from);
  void MergeFrom(const niiwoo_tuandai_UBAS_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_niiwoo.user_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UBAS_niiwoo::user_info& info() const;
  inline ::UBAS_niiwoo::user_info* mutable_info();
  inline ::UBAS_niiwoo::user_info* release_info();
  inline void set_allocated_info(::UBAS_niiwoo::user_info* info);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::UBAS_niiwoo::user_info* info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_tuandai_UBAS_ans* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_no_tuandai_UBAS_ans : public ::google::protobuf::Message {
 public:
  niiwoo_no_tuandai_UBAS_ans();
  virtual ~niiwoo_no_tuandai_UBAS_ans();

  niiwoo_no_tuandai_UBAS_ans(const niiwoo_no_tuandai_UBAS_ans& from);

  inline niiwoo_no_tuandai_UBAS_ans& operator=(const niiwoo_no_tuandai_UBAS_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_no_tuandai_UBAS_ans& default_instance();

  void Swap(niiwoo_no_tuandai_UBAS_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_no_tuandai_UBAS_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_no_tuandai_UBAS_ans& from);
  void MergeFrom(const niiwoo_no_tuandai_UBAS_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_niiwoo.user_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::UBAS_niiwoo::user_info& info() const;
  inline ::UBAS_niiwoo::user_info* mutable_info();
  inline ::UBAS_niiwoo::user_info* release_info();
  inline void set_allocated_info(::UBAS_niiwoo::user_info* info);

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::UBAS_niiwoo::user_info* info_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_no_tuandai_UBAS_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_info_ask : public ::google::protobuf::Message {
 public:
  user_info_ask();
  virtual ~user_info_ask();

  user_info_ask(const user_info_ask& from);

  inline user_info_ask& operator=(const user_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_ask& default_instance();

  void Swap(user_info_ask* other);

  // implements Message ----------------------------------------------

  user_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info_ask& from);
  void MergeFrom(const user_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
  inline bool has_query_type() const;
  inline void clear_query_type();
  static const int kQueryTypeFieldNumber = 2;
  inline ::UBAS_niiwoo::niiwoo_ask_type query_type() const;
  inline void set_query_type(::UBAS_niiwoo::niiwoo_ask_type value);

  // optional bytes identity_card = 3;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 3;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes real_name = 4;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 4;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 5;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 5;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_query_type();
  inline void clear_has_query_type();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* identity_card_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  int query_type_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class friend_data : public ::google::protobuf::Message {
 public:
  friend_data();
  virtual ~friend_data();

  friend_data(const friend_data& from);

  inline friend_data& operator=(const friend_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_data& default_instance();

  void Swap(friend_data* other);

  // implements Message ----------------------------------------------

  friend_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_data& from);
  void MergeFrom(const friend_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes friend_card = 1;
  inline bool has_friend_card() const;
  inline void clear_friend_card();
  static const int kFriendCardFieldNumber = 1;
  inline const ::std::string& friend_card() const;
  inline void set_friend_card(const ::std::string& value);
  inline void set_friend_card(const char* value);
  inline void set_friend_card(const void* value, size_t size);
  inline ::std::string* mutable_friend_card();
  inline ::std::string* release_friend_card();
  inline void set_allocated_friend_card(::std::string* friend_card);

  // optional bool is_prove = 2;
  inline bool has_is_prove() const;
  inline void clear_is_prove();
  static const int kIsProveFieldNumber = 2;
  inline bool is_prove() const;
  inline void set_is_prove(bool value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.friend_data)
 private:
  inline void set_has_friend_card();
  inline void clear_has_friend_card();
  inline void set_has_is_prove();
  inline void clear_has_is_prove();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* friend_card_;
  bool is_prove_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static friend_data* default_instance_;
};
// -------------------------------------------------------------------

class user_info_ans : public ::google::protobuf::Message {
 public:
  user_info_ans();
  virtual ~user_info_ans();

  user_info_ans(const user_info_ans& from);

  inline user_info_ans& operator=(const user_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_ans& default_instance();

  void Swap(user_info_ans* other);

  // implements Message ----------------------------------------------

  user_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_info_ans& from);
  void MergeFrom(const user_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes identity_card = 1;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 1;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes real_name = 2;
  inline bool has_real_name() const;
  inline void clear_real_name();
  static const int kRealNameFieldNumber = 2;
  inline const ::std::string& real_name() const;
  inline void set_real_name(const ::std::string& value);
  inline void set_real_name(const char* value);
  inline void set_real_name(const void* value, size_t size);
  inline ::std::string* mutable_real_name();
  inline ::std::string* release_real_name();
  inline void set_allocated_real_name(::std::string* real_name);

  // optional bytes mobile_phone = 3;
  inline bool has_mobile_phone() const;
  inline void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 3;
  inline const ::std::string& mobile_phone() const;
  inline void set_mobile_phone(const ::std::string& value);
  inline void set_mobile_phone(const char* value);
  inline void set_mobile_phone(const void* value, size_t size);
  inline ::std::string* mutable_mobile_phone();
  inline ::std::string* release_mobile_phone();
  inline void set_allocated_mobile_phone(::std::string* mobile_phone);

  // optional bytes user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const void* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional bytes user_nickname = 5;
  inline bool has_user_nickname() const;
  inline void clear_user_nickname();
  static const int kUserNicknameFieldNumber = 5;
  inline const ::std::string& user_nickname() const;
  inline void set_user_nickname(const ::std::string& value);
  inline void set_user_nickname(const char* value);
  inline void set_user_nickname(const void* value, size_t size);
  inline ::std::string* mutable_user_nickname();
  inline ::std::string* release_user_nickname();
  inline void set_allocated_user_nickname(::std::string* user_nickname);

  // optional bytes college_name = 6;
  inline bool has_college_name() const;
  inline void clear_college_name();
  static const int kCollegeNameFieldNumber = 6;
  inline const ::std::string& college_name() const;
  inline void set_college_name(const ::std::string& value);
  inline void set_college_name(const char* value);
  inline void set_college_name(const void* value, size_t size);
  inline ::std::string* mutable_college_name();
  inline ::std::string* release_college_name();
  inline void set_allocated_college_name(::std::string* college_name);

  // optional .common.degree eduction_degree = 7;
  inline bool has_eduction_degree() const;
  inline void clear_eduction_degree();
  static const int kEductionDegreeFieldNumber = 7;
  inline ::common::degree eduction_degree() const;
  inline void set_eduction_degree(::common::degree value);

  // optional bool is_prove = 8;
  inline bool has_is_prove() const;
  inline void clear_is_prove();
  static const int kIsProveFieldNumber = 8;
  inline bool is_prove() const;
  inline void set_is_prove(bool value);

  // repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
  inline int friend_data_list_size() const;
  inline void clear_friend_data_list();
  static const int kFriendDataListFieldNumber = 9;
  inline const ::UBAS_niiwoo::friend_data& friend_data_list(int index) const;
  inline ::UBAS_niiwoo::friend_data* mutable_friend_data_list(int index);
  inline ::UBAS_niiwoo::friend_data* add_friend_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::friend_data >&
      friend_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::friend_data >*
      mutable_friend_data_list();

  // optional .common.errorinfo error = 10;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 10;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_info_ans)
 private:
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_real_name();
  inline void clear_has_real_name();
  inline void set_has_mobile_phone();
  inline void clear_has_mobile_phone();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_nickname();
  inline void clear_has_user_nickname();
  inline void set_has_college_name();
  inline void clear_has_college_name();
  inline void set_has_eduction_degree();
  inline void clear_has_eduction_degree();
  inline void set_has_is_prove();
  inline void clear_has_is_prove();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identity_card_;
  ::std::string* real_name_;
  ::std::string* mobile_phone_;
  ::std::string* user_id_;
  ::std::string* user_nickname_;
  ::std::string* college_name_;
  int eduction_degree_;
  bool is_prove_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::friend_data > friend_data_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class address_information : public ::google::protobuf::Message {
 public:
  address_information();
  virtual ~address_information();

  address_information(const address_information& from);

  inline address_information& operator=(const address_information& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const address_information& default_instance();

  void Swap(address_information* other);

  // implements Message ----------------------------------------------

  address_information* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const address_information& from);
  void MergeFrom(const address_information& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes mobile = 2;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 2;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const void* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.address_information)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* mobile_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static address_information* default_instance_;
};
// -------------------------------------------------------------------

class user_address_phone_list_ans : public ::google::protobuf::Message {
 public:
  user_address_phone_list_ans();
  virtual ~user_address_phone_list_ans();

  user_address_phone_list_ans(const user_address_phone_list_ans& from);

  inline user_address_phone_list_ans& operator=(const user_address_phone_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_address_phone_list_ans& default_instance();

  void Swap(user_address_phone_list_ans* other);

  // implements Message ----------------------------------------------

  user_address_phone_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_address_phone_list_ans& from);
  void MergeFrom(const user_address_phone_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_niiwoo.address_information address_list = 1;
  inline int address_list_size() const;
  inline void clear_address_list();
  static const int kAddressListFieldNumber = 1;
  inline const ::UBAS_niiwoo::address_information& address_list(int index) const;
  inline ::UBAS_niiwoo::address_information* mutable_address_list(int index);
  inline ::UBAS_niiwoo::address_information* add_address_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::address_information >&
      address_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::address_information >*
      mutable_address_list();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_address_phone_list_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::address_information > address_list_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_address_phone_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_overdue_status_ans : public ::google::protobuf::Message {
 public:
  user_overdue_status_ans();
  virtual ~user_overdue_status_ans();

  user_overdue_status_ans(const user_overdue_status_ans& from);

  inline user_overdue_status_ans& operator=(const user_overdue_status_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_overdue_status_ans& default_instance();

  void Swap(user_overdue_status_ans* other);

  // implements Message ----------------------------------------------

  user_overdue_status_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_overdue_status_ans& from);
  void MergeFrom(const user_overdue_status_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_loan_overdue = 1;
  inline bool has_is_loan_overdue() const;
  inline void clear_is_loan_overdue();
  static const int kIsLoanOverdueFieldNumber = 1;
  inline bool is_loan_overdue() const;
  inline void set_is_loan_overdue(bool value);

  // optional bool is_assure_overdue = 2;
  inline bool has_is_assure_overdue() const;
  inline void clear_is_assure_overdue();
  static const int kIsAssureOverdueFieldNumber = 2;
  inline bool is_assure_overdue() const;
  inline void set_is_assure_overdue(bool value);

  // optional int32 income = 3;
  inline bool has_income() const;
  inline void clear_income();
  static const int kIncomeFieldNumber = 3;
  inline ::google::protobuf::int32 income() const;
  inline void set_income(::google::protobuf::int32 value);

  // optional .common.errorinfo error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_overdue_status_ans)
 private:
  inline void set_has_is_loan_overdue();
  inline void clear_has_is_loan_overdue();
  inline void set_has_is_assure_overdue();
  inline void clear_has_is_assure_overdue();
  inline void set_has_income();
  inline void clear_has_income();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_loan_overdue_;
  bool is_assure_overdue_;
  ::google::protobuf::int32 income_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_overdue_status_ans* default_instance_;
};
// -------------------------------------------------------------------

class loan_or_assure_info : public ::google::protobuf::Message {
 public:
  loan_or_assure_info();
  virtual ~loan_or_assure_info();

  loan_or_assure_info(const loan_or_assure_info& from);

  inline loan_or_assure_info& operator=(const loan_or_assure_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loan_or_assure_info& default_instance();

  void Swap(loan_or_assure_info* other);

  // implements Message ----------------------------------------------

  loan_or_assure_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loan_or_assure_info& from);
  void MergeFrom(const loan_or_assure_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 overdue_day = 2;
  inline bool has_overdue_day() const;
  inline void clear_overdue_day();
  static const int kOverdueDayFieldNumber = 2;
  inline ::google::protobuf::int32 overdue_day() const;
  inline void set_overdue_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.loan_or_assure_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_overdue_day();
  inline void clear_has_overdue_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 overdue_day_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static loan_or_assure_info* default_instance_;
};
// -------------------------------------------------------------------

class borrow_info : public ::google::protobuf::Message {
 public:
  borrow_info();
  virtual ~borrow_info();

  borrow_info(const borrow_info& from);

  inline borrow_info& operator=(const borrow_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const borrow_info& default_instance();

  void Swap(borrow_info* other);

  // implements Message ----------------------------------------------

  borrow_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const borrow_info& from);
  void MergeFrom(const borrow_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bid_id = 1;
  inline bool has_bid_id() const;
  inline void clear_bid_id();
  static const int kBidIdFieldNumber = 1;
  inline const ::std::string& bid_id() const;
  inline void set_bid_id(const ::std::string& value);
  inline void set_bid_id(const char* value);
  inline void set_bid_id(const void* value, size_t size);
  inline ::std::string* mutable_bid_id();
  inline ::std::string* release_bid_id();
  inline void set_allocated_bid_id(::std::string* bid_id);

  // optional int32 overdue_times = 2;
  inline bool has_overdue_times() const;
  inline void clear_overdue_times();
  static const int kOverdueTimesFieldNumber = 2;
  inline ::google::protobuf::int32 overdue_times() const;
  inline void set_overdue_times(::google::protobuf::int32 value);

  // optional int32 should_repay_periods = 3;
  inline bool has_should_repay_periods() const;
  inline void clear_should_repay_periods();
  static const int kShouldRepayPeriodsFieldNumber = 3;
  inline ::google::protobuf::int32 should_repay_periods() const;
  inline void set_should_repay_periods(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.borrow_info)
 private:
  inline void set_has_bid_id();
  inline void clear_has_bid_id();
  inline void set_has_overdue_times();
  inline void clear_has_overdue_times();
  inline void set_has_should_repay_periods();
  inline void clear_has_should_repay_periods();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bid_id_;
  ::google::protobuf::int32 overdue_times_;
  ::google::protobuf::int32 should_repay_periods_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static borrow_info* default_instance_;
};
// -------------------------------------------------------------------

class loan_assure_info_list_ans : public ::google::protobuf::Message {
 public:
  loan_assure_info_list_ans();
  virtual ~loan_assure_info_list_ans();

  loan_assure_info_list_ans(const loan_assure_info_list_ans& from);

  inline loan_assure_info_list_ans& operator=(const loan_assure_info_list_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const loan_assure_info_list_ans& default_instance();

  void Swap(loan_assure_info_list_ans* other);

  // implements Message ----------------------------------------------

  loan_assure_info_list_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const loan_assure_info_list_ans& from);
  void MergeFrom(const loan_assure_info_list_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Loan_history_bad_debt_count = 1;
  inline bool has_loan_history_bad_debt_count() const;
  inline void clear_loan_history_bad_debt_count();
  static const int kLoanHistoryBadDebtCountFieldNumber = 1;
  inline ::google::protobuf::int32 loan_history_bad_debt_count() const;
  inline void set_loan_history_bad_debt_count(::google::protobuf::int32 value);

  // repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
  inline int loan_list_size() const;
  inline void clear_loan_list();
  static const int kLoanListFieldNumber = 2;
  inline const ::UBAS_niiwoo::loan_or_assure_info& loan_list(int index) const;
  inline ::UBAS_niiwoo::loan_or_assure_info* mutable_loan_list(int index);
  inline ::UBAS_niiwoo::loan_or_assure_info* add_loan_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >&
      loan_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >*
      mutable_loan_list();

  // repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
  inline int assure_list_size() const;
  inline void clear_assure_list();
  static const int kAssureListFieldNumber = 3;
  inline const ::UBAS_niiwoo::loan_or_assure_info& assure_list(int index) const;
  inline ::UBAS_niiwoo::loan_or_assure_info* mutable_assure_list(int index);
  inline ::UBAS_niiwoo::loan_or_assure_info* add_assure_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >&
      assure_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >*
      mutable_assure_list();

  // repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
  inline int borrower_info_list_size() const;
  inline void clear_borrower_info_list();
  static const int kBorrowerInfoListFieldNumber = 4;
  inline const ::UBAS_niiwoo::borrow_info& borrower_info_list(int index) const;
  inline ::UBAS_niiwoo::borrow_info* mutable_borrower_info_list(int index);
  inline ::UBAS_niiwoo::borrow_info* add_borrower_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::borrow_info >&
      borrower_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::borrow_info >*
      mutable_borrower_info_list();

  // optional .common.errorinfo error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.loan_assure_info_list_ans)
 private:
  inline void set_has_loan_history_bad_debt_count();
  inline void clear_has_loan_history_bad_debt_count();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info > loan_list_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info > assure_list_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::borrow_info > borrower_info_list_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 loan_history_bad_debt_count_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static loan_assure_info_list_ans* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_borrow_info_item : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_borrow_info_item();
  virtual ~niiwoo_UBAS_borrow_info_item();

  niiwoo_UBAS_borrow_info_item(const niiwoo_UBAS_borrow_info_item& from);

  inline niiwoo_UBAS_borrow_info_item& operator=(const niiwoo_UBAS_borrow_info_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_borrow_info_item& default_instance();

  void Swap(niiwoo_UBAS_borrow_info_item* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_borrow_info_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_borrow_info_item& from);
  void MergeFrom(const niiwoo_UBAS_borrow_info_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes identity_card = 1;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 1;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // optional bytes bid_id = 2;
  inline bool has_bid_id() const;
  inline void clear_bid_id();
  static const int kBidIdFieldNumber = 2;
  inline const ::std::string& bid_id() const;
  inline void set_bid_id(const ::std::string& value);
  inline void set_bid_id(const char* value);
  inline void set_bid_id(const void* value, size_t size);
  inline ::std::string* mutable_bid_id();
  inline ::std::string* release_bid_id();
  inline void set_allocated_bid_id(::std::string* bid_id);

  // optional .UBAS_niiwoo.en_apply_status apply_status = 3;
  inline bool has_apply_status() const;
  inline void clear_apply_status();
  static const int kApplyStatusFieldNumber = 3;
  inline ::UBAS_niiwoo::en_apply_status apply_status() const;
  inline void set_apply_status(::UBAS_niiwoo::en_apply_status value);

  // optional int32 overdue_days = 4;
  inline bool has_overdue_days() const;
  inline void clear_overdue_days();
  static const int kOverdueDaysFieldNumber = 4;
  inline ::google::protobuf::int32 overdue_days() const;
  inline void set_overdue_days(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item)
 private:
  inline void set_has_identity_card();
  inline void clear_has_identity_card();
  inline void set_has_bid_id();
  inline void clear_has_bid_id();
  inline void set_has_apply_status();
  inline void clear_has_apply_status();
  inline void set_has_overdue_days();
  inline void clear_has_overdue_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* identity_card_;
  ::std::string* bid_id_;
  int apply_status_;
  ::google::protobuf::int32 overdue_days_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_borrow_info_item* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_borrow_detail_ask : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_borrow_detail_ask();
  virtual ~niiwoo_UBAS_borrow_detail_ask();

  niiwoo_UBAS_borrow_detail_ask(const niiwoo_UBAS_borrow_detail_ask& from);

  inline niiwoo_UBAS_borrow_detail_ask& operator=(const niiwoo_UBAS_borrow_detail_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_borrow_detail_ask& default_instance();

  void Swap(niiwoo_UBAS_borrow_detail_ask* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_borrow_detail_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_borrow_detail_ask& from);
  void MergeFrom(const niiwoo_UBAS_borrow_detail_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes identity_card = 2;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 2;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* identity_card_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_borrow_detail_ask* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_borrow_detail_ans : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_borrow_detail_ans();
  virtual ~niiwoo_UBAS_borrow_detail_ans();

  niiwoo_UBAS_borrow_detail_ans(const niiwoo_UBAS_borrow_detail_ans& from);

  inline niiwoo_UBAS_borrow_detail_ans& operator=(const niiwoo_UBAS_borrow_detail_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_borrow_detail_ans& default_instance();

  void Swap(niiwoo_UBAS_borrow_detail_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_borrow_detail_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_borrow_detail_ans& from);
  void MergeFrom(const niiwoo_UBAS_borrow_detail_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
  inline int borror_info_size() const;
  inline void clear_borror_info();
  static const int kBorrorInfoFieldNumber = 1;
  inline const ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item& borror_info(int index) const;
  inline ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item* mutable_borror_info(int index);
  inline ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item* add_borror_info();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item >&
      borror_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item >*
      mutable_borror_info();

  // optional .common.errorinfo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // optional int32 max_overduemoney = 3;
  inline bool has_max_overduemoney() const;
  inline void clear_max_overduemoney();
  static const int kMaxOverduemoneyFieldNumber = 3;
  inline ::google::protobuf::int32 max_overduemoney() const;
  inline void set_max_overduemoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_max_overduemoney();
  inline void clear_has_max_overduemoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item > borror_info_;
  ::common::errorinfo* error_;
  ::google::protobuf::int32 max_overduemoney_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_borrow_detail_ans* default_instance_;
};
// -------------------------------------------------------------------

class user_address_t : public ::google::protobuf::Message {
 public:
  user_address_t();
  virtual ~user_address_t();

  user_address_t(const user_address_t& from);

  inline user_address_t& operator=(const user_address_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_address_t& default_instance();

  void Swap(user_address_t* other);

  // implements Message ----------------------------------------------

  user_address_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_address_t& from);
  void MergeFrom(const user_address_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UBAS_niiwoo.en_address_type address_type = 1;
  inline bool has_address_type() const;
  inline void clear_address_type();
  static const int kAddressTypeFieldNumber = 1;
  inline ::UBAS_niiwoo::en_address_type address_type() const;
  inline void set_address_type(::UBAS_niiwoo::en_address_type value);

  // optional bytes address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const void* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_address_t)
 private:
  inline void set_has_address_type();
  inline void clear_has_address_type();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* address_;
  int address_type_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_address_t* default_instance_;
};
// -------------------------------------------------------------------

class user_contact_t : public ::google::protobuf::Message {
 public:
  user_contact_t();
  virtual ~user_contact_t();

  user_contact_t(const user_contact_t& from);

  inline user_contact_t& operator=(const user_contact_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_contact_t& default_instance();

  void Swap(user_contact_t* other);

  // implements Message ----------------------------------------------

  user_contact_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_contact_t& from);
  void MergeFrom(const user_contact_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional int32 is_delete = 3;
  inline bool has_is_delete() const;
  inline void clear_is_delete();
  static const int kIsDeleteFieldNumber = 3;
  inline ::google::protobuf::int32 is_delete() const;
  inline void set_is_delete(::google::protobuf::int32 value);

  // optional bytes delete_time = 4;
  inline bool has_delete_time() const;
  inline void clear_delete_time();
  static const int kDeleteTimeFieldNumber = 4;
  inline const ::std::string& delete_time() const;
  inline void set_delete_time(const ::std::string& value);
  inline void set_delete_time(const char* value);
  inline void set_delete_time(const void* value, size_t size);
  inline ::std::string* mutable_delete_time();
  inline ::std::string* release_delete_time();
  inline void set_allocated_delete_time(::std::string* delete_time);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.user_contact_t)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_is_delete();
  inline void clear_has_is_delete();
  inline void set_has_delete_time();
  inline void clear_has_delete_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* delete_time_;
  ::google::protobuf::int32 is_delete_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static user_contact_t* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_info_ask : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_info_ask();
  virtual ~niiwoo_UBAS_info_ask();

  niiwoo_UBAS_info_ask(const niiwoo_UBAS_info_ask& from);

  inline niiwoo_UBAS_info_ask& operator=(const niiwoo_UBAS_info_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_info_ask& default_instance();

  void Swap(niiwoo_UBAS_info_ask* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_info_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_info_ask& from);
  void MergeFrom(const niiwoo_UBAS_info_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional bytes identity_card = 2;
  inline bool has_identity_card() const;
  inline void clear_identity_card();
  static const int kIdentityCardFieldNumber = 2;
  inline const ::std::string& identity_card() const;
  inline void set_identity_card(const ::std::string& value);
  inline void set_identity_card(const char* value);
  inline void set_identity_card(const void* value, size_t size);
  inline ::std::string* mutable_identity_card();
  inline ::std::string* release_identity_card();
  inline void set_allocated_identity_card(::std::string* identity_card);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_info_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_identity_card();
  inline void clear_has_identity_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::std::string* identity_card_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_info_ask* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_info_ans : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_info_ans();
  virtual ~niiwoo_UBAS_info_ans();

  niiwoo_UBAS_info_ans(const niiwoo_UBAS_info_ans& from);

  inline niiwoo_UBAS_info_ans& operator=(const niiwoo_UBAS_info_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_info_ans& default_instance();

  void Swap(niiwoo_UBAS_info_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_info_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_info_ans& from);
  void MergeFrom(const niiwoo_UBAS_info_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UBAS_niiwoo.user_address_t addres = 1;
  inline int addres_size() const;
  inline void clear_addres();
  static const int kAddresFieldNumber = 1;
  inline const ::UBAS_niiwoo::user_address_t& addres(int index) const;
  inline ::UBAS_niiwoo::user_address_t* mutable_addres(int index);
  inline ::UBAS_niiwoo::user_address_t* add_addres();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_address_t >&
      addres() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_address_t >*
      mutable_addres();

  // repeated .UBAS_niiwoo.user_contact_t relations = 2;
  inline int relations_size() const;
  inline void clear_relations();
  static const int kRelationsFieldNumber = 2;
  inline const ::UBAS_niiwoo::user_contact_t& relations(int index) const;
  inline ::UBAS_niiwoo::user_contact_t* mutable_relations(int index);
  inline ::UBAS_niiwoo::user_contact_t* add_relations();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
      relations() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
      mutable_relations();

  // repeated .UBAS_niiwoo.user_contact_t constacts = 3;
  inline int constacts_size() const;
  inline void clear_constacts();
  static const int kConstactsFieldNumber = 3;
  inline const ::UBAS_niiwoo::user_contact_t& constacts(int index) const;
  inline ::UBAS_niiwoo::user_contact_t* mutable_constacts(int index);
  inline ::UBAS_niiwoo::user_contact_t* add_constacts();
  inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
      constacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
      mutable_constacts();

  // optional .common.errorinfo error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::common::errorinfo& error() const;
  inline ::common::errorinfo* mutable_error();
  inline ::common::errorinfo* release_error();
  inline void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_info_ans)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_address_t > addres_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t > relations_;
  ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t > constacts_;
  ::common::errorinfo* error_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_info_ans* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_coincide_ask : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_coincide_ask();
  virtual ~niiwoo_UBAS_coincide_ask();

  niiwoo_UBAS_coincide_ask(const niiwoo_UBAS_coincide_ask& from);

  inline niiwoo_UBAS_coincide_ask& operator=(const niiwoo_UBAS_coincide_ask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_coincide_ask& default_instance();

  void Swap(niiwoo_UBAS_coincide_ask* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_coincide_ask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_coincide_ask& from);
  void MergeFrom(const niiwoo_UBAS_coincide_ask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.common_ask_header ask_header = 1;
  inline bool has_ask_header() const;
  inline void clear_ask_header();
  static const int kAskHeaderFieldNumber = 1;
  inline const ::common::common_ask_header& ask_header() const;
  inline ::common::common_ask_header* mutable_ask_header();
  inline ::common::common_ask_header* release_ask_header();
  inline void set_allocated_ask_header(::common::common_ask_header* ask_header);

  // optional int32 ask_funcode = 2;
  inline bool has_ask_funcode() const;
  inline void clear_ask_funcode();
  static const int kAskFuncodeFieldNumber = 2;
  inline ::google::protobuf::int32 ask_funcode() const;
  inline void set_ask_funcode(::google::protobuf::int32 value);

  // optional .common.user_basic_identification user_1 = 3;
  inline bool has_user_1() const;
  inline void clear_user_1();
  static const int kUser1FieldNumber = 3;
  inline const ::common::user_basic_identification& user_1() const;
  inline ::common::user_basic_identification* mutable_user_1();
  inline ::common::user_basic_identification* release_user_1();
  inline void set_allocated_user_1(::common::user_basic_identification* user_1);

  // optional .common.user_basic_identification user_2 = 4;
  inline bool has_user_2() const;
  inline void clear_user_2();
  static const int kUser2FieldNumber = 4;
  inline const ::common::user_basic_identification& user_2() const;
  inline ::common::user_basic_identification* mutable_user_2();
  inline ::common::user_basic_identification* release_user_2();
  inline void set_allocated_user_2(::common::user_basic_identification* user_2);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_coincide_ask)
 private:
  inline void set_has_ask_header();
  inline void clear_has_ask_header();
  inline void set_has_ask_funcode();
  inline void clear_has_ask_funcode();
  inline void set_has_user_1();
  inline void clear_has_user_1();
  inline void set_has_user_2();
  inline void clear_has_user_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::common_ask_header* ask_header_;
  ::common::user_basic_identification* user_1_;
  ::common::user_basic_identification* user_2_;
  ::google::protobuf::int32 ask_funcode_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_coincide_ask* default_instance_;
};
// -------------------------------------------------------------------

class niiwoo_UBAS_coincide_ans : public ::google::protobuf::Message {
 public:
  niiwoo_UBAS_coincide_ans();
  virtual ~niiwoo_UBAS_coincide_ans();

  niiwoo_UBAS_coincide_ans(const niiwoo_UBAS_coincide_ans& from);

  inline niiwoo_UBAS_coincide_ans& operator=(const niiwoo_UBAS_coincide_ans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niiwoo_UBAS_coincide_ans& default_instance();

  void Swap(niiwoo_UBAS_coincide_ans* other);

  // implements Message ----------------------------------------------

  niiwoo_UBAS_coincide_ans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niiwoo_UBAS_coincide_ans& from);
  void MergeFrom(const niiwoo_UBAS_coincide_ans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float coincide = 1;
  inline bool has_coincide() const;
  inline void clear_coincide();
  static const int kCoincideFieldNumber = 1;
  inline float coincide() const;
  inline void set_coincide(float value);

  // optional .common.result_info result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::common::result_info& result() const;
  inline ::common::result_info* mutable_result();
  inline ::common::result_info* release_result();
  inline void set_allocated_result(::common::result_info* result);

  // @@protoc_insertion_point(class_scope:UBAS_niiwoo.niiwoo_UBAS_coincide_ans)
 private:
  inline void set_has_coincide();
  inline void clear_has_coincide();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::common::result_info* result_;
  float coincide_;
  friend void  protobuf_AddDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_AssignDesc_UBAS_5fniiwoo_2eproto();
  friend void protobuf_ShutdownFile_UBAS_5fniiwoo_2eproto();

  void InitAsDefaultInstance();
  static niiwoo_UBAS_coincide_ans* default_instance_;
};
// ===================================================================


// ===================================================================

// user_info

// optional bytes user_id = 1;
inline bool user_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_info::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& user_info::user_id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.user_id)
  return *user_id_;
}
inline void user_info::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.user_id)
}
inline void user_info::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.user_id)
}
inline void user_info::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.user_id)
}
inline ::std::string* user_info::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.user_id)
  return user_id_;
}
inline ::std::string* user_info::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.user_id)
}

// optional bytes user_nickname = 2;
inline bool user_info::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& user_info::user_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.user_nickname)
  return *user_nickname_;
}
inline void user_info::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.user_nickname)
}
inline void user_info::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.user_nickname)
}
inline void user_info::set_user_nickname(const void* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.user_nickname)
}
inline ::std::string* user_info::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.user_nickname)
  return user_nickname_;
}
inline ::std::string* user_info::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.user_nickname)
}

// optional bytes college_name = 3;
inline bool user_info::has_college_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_info::set_has_college_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_info::clear_has_college_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_info::clear_college_name() {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_->clear();
  }
  clear_has_college_name();
}
inline const ::std::string& user_info::college_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.college_name)
  return *college_name_;
}
inline void user_info::set_college_name(const ::std::string& value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.college_name)
}
inline void user_info::set_college_name(const char* value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.college_name)
}
inline void user_info::set_college_name(const void* value, size_t size) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.college_name)
}
inline ::std::string* user_info::mutable_college_name() {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.college_name)
  return college_name_;
}
inline ::std::string* user_info::release_college_name() {
  clear_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = college_name_;
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_college_name(::std::string* college_name) {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (college_name) {
    set_has_college_name();
    college_name_ = college_name;
  } else {
    clear_has_college_name();
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.college_name)
}

// optional .common.degree eduction_degree = 4;
inline bool user_info::has_eduction_degree() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_info::set_has_eduction_degree() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_info::clear_has_eduction_degree() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_info::clear_eduction_degree() {
  eduction_degree_ = 1;
  clear_has_eduction_degree();
}
inline ::common::degree user_info::eduction_degree() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.eduction_degree)
  return static_cast< ::common::degree >(eduction_degree_);
}
inline void user_info::set_eduction_degree(::common::degree value) {
  assert(::common::degree_IsValid(value));
  set_has_eduction_degree();
  eduction_degree_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.eduction_degree)
}

// optional .UBAS_niiwoo.en_sex sex = 5;
inline bool user_info::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_info::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_info::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::UBAS_niiwoo::en_sex user_info::sex() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.sex)
  return static_cast< ::UBAS_niiwoo::en_sex >(sex_);
}
inline void user_info::set_sex(::UBAS_niiwoo::en_sex value) {
  assert(::UBAS_niiwoo::en_sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.sex)
}

// optional int32 age = 6;
inline bool user_info::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_info::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_info::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_info::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 user_info::age() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.age)
  return age_;
}
inline void user_info::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.age)
}

// optional .UBAS_niiwoo.en_marry marry = 7;
inline bool user_info::has_marry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_info::set_has_marry() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_info::clear_has_marry() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_info::clear_marry() {
  marry_ = 0;
  clear_has_marry();
}
inline ::UBAS_niiwoo::en_marry user_info::marry() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.marry)
  return static_cast< ::UBAS_niiwoo::en_marry >(marry_);
}
inline void user_info::set_marry(::UBAS_niiwoo::en_marry value) {
  assert(::UBAS_niiwoo::en_marry_IsValid(value));
  set_has_marry();
  marry_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.marry)
}

// optional bytes card_address = 8;
inline bool user_info::has_card_address() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_info::set_has_card_address() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_info::clear_has_card_address() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_info::clear_card_address() {
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_->clear();
  }
  clear_has_card_address();
}
inline const ::std::string& user_info::card_address() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.card_address)
  return *card_address_;
}
inline void user_info::set_card_address(const ::std::string& value) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.card_address)
}
inline void user_info::set_card_address(const char* value) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.card_address)
}
inline void user_info::set_card_address(const void* value, size_t size) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.card_address)
}
inline ::std::string* user_info::mutable_card_address() {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.card_address)
  return card_address_;
}
inline ::std::string* user_info::release_card_address() {
  clear_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = card_address_;
    card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_card_address(::std::string* card_address) {
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_address_;
  }
  if (card_address) {
    set_has_card_address();
    card_address_ = card_address;
  } else {
    clear_has_card_address();
    card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.card_address)
}

// optional bytes home_sheng = 9;
inline bool user_info::has_home_sheng() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_info::set_has_home_sheng() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_info::clear_has_home_sheng() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_info::clear_home_sheng() {
  if (home_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_sheng_->clear();
  }
  clear_has_home_sheng();
}
inline const ::std::string& user_info::home_sheng() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.home_sheng)
  return *home_sheng_;
}
inline void user_info::set_home_sheng(const ::std::string& value) {
  set_has_home_sheng();
  if (home_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_sheng_ = new ::std::string;
  }
  home_sheng_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.home_sheng)
}
inline void user_info::set_home_sheng(const char* value) {
  set_has_home_sheng();
  if (home_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_sheng_ = new ::std::string;
  }
  home_sheng_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.home_sheng)
}
inline void user_info::set_home_sheng(const void* value, size_t size) {
  set_has_home_sheng();
  if (home_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_sheng_ = new ::std::string;
  }
  home_sheng_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.home_sheng)
}
inline ::std::string* user_info::mutable_home_sheng() {
  set_has_home_sheng();
  if (home_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_sheng_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.home_sheng)
  return home_sheng_;
}
inline ::std::string* user_info::release_home_sheng() {
  clear_has_home_sheng();
  if (home_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = home_sheng_;
    home_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_home_sheng(::std::string* home_sheng) {
  if (home_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete home_sheng_;
  }
  if (home_sheng) {
    set_has_home_sheng();
    home_sheng_ = home_sheng;
  } else {
    clear_has_home_sheng();
    home_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.home_sheng)
}

// optional bytes home_city = 10;
inline bool user_info::has_home_city() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_info::set_has_home_city() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_info::clear_has_home_city() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_info::clear_home_city() {
  if (home_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_city_->clear();
  }
  clear_has_home_city();
}
inline const ::std::string& user_info::home_city() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.home_city)
  return *home_city_;
}
inline void user_info::set_home_city(const ::std::string& value) {
  set_has_home_city();
  if (home_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_city_ = new ::std::string;
  }
  home_city_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.home_city)
}
inline void user_info::set_home_city(const char* value) {
  set_has_home_city();
  if (home_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_city_ = new ::std::string;
  }
  home_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info.home_city)
}
inline void user_info::set_home_city(const void* value, size_t size) {
  set_has_home_city();
  if (home_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_city_ = new ::std::string;
  }
  home_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info.home_city)
}
inline ::std::string* user_info::mutable_home_city() {
  set_has_home_city();
  if (home_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    home_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info.home_city)
  return home_city_;
}
inline ::std::string* user_info::release_home_city() {
  clear_has_home_city();
  if (home_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = home_city_;
    home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info::set_allocated_home_city(::std::string* home_city) {
  if (home_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete home_city_;
  }
  if (home_city) {
    set_has_home_city();
    home_city_ = home_city;
  } else {
    clear_has_home_city();
    home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info.home_city)
}

// optional int32 money_for_year = 11;
inline bool user_info::has_money_for_year() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_info::set_has_money_for_year() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_info::clear_has_money_for_year() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_info::clear_money_for_year() {
  money_for_year_ = 0;
  clear_has_money_for_year();
}
inline ::google::protobuf::int32 user_info::money_for_year() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.money_for_year)
  return money_for_year_;
}
inline void user_info::set_money_for_year(::google::protobuf::int32 value) {
  set_has_money_for_year();
  money_for_year_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.money_for_year)
}

// optional int32 mobile_number_sum = 12;
inline bool user_info::has_mobile_number_sum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_info::set_has_mobile_number_sum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_info::clear_has_mobile_number_sum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_info::clear_mobile_number_sum() {
  mobile_number_sum_ = 0;
  clear_has_mobile_number_sum();
}
inline ::google::protobuf::int32 user_info::mobile_number_sum() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.mobile_number_sum)
  return mobile_number_sum_;
}
inline void user_info::set_mobile_number_sum(::google::protobuf::int32 value) {
  set_has_mobile_number_sum();
  mobile_number_sum_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.mobile_number_sum)
}

// optional .UBAS_niiwoo.en_home home_type = 13;
inline bool user_info::has_home_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_info::set_has_home_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_info::clear_has_home_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_info::clear_home_type() {
  home_type_ = 0;
  clear_has_home_type();
}
inline ::UBAS_niiwoo::en_home user_info::home_type() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info.home_type)
  return static_cast< ::UBAS_niiwoo::en_home >(home_type_);
}
inline void user_info::set_home_type(::UBAS_niiwoo::en_home value) {
  assert(::UBAS_niiwoo::en_home_IsValid(value));
  set_has_home_type();
  home_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info.home_type)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_ask

// optional .UBAS_niiwoo.en_user user_type = 1;
inline bool niiwoo_UBAS_ask::has_user_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_ask::set_has_user_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_ask::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_ask::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
inline ::UBAS_niiwoo::en_user niiwoo_UBAS_ask::user_type() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_ask.user_type)
  return static_cast< ::UBAS_niiwoo::en_user >(user_type_);
}
inline void niiwoo_UBAS_ask::set_user_type(::UBAS_niiwoo::en_user value) {
  assert(::UBAS_niiwoo::en_user_IsValid(value));
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_ask.user_type)
}

// optional bytes identity_card = 2;
inline bool niiwoo_UBAS_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& niiwoo_UBAS_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
  return *identity_card_;
}
inline void niiwoo_UBAS_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
}
inline void niiwoo_UBAS_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
}
inline void niiwoo_UBAS_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
}
inline ::std::string* niiwoo_UBAS_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
  return identity_card_;
}
inline ::std::string* niiwoo_UBAS_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_ask.identity_card)
}

// optional bytes real_name = 3;
inline bool niiwoo_UBAS_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niiwoo_UBAS_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niiwoo_UBAS_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niiwoo_UBAS_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& niiwoo_UBAS_ask::real_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
  return *real_name_;
}
inline void niiwoo_UBAS_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
}
inline void niiwoo_UBAS_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
}
inline void niiwoo_UBAS_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
}
inline ::std::string* niiwoo_UBAS_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
  return real_name_;
}
inline ::std::string* niiwoo_UBAS_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_ask.real_name)
}

// optional bytes mobile_phone = 4;
inline bool niiwoo_UBAS_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niiwoo_UBAS_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niiwoo_UBAS_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niiwoo_UBAS_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& niiwoo_UBAS_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
  return *mobile_phone_;
}
inline void niiwoo_UBAS_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
}
inline void niiwoo_UBAS_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
}
inline void niiwoo_UBAS_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
}
inline ::std::string* niiwoo_UBAS_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* niiwoo_UBAS_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_ask.mobile_phone)
}

// optional .common.common_ask_header ask_header = 5;
inline bool niiwoo_UBAS_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void niiwoo_UBAS_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void niiwoo_UBAS_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void niiwoo_UBAS_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& niiwoo_UBAS_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_ask.ask_header)
}

// -------------------------------------------------------------------

// niiwoo_student_UBAS_ans

// optional bytes user_id = 1;
inline bool niiwoo_student_UBAS_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_student_UBAS_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_student_UBAS_ans::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& niiwoo_student_UBAS_ans::user_id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
  return *user_id_;
}
inline void niiwoo_student_UBAS_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
}
inline void niiwoo_student_UBAS_ans::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
}
inline void niiwoo_student_UBAS_ans::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
  return user_id_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_id)
}

// optional bytes user_nickname = 2;
inline bool niiwoo_student_UBAS_ans::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_student_UBAS_ans::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_student_UBAS_ans::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& niiwoo_student_UBAS_ans::user_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
  return *user_nickname_;
}
inline void niiwoo_student_UBAS_ans::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
}
inline void niiwoo_student_UBAS_ans::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
}
inline void niiwoo_student_UBAS_ans::set_user_nickname(const void* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
  return user_nickname_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.user_nickname)
}

// optional .UBAS_niiwoo.en_sex sex = 3;
inline bool niiwoo_student_UBAS_ans::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niiwoo_student_UBAS_ans::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niiwoo_student_UBAS_ans::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::UBAS_niiwoo::en_sex niiwoo_student_UBAS_ans::sex() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.sex)
  return static_cast< ::UBAS_niiwoo::en_sex >(sex_);
}
inline void niiwoo_student_UBAS_ans::set_sex(::UBAS_niiwoo::en_sex value) {
  assert(::UBAS_niiwoo::en_sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.sex)
}

// optional bytes college_name = 4;
inline bool niiwoo_student_UBAS_ans::has_college_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_college_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niiwoo_student_UBAS_ans::clear_has_college_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niiwoo_student_UBAS_ans::clear_college_name() {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_->clear();
  }
  clear_has_college_name();
}
inline const ::std::string& niiwoo_student_UBAS_ans::college_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
  return *college_name_;
}
inline void niiwoo_student_UBAS_ans::set_college_name(const ::std::string& value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
}
inline void niiwoo_student_UBAS_ans::set_college_name(const char* value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
}
inline void niiwoo_student_UBAS_ans::set_college_name(const void* value, size_t size) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_college_name() {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
  return college_name_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_college_name() {
  clear_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = college_name_;
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_college_name(::std::string* college_name) {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (college_name) {
    set_has_college_name();
    college_name_ = college_name;
  } else {
    clear_has_college_name();
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.college_name)
}

// optional .common.degree eduction_degree = 5;
inline bool niiwoo_student_UBAS_ans::has_eduction_degree() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_eduction_degree() {
  _has_bits_[0] |= 0x00000010u;
}
inline void niiwoo_student_UBAS_ans::clear_has_eduction_degree() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void niiwoo_student_UBAS_ans::clear_eduction_degree() {
  eduction_degree_ = 1;
  clear_has_eduction_degree();
}
inline ::common::degree niiwoo_student_UBAS_ans::eduction_degree() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.eduction_degree)
  return static_cast< ::common::degree >(eduction_degree_);
}
inline void niiwoo_student_UBAS_ans::set_eduction_degree(::common::degree value) {
  assert(::common::degree_IsValid(value));
  set_has_eduction_degree();
  eduction_degree_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.eduction_degree)
}

// optional bytes school_end_date = 6;
inline bool niiwoo_student_UBAS_ans::has_school_end_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_school_end_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void niiwoo_student_UBAS_ans::clear_has_school_end_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void niiwoo_student_UBAS_ans::clear_school_end_date() {
  if (school_end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_end_date_->clear();
  }
  clear_has_school_end_date();
}
inline const ::std::string& niiwoo_student_UBAS_ans::school_end_date() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
  return *school_end_date_;
}
inline void niiwoo_student_UBAS_ans::set_school_end_date(const ::std::string& value) {
  set_has_school_end_date();
  if (school_end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_end_date_ = new ::std::string;
  }
  school_end_date_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
}
inline void niiwoo_student_UBAS_ans::set_school_end_date(const char* value) {
  set_has_school_end_date();
  if (school_end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_end_date_ = new ::std::string;
  }
  school_end_date_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
}
inline void niiwoo_student_UBAS_ans::set_school_end_date(const void* value, size_t size) {
  set_has_school_end_date();
  if (school_end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_end_date_ = new ::std::string;
  }
  school_end_date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_school_end_date() {
  set_has_school_end_date();
  if (school_end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_end_date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
  return school_end_date_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_school_end_date() {
  clear_has_school_end_date();
  if (school_end_date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = school_end_date_;
    school_end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_school_end_date(::std::string* school_end_date) {
  if (school_end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_end_date_;
  }
  if (school_end_date) {
    set_has_school_end_date();
    school_end_date_ = school_end_date;
  } else {
    clear_has_school_end_date();
    school_end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_end_date)
}

// optional bytes school_sheng = 7;
inline bool niiwoo_student_UBAS_ans::has_school_sheng() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_school_sheng() {
  _has_bits_[0] |= 0x00000040u;
}
inline void niiwoo_student_UBAS_ans::clear_has_school_sheng() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void niiwoo_student_UBAS_ans::clear_school_sheng() {
  if (school_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_sheng_->clear();
  }
  clear_has_school_sheng();
}
inline const ::std::string& niiwoo_student_UBAS_ans::school_sheng() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
  return *school_sheng_;
}
inline void niiwoo_student_UBAS_ans::set_school_sheng(const ::std::string& value) {
  set_has_school_sheng();
  if (school_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_sheng_ = new ::std::string;
  }
  school_sheng_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
}
inline void niiwoo_student_UBAS_ans::set_school_sheng(const char* value) {
  set_has_school_sheng();
  if (school_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_sheng_ = new ::std::string;
  }
  school_sheng_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
}
inline void niiwoo_student_UBAS_ans::set_school_sheng(const void* value, size_t size) {
  set_has_school_sheng();
  if (school_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_sheng_ = new ::std::string;
  }
  school_sheng_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_school_sheng() {
  set_has_school_sheng();
  if (school_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_sheng_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
  return school_sheng_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_school_sheng() {
  clear_has_school_sheng();
  if (school_sheng_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = school_sheng_;
    school_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_school_sheng(::std::string* school_sheng) {
  if (school_sheng_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_sheng_;
  }
  if (school_sheng) {
    set_has_school_sheng();
    school_sheng_ = school_sheng;
  } else {
    clear_has_school_sheng();
    school_sheng_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_sheng)
}

// optional bytes school_city = 8;
inline bool niiwoo_student_UBAS_ans::has_school_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_school_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void niiwoo_student_UBAS_ans::clear_has_school_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void niiwoo_student_UBAS_ans::clear_school_city() {
  if (school_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_city_->clear();
  }
  clear_has_school_city();
}
inline const ::std::string& niiwoo_student_UBAS_ans::school_city() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
  return *school_city_;
}
inline void niiwoo_student_UBAS_ans::set_school_city(const ::std::string& value) {
  set_has_school_city();
  if (school_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_city_ = new ::std::string;
  }
  school_city_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
}
inline void niiwoo_student_UBAS_ans::set_school_city(const char* value) {
  set_has_school_city();
  if (school_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_city_ = new ::std::string;
  }
  school_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
}
inline void niiwoo_student_UBAS_ans::set_school_city(const void* value, size_t size) {
  set_has_school_city();
  if (school_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_city_ = new ::std::string;
  }
  school_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_school_city() {
  set_has_school_city();
  if (school_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    school_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
  return school_city_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_school_city() {
  clear_has_school_city();
  if (school_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = school_city_;
    school_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_school_city(::std::string* school_city) {
  if (school_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete school_city_;
  }
  if (school_city) {
    set_has_school_city();
    school_city_ = school_city;
  } else {
    clear_has_school_city();
    school_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.school_city)
}

// optional bytes card_address = 9;
inline bool niiwoo_student_UBAS_ans::has_card_address() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_card_address() {
  _has_bits_[0] |= 0x00000100u;
}
inline void niiwoo_student_UBAS_ans::clear_has_card_address() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void niiwoo_student_UBAS_ans::clear_card_address() {
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_->clear();
  }
  clear_has_card_address();
}
inline const ::std::string& niiwoo_student_UBAS_ans::card_address() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
  return *card_address_;
}
inline void niiwoo_student_UBAS_ans::set_card_address(const ::std::string& value) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
}
inline void niiwoo_student_UBAS_ans::set_card_address(const char* value) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
}
inline void niiwoo_student_UBAS_ans::set_card_address(const void* value, size_t size) {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  card_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
}
inline ::std::string* niiwoo_student_UBAS_ans::mutable_card_address() {
  set_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    card_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
  return card_address_;
}
inline ::std::string* niiwoo_student_UBAS_ans::release_card_address() {
  clear_has_card_address();
  if (card_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = card_address_;
    card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_student_UBAS_ans::set_allocated_card_address(::std::string* card_address) {
  if (card_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_address_;
  }
  if (card_address) {
    set_has_card_address();
    card_address_ = card_address;
  } else {
    clear_has_card_address();
    card_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.card_address)
}

// optional int32 mobile_number_sum = 10;
inline bool niiwoo_student_UBAS_ans::has_mobile_number_sum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_mobile_number_sum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void niiwoo_student_UBAS_ans::clear_has_mobile_number_sum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void niiwoo_student_UBAS_ans::clear_mobile_number_sum() {
  mobile_number_sum_ = 0;
  clear_has_mobile_number_sum();
}
inline ::google::protobuf::int32 niiwoo_student_UBAS_ans::mobile_number_sum() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.mobile_number_sum)
  return mobile_number_sum_;
}
inline void niiwoo_student_UBAS_ans::set_mobile_number_sum(::google::protobuf::int32 value) {
  set_has_mobile_number_sum();
  mobile_number_sum_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_student_UBAS_ans.mobile_number_sum)
}

// optional .common.errorinfo error = 11;
inline bool niiwoo_student_UBAS_ans::has_error() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void niiwoo_student_UBAS_ans::set_has_error() {
  _has_bits_[0] |= 0x00000400u;
}
inline void niiwoo_student_UBAS_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void niiwoo_student_UBAS_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& niiwoo_student_UBAS_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_student_UBAS_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* niiwoo_student_UBAS_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_student_UBAS_ans.error)
  return error_;
}
inline ::common::errorinfo* niiwoo_student_UBAS_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void niiwoo_student_UBAS_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_student_UBAS_ans.error)
}

// -------------------------------------------------------------------

// niiwoo_tuandai_UBAS_ans

// optional .UBAS_niiwoo.user_info info = 1;
inline bool niiwoo_tuandai_UBAS_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_tuandai_UBAS_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_tuandai_UBAS_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_tuandai_UBAS_ans::clear_info() {
  if (info_ != NULL) info_->::UBAS_niiwoo::user_info::Clear();
  clear_has_info();
}
inline const ::UBAS_niiwoo::user_info& niiwoo_tuandai_UBAS_ans::info() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UBAS_niiwoo::user_info* niiwoo_tuandai_UBAS_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UBAS_niiwoo::user_info;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.info)
  return info_;
}
inline ::UBAS_niiwoo::user_info* niiwoo_tuandai_UBAS_ans::release_info() {
  clear_has_info();
  ::UBAS_niiwoo::user_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void niiwoo_tuandai_UBAS_ans::set_allocated_info(::UBAS_niiwoo::user_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.info)
}

// optional .common.errorinfo error = 2;
inline bool niiwoo_tuandai_UBAS_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_tuandai_UBAS_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_tuandai_UBAS_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_tuandai_UBAS_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& niiwoo_tuandai_UBAS_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* niiwoo_tuandai_UBAS_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.error)
  return error_;
}
inline ::common::errorinfo* niiwoo_tuandai_UBAS_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void niiwoo_tuandai_UBAS_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_tuandai_UBAS_ans.error)
}

// -------------------------------------------------------------------

// niiwoo_no_tuandai_UBAS_ans

// optional .UBAS_niiwoo.user_info info = 1;
inline bool niiwoo_no_tuandai_UBAS_ans::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_no_tuandai_UBAS_ans::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_no_tuandai_UBAS_ans::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_no_tuandai_UBAS_ans::clear_info() {
  if (info_ != NULL) info_->::UBAS_niiwoo::user_info::Clear();
  clear_has_info();
}
inline const ::UBAS_niiwoo::user_info& niiwoo_no_tuandai_UBAS_ans::info() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UBAS_niiwoo::user_info* niiwoo_no_tuandai_UBAS_ans::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::UBAS_niiwoo::user_info;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.info)
  return info_;
}
inline ::UBAS_niiwoo::user_info* niiwoo_no_tuandai_UBAS_ans::release_info() {
  clear_has_info();
  ::UBAS_niiwoo::user_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void niiwoo_no_tuandai_UBAS_ans::set_allocated_info(::UBAS_niiwoo::user_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.info)
}

// optional .common.errorinfo error = 2;
inline bool niiwoo_no_tuandai_UBAS_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_no_tuandai_UBAS_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_no_tuandai_UBAS_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_no_tuandai_UBAS_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& niiwoo_no_tuandai_UBAS_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* niiwoo_no_tuandai_UBAS_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.error)
  return error_;
}
inline ::common::errorinfo* niiwoo_no_tuandai_UBAS_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void niiwoo_no_tuandai_UBAS_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_no_tuandai_UBAS_ans.error)
}

// -------------------------------------------------------------------

// user_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool user_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& user_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* user_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* user_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void user_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ask.ask_header)
}

// optional .UBAS_niiwoo.niiwoo_ask_type query_type = 2;
inline bool user_info_ask::has_query_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info_ask::set_has_query_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info_ask::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info_ask::clear_query_type() {
  query_type_ = 1;
  clear_has_query_type();
}
inline ::UBAS_niiwoo::niiwoo_ask_type user_info_ask::query_type() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ask.query_type)
  return static_cast< ::UBAS_niiwoo::niiwoo_ask_type >(query_type_);
}
inline void user_info_ask::set_query_type(::UBAS_niiwoo::niiwoo_ask_type value) {
  assert(::UBAS_niiwoo::niiwoo_ask_type_IsValid(value));
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ask.query_type)
}

// optional bytes identity_card = 3;
inline bool user_info_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_info_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_info_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_info_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& user_info_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ask.identity_card)
  return *identity_card_;
}
inline void user_info_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ask.identity_card)
}
inline void user_info_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ask.identity_card)
}
inline void user_info_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ask.identity_card)
}
inline ::std::string* user_info_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ask.identity_card)
  return identity_card_;
}
inline ::std::string* user_info_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ask.identity_card)
}

// optional bytes real_name = 4;
inline bool user_info_ask::has_real_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_info_ask::set_has_real_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_info_ask::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_info_ask::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& user_info_ask::real_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ask.real_name)
  return *real_name_;
}
inline void user_info_ask::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ask.real_name)
}
inline void user_info_ask::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ask.real_name)
}
inline void user_info_ask::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ask.real_name)
}
inline ::std::string* user_info_ask::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ask.real_name)
  return real_name_;
}
inline ::std::string* user_info_ask::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ask::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ask.real_name)
}

// optional bytes mobile_phone = 5;
inline bool user_info_ask::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_info_ask::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_info_ask::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_info_ask::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_info_ask::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ask.mobile_phone)
  return *mobile_phone_;
}
inline void user_info_ask::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ask.mobile_phone)
}
inline void user_info_ask::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ask.mobile_phone)
}
inline void user_info_ask::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ask.mobile_phone)
}
inline ::std::string* user_info_ask::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ask.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_info_ask::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ask::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ask.mobile_phone)
}

// -------------------------------------------------------------------

// friend_data

// optional bytes friend_card = 1;
inline bool friend_data::has_friend_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_data::set_has_friend_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_data::clear_has_friend_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_data::clear_friend_card() {
  if (friend_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_card_->clear();
  }
  clear_has_friend_card();
}
inline const ::std::string& friend_data::friend_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.friend_data.friend_card)
  return *friend_card_;
}
inline void friend_data::set_friend_card(const ::std::string& value) {
  set_has_friend_card();
  if (friend_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_card_ = new ::std::string;
  }
  friend_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.friend_data.friend_card)
}
inline void friend_data::set_friend_card(const char* value) {
  set_has_friend_card();
  if (friend_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_card_ = new ::std::string;
  }
  friend_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.friend_data.friend_card)
}
inline void friend_data::set_friend_card(const void* value, size_t size) {
  set_has_friend_card();
  if (friend_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_card_ = new ::std::string;
  }
  friend_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.friend_data.friend_card)
}
inline ::std::string* friend_data::mutable_friend_card() {
  set_has_friend_card();
  if (friend_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friend_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.friend_data.friend_card)
  return friend_card_;
}
inline ::std::string* friend_data::release_friend_card() {
  clear_has_friend_card();
  if (friend_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friend_card_;
    friend_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void friend_data::set_allocated_friend_card(::std::string* friend_card) {
  if (friend_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friend_card_;
  }
  if (friend_card) {
    set_has_friend_card();
    friend_card_ = friend_card;
  } else {
    clear_has_friend_card();
    friend_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.friend_data.friend_card)
}

// optional bool is_prove = 2;
inline bool friend_data::has_is_prove() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_data::set_has_is_prove() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_data::clear_has_is_prove() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_data::clear_is_prove() {
  is_prove_ = false;
  clear_has_is_prove();
}
inline bool friend_data::is_prove() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.friend_data.is_prove)
  return is_prove_;
}
inline void friend_data::set_is_prove(bool value) {
  set_has_is_prove();
  is_prove_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.friend_data.is_prove)
}

// -------------------------------------------------------------------

// user_info_ans

// optional bytes identity_card = 1;
inline bool user_info_ans::has_identity_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_info_ans::set_has_identity_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_info_ans::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_info_ans::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& user_info_ans::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.identity_card)
  return *identity_card_;
}
inline void user_info_ans::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.identity_card)
}
inline void user_info_ans::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.identity_card)
}
inline void user_info_ans::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.identity_card)
}
inline ::std::string* user_info_ans::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.identity_card)
  return identity_card_;
}
inline ::std::string* user_info_ans::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.identity_card)
}

// optional bytes real_name = 2;
inline bool user_info_ans::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_info_ans::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_info_ans::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_info_ans::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& user_info_ans::real_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.real_name)
  return *real_name_;
}
inline void user_info_ans::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.real_name)
}
inline void user_info_ans::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.real_name)
}
inline void user_info_ans::set_real_name(const void* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.real_name)
}
inline ::std::string* user_info_ans::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    real_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.real_name)
  return real_name_;
}
inline ::std::string* user_info_ans::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_real_name(::std::string* real_name) {
  if (real_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_name_;
  }
  if (real_name) {
    set_has_real_name();
    real_name_ = real_name;
  } else {
    clear_has_real_name();
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.real_name)
}

// optional bytes mobile_phone = 3;
inline bool user_info_ans::has_mobile_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_info_ans::set_has_mobile_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_info_ans::clear_has_mobile_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_info_ans::clear_mobile_phone() {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_->clear();
  }
  clear_has_mobile_phone();
}
inline const ::std::string& user_info_ans::mobile_phone() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.mobile_phone)
  return *mobile_phone_;
}
inline void user_info_ans::set_mobile_phone(const ::std::string& value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.mobile_phone)
}
inline void user_info_ans::set_mobile_phone(const char* value) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.mobile_phone)
}
inline void user_info_ans::set_mobile_phone(const void* value, size_t size) {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  mobile_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.mobile_phone)
}
inline ::std::string* user_info_ans::mutable_mobile_phone() {
  set_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.mobile_phone)
  return mobile_phone_;
}
inline ::std::string* user_info_ans::release_mobile_phone() {
  clear_has_mobile_phone();
  if (mobile_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_phone_;
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_mobile_phone(::std::string* mobile_phone) {
  if (mobile_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_phone_;
  }
  if (mobile_phone) {
    set_has_mobile_phone();
    mobile_phone_ = mobile_phone;
  } else {
    clear_has_mobile_phone();
    mobile_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.mobile_phone)
}

// optional bytes user_id = 4;
inline bool user_info_ans::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_info_ans::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_info_ans::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_info_ans::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& user_info_ans::user_id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.user_id)
  return *user_id_;
}
inline void user_info_ans::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.user_id)
}
inline void user_info_ans::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.user_id)
}
inline void user_info_ans::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.user_id)
}
inline ::std::string* user_info_ans::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.user_id)
  return user_id_;
}
inline ::std::string* user_info_ans::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.user_id)
}

// optional bytes user_nickname = 5;
inline bool user_info_ans::has_user_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_info_ans::set_has_user_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_info_ans::clear_has_user_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_info_ans::clear_user_nickname() {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_->clear();
  }
  clear_has_user_nickname();
}
inline const ::std::string& user_info_ans::user_nickname() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.user_nickname)
  return *user_nickname_;
}
inline void user_info_ans::set_user_nickname(const ::std::string& value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.user_nickname)
}
inline void user_info_ans::set_user_nickname(const char* value) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.user_nickname)
}
inline void user_info_ans::set_user_nickname(const void* value, size_t size) {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  user_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.user_nickname)
}
inline ::std::string* user_info_ans::mutable_user_nickname() {
  set_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.user_nickname)
  return user_nickname_;
}
inline ::std::string* user_info_ans::release_user_nickname() {
  clear_has_user_nickname();
  if (user_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nickname_;
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_user_nickname(::std::string* user_nickname) {
  if (user_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nickname_;
  }
  if (user_nickname) {
    set_has_user_nickname();
    user_nickname_ = user_nickname;
  } else {
    clear_has_user_nickname();
    user_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.user_nickname)
}

// optional bytes college_name = 6;
inline bool user_info_ans::has_college_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_info_ans::set_has_college_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_info_ans::clear_has_college_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_info_ans::clear_college_name() {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_->clear();
  }
  clear_has_college_name();
}
inline const ::std::string& user_info_ans::college_name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.college_name)
  return *college_name_;
}
inline void user_info_ans::set_college_name(const ::std::string& value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.college_name)
}
inline void user_info_ans::set_college_name(const char* value) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_info_ans.college_name)
}
inline void user_info_ans::set_college_name(const void* value, size_t size) {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  college_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_info_ans.college_name)
}
inline ::std::string* user_info_ans::mutable_college_name() {
  set_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    college_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.college_name)
  return college_name_;
}
inline ::std::string* user_info_ans::release_college_name() {
  clear_has_college_name();
  if (college_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = college_name_;
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_info_ans::set_allocated_college_name(::std::string* college_name) {
  if (college_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete college_name_;
  }
  if (college_name) {
    set_has_college_name();
    college_name_ = college_name;
  } else {
    clear_has_college_name();
    college_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.college_name)
}

// optional .common.degree eduction_degree = 7;
inline bool user_info_ans::has_eduction_degree() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_info_ans::set_has_eduction_degree() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_info_ans::clear_has_eduction_degree() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_info_ans::clear_eduction_degree() {
  eduction_degree_ = 1;
  clear_has_eduction_degree();
}
inline ::common::degree user_info_ans::eduction_degree() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.eduction_degree)
  return static_cast< ::common::degree >(eduction_degree_);
}
inline void user_info_ans::set_eduction_degree(::common::degree value) {
  assert(::common::degree_IsValid(value));
  set_has_eduction_degree();
  eduction_degree_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.eduction_degree)
}

// optional bool is_prove = 8;
inline bool user_info_ans::has_is_prove() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_info_ans::set_has_is_prove() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_info_ans::clear_has_is_prove() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_info_ans::clear_is_prove() {
  is_prove_ = false;
  clear_has_is_prove();
}
inline bool user_info_ans::is_prove() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.is_prove)
  return is_prove_;
}
inline void user_info_ans::set_is_prove(bool value) {
  set_has_is_prove();
  is_prove_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_info_ans.is_prove)
}

// repeated .UBAS_niiwoo.friend_data friend_data_list = 9;
inline int user_info_ans::friend_data_list_size() const {
  return friend_data_list_.size();
}
inline void user_info_ans::clear_friend_data_list() {
  friend_data_list_.Clear();
}
inline const ::UBAS_niiwoo::friend_data& user_info_ans::friend_data_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.friend_data_list)
  return friend_data_list_.Get(index);
}
inline ::UBAS_niiwoo::friend_data* user_info_ans::mutable_friend_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.friend_data_list)
  return friend_data_list_.Mutable(index);
}
inline ::UBAS_niiwoo::friend_data* user_info_ans::add_friend_data_list() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.user_info_ans.friend_data_list)
  return friend_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::friend_data >&
user_info_ans::friend_data_list() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.user_info_ans.friend_data_list)
  return friend_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::friend_data >*
user_info_ans::mutable_friend_data_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.user_info_ans.friend_data_list)
  return &friend_data_list_;
}

// optional .common.errorinfo error = 10;
inline bool user_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_info_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_info_ans.error)
  return error_;
}
inline ::common::errorinfo* user_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_info_ans.error)
}

// -------------------------------------------------------------------

// address_information

// optional bytes name = 1;
inline bool address_information::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void address_information::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void address_information::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void address_information::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& address_information::name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.address_information.name)
  return *name_;
}
inline void address_information::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.address_information.name)
}
inline void address_information::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.address_information.name)
}
inline void address_information::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.address_information.name)
}
inline ::std::string* address_information::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.address_information.name)
  return name_;
}
inline ::std::string* address_information::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void address_information::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.address_information.name)
}

// optional bytes mobile = 2;
inline bool address_information::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void address_information::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void address_information::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void address_information::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& address_information::mobile() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.address_information.mobile)
  return *mobile_;
}
inline void address_information::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.address_information.mobile)
}
inline void address_information::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.address_information.mobile)
}
inline void address_information::set_mobile(const void* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.address_information.mobile)
}
inline ::std::string* address_information::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.address_information.mobile)
  return mobile_;
}
inline ::std::string* address_information::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void address_information::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.address_information.mobile)
}

// -------------------------------------------------------------------

// user_address_phone_list_ans

// repeated .UBAS_niiwoo.address_information address_list = 1;
inline int user_address_phone_list_ans::address_list_size() const {
  return address_list_.size();
}
inline void user_address_phone_list_ans::clear_address_list() {
  address_list_.Clear();
}
inline const ::UBAS_niiwoo::address_information& user_address_phone_list_ans::address_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_address_phone_list_ans.address_list)
  return address_list_.Get(index);
}
inline ::UBAS_niiwoo::address_information* user_address_phone_list_ans::mutable_address_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_address_phone_list_ans.address_list)
  return address_list_.Mutable(index);
}
inline ::UBAS_niiwoo::address_information* user_address_phone_list_ans::add_address_list() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.user_address_phone_list_ans.address_list)
  return address_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::address_information >&
user_address_phone_list_ans::address_list() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.user_address_phone_list_ans.address_list)
  return address_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::address_information >*
user_address_phone_list_ans::mutable_address_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.user_address_phone_list_ans.address_list)
  return &address_list_;
}

// optional .common.errorinfo error = 2;
inline bool user_address_phone_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_address_phone_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_address_phone_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_address_phone_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_address_phone_list_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_address_phone_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_address_phone_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_address_phone_list_ans.error)
  return error_;
}
inline ::common::errorinfo* user_address_phone_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_address_phone_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_address_phone_list_ans.error)
}

// -------------------------------------------------------------------

// user_overdue_status_ans

// optional bool is_loan_overdue = 1;
inline bool user_overdue_status_ans::has_is_loan_overdue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_overdue_status_ans::set_has_is_loan_overdue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_overdue_status_ans::clear_has_is_loan_overdue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_overdue_status_ans::clear_is_loan_overdue() {
  is_loan_overdue_ = false;
  clear_has_is_loan_overdue();
}
inline bool user_overdue_status_ans::is_loan_overdue() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_overdue_status_ans.is_loan_overdue)
  return is_loan_overdue_;
}
inline void user_overdue_status_ans::set_is_loan_overdue(bool value) {
  set_has_is_loan_overdue();
  is_loan_overdue_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_overdue_status_ans.is_loan_overdue)
}

// optional bool is_assure_overdue = 2;
inline bool user_overdue_status_ans::has_is_assure_overdue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_overdue_status_ans::set_has_is_assure_overdue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_overdue_status_ans::clear_has_is_assure_overdue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_overdue_status_ans::clear_is_assure_overdue() {
  is_assure_overdue_ = false;
  clear_has_is_assure_overdue();
}
inline bool user_overdue_status_ans::is_assure_overdue() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_overdue_status_ans.is_assure_overdue)
  return is_assure_overdue_;
}
inline void user_overdue_status_ans::set_is_assure_overdue(bool value) {
  set_has_is_assure_overdue();
  is_assure_overdue_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_overdue_status_ans.is_assure_overdue)
}

// optional int32 income = 3;
inline bool user_overdue_status_ans::has_income() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_overdue_status_ans::set_has_income() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_overdue_status_ans::clear_has_income() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_overdue_status_ans::clear_income() {
  income_ = 0;
  clear_has_income();
}
inline ::google::protobuf::int32 user_overdue_status_ans::income() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_overdue_status_ans.income)
  return income_;
}
inline void user_overdue_status_ans::set_income(::google::protobuf::int32 value) {
  set_has_income();
  income_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_overdue_status_ans.income)
}

// optional .common.errorinfo error = 4;
inline bool user_overdue_status_ans::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_overdue_status_ans::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_overdue_status_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_overdue_status_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& user_overdue_status_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_overdue_status_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* user_overdue_status_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_overdue_status_ans.error)
  return error_;
}
inline ::common::errorinfo* user_overdue_status_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void user_overdue_status_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_overdue_status_ans.error)
}

// -------------------------------------------------------------------

// loan_or_assure_info

// optional bytes id = 1;
inline bool loan_or_assure_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loan_or_assure_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loan_or_assure_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loan_or_assure_info::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& loan_or_assure_info::id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_or_assure_info.id)
  return *id_;
}
inline void loan_or_assure_info::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.loan_or_assure_info.id)
}
inline void loan_or_assure_info::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.loan_or_assure_info.id)
}
inline void loan_or_assure_info::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.loan_or_assure_info.id)
}
inline ::std::string* loan_or_assure_info::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.loan_or_assure_info.id)
  return id_;
}
inline ::std::string* loan_or_assure_info::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void loan_or_assure_info::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.loan_or_assure_info.id)
}

// optional int32 overdue_day = 2;
inline bool loan_or_assure_info::has_overdue_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void loan_or_assure_info::set_has_overdue_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void loan_or_assure_info::clear_has_overdue_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void loan_or_assure_info::clear_overdue_day() {
  overdue_day_ = 0;
  clear_has_overdue_day();
}
inline ::google::protobuf::int32 loan_or_assure_info::overdue_day() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_or_assure_info.overdue_day)
  return overdue_day_;
}
inline void loan_or_assure_info::set_overdue_day(::google::protobuf::int32 value) {
  set_has_overdue_day();
  overdue_day_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.loan_or_assure_info.overdue_day)
}

// -------------------------------------------------------------------

// borrow_info

// optional bytes bid_id = 1;
inline bool borrow_info::has_bid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void borrow_info::set_has_bid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void borrow_info::clear_has_bid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void borrow_info::clear_bid_id() {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_->clear();
  }
  clear_has_bid_id();
}
inline const ::std::string& borrow_info::bid_id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.borrow_info.bid_id)
  return *bid_id_;
}
inline void borrow_info::set_bid_id(const ::std::string& value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.borrow_info.bid_id)
}
inline void borrow_info::set_bid_id(const char* value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.borrow_info.bid_id)
}
inline void borrow_info::set_bid_id(const void* value, size_t size) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.borrow_info.bid_id)
}
inline ::std::string* borrow_info::mutable_bid_id() {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.borrow_info.bid_id)
  return bid_id_;
}
inline ::std::string* borrow_info::release_bid_id() {
  clear_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_id_;
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void borrow_info::set_allocated_bid_id(::std::string* bid_id) {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (bid_id) {
    set_has_bid_id();
    bid_id_ = bid_id;
  } else {
    clear_has_bid_id();
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.borrow_info.bid_id)
}

// optional int32 overdue_times = 2;
inline bool borrow_info::has_overdue_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void borrow_info::set_has_overdue_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void borrow_info::clear_has_overdue_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void borrow_info::clear_overdue_times() {
  overdue_times_ = 0;
  clear_has_overdue_times();
}
inline ::google::protobuf::int32 borrow_info::overdue_times() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.borrow_info.overdue_times)
  return overdue_times_;
}
inline void borrow_info::set_overdue_times(::google::protobuf::int32 value) {
  set_has_overdue_times();
  overdue_times_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.borrow_info.overdue_times)
}

// optional int32 should_repay_periods = 3;
inline bool borrow_info::has_should_repay_periods() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void borrow_info::set_has_should_repay_periods() {
  _has_bits_[0] |= 0x00000004u;
}
inline void borrow_info::clear_has_should_repay_periods() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void borrow_info::clear_should_repay_periods() {
  should_repay_periods_ = 0;
  clear_has_should_repay_periods();
}
inline ::google::protobuf::int32 borrow_info::should_repay_periods() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.borrow_info.should_repay_periods)
  return should_repay_periods_;
}
inline void borrow_info::set_should_repay_periods(::google::protobuf::int32 value) {
  set_has_should_repay_periods();
  should_repay_periods_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.borrow_info.should_repay_periods)
}

// -------------------------------------------------------------------

// loan_assure_info_list_ans

// optional int32 Loan_history_bad_debt_count = 1;
inline bool loan_assure_info_list_ans::has_loan_history_bad_debt_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void loan_assure_info_list_ans::set_has_loan_history_bad_debt_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void loan_assure_info_list_ans::clear_has_loan_history_bad_debt_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void loan_assure_info_list_ans::clear_loan_history_bad_debt_count() {
  loan_history_bad_debt_count_ = 0;
  clear_has_loan_history_bad_debt_count();
}
inline ::google::protobuf::int32 loan_assure_info_list_ans::loan_history_bad_debt_count() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_assure_info_list_ans.Loan_history_bad_debt_count)
  return loan_history_bad_debt_count_;
}
inline void loan_assure_info_list_ans::set_loan_history_bad_debt_count(::google::protobuf::int32 value) {
  set_has_loan_history_bad_debt_count();
  loan_history_bad_debt_count_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.loan_assure_info_list_ans.Loan_history_bad_debt_count)
}

// repeated .UBAS_niiwoo.loan_or_assure_info loan_list = 2;
inline int loan_assure_info_list_ans::loan_list_size() const {
  return loan_list_.size();
}
inline void loan_assure_info_list_ans::clear_loan_list() {
  loan_list_.Clear();
}
inline const ::UBAS_niiwoo::loan_or_assure_info& loan_assure_info_list_ans::loan_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_assure_info_list_ans.loan_list)
  return loan_list_.Get(index);
}
inline ::UBAS_niiwoo::loan_or_assure_info* loan_assure_info_list_ans::mutable_loan_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.loan_assure_info_list_ans.loan_list)
  return loan_list_.Mutable(index);
}
inline ::UBAS_niiwoo::loan_or_assure_info* loan_assure_info_list_ans::add_loan_list() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.loan_assure_info_list_ans.loan_list)
  return loan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >&
loan_assure_info_list_ans::loan_list() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.loan_assure_info_list_ans.loan_list)
  return loan_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >*
loan_assure_info_list_ans::mutable_loan_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.loan_assure_info_list_ans.loan_list)
  return &loan_list_;
}

// repeated .UBAS_niiwoo.loan_or_assure_info assure_list = 3;
inline int loan_assure_info_list_ans::assure_list_size() const {
  return assure_list_.size();
}
inline void loan_assure_info_list_ans::clear_assure_list() {
  assure_list_.Clear();
}
inline const ::UBAS_niiwoo::loan_or_assure_info& loan_assure_info_list_ans::assure_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_assure_info_list_ans.assure_list)
  return assure_list_.Get(index);
}
inline ::UBAS_niiwoo::loan_or_assure_info* loan_assure_info_list_ans::mutable_assure_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.loan_assure_info_list_ans.assure_list)
  return assure_list_.Mutable(index);
}
inline ::UBAS_niiwoo::loan_or_assure_info* loan_assure_info_list_ans::add_assure_list() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.loan_assure_info_list_ans.assure_list)
  return assure_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >&
loan_assure_info_list_ans::assure_list() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.loan_assure_info_list_ans.assure_list)
  return assure_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::loan_or_assure_info >*
loan_assure_info_list_ans::mutable_assure_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.loan_assure_info_list_ans.assure_list)
  return &assure_list_;
}

// repeated .UBAS_niiwoo.borrow_info borrower_info_list = 4;
inline int loan_assure_info_list_ans::borrower_info_list_size() const {
  return borrower_info_list_.size();
}
inline void loan_assure_info_list_ans::clear_borrower_info_list() {
  borrower_info_list_.Clear();
}
inline const ::UBAS_niiwoo::borrow_info& loan_assure_info_list_ans::borrower_info_list(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_assure_info_list_ans.borrower_info_list)
  return borrower_info_list_.Get(index);
}
inline ::UBAS_niiwoo::borrow_info* loan_assure_info_list_ans::mutable_borrower_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.loan_assure_info_list_ans.borrower_info_list)
  return borrower_info_list_.Mutable(index);
}
inline ::UBAS_niiwoo::borrow_info* loan_assure_info_list_ans::add_borrower_info_list() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.loan_assure_info_list_ans.borrower_info_list)
  return borrower_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::borrow_info >&
loan_assure_info_list_ans::borrower_info_list() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.loan_assure_info_list_ans.borrower_info_list)
  return borrower_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::borrow_info >*
loan_assure_info_list_ans::mutable_borrower_info_list() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.loan_assure_info_list_ans.borrower_info_list)
  return &borrower_info_list_;
}

// optional .common.errorinfo error = 5;
inline bool loan_assure_info_list_ans::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void loan_assure_info_list_ans::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void loan_assure_info_list_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void loan_assure_info_list_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& loan_assure_info_list_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.loan_assure_info_list_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* loan_assure_info_list_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.loan_assure_info_list_ans.error)
  return error_;
}
inline ::common::errorinfo* loan_assure_info_list_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void loan_assure_info_list_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.loan_assure_info_list_ans.error)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_borrow_info_item

// optional bytes identity_card = 1;
inline bool niiwoo_UBAS_borrow_info_item::has_identity_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_borrow_info_item::set_has_identity_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& niiwoo_UBAS_borrow_info_item::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
  return *identity_card_;
}
inline void niiwoo_UBAS_borrow_info_item::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
}
inline void niiwoo_UBAS_borrow_info_item::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
}
inline void niiwoo_UBAS_borrow_info_item::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
}
inline ::std::string* niiwoo_UBAS_borrow_info_item::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
  return identity_card_;
}
inline ::std::string* niiwoo_UBAS_borrow_info_item::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_borrow_info_item::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.identity_card)
}

// optional bytes bid_id = 2;
inline bool niiwoo_UBAS_borrow_info_item::has_bid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_borrow_info_item::set_has_bid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_has_bid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_bid_id() {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_->clear();
  }
  clear_has_bid_id();
}
inline const ::std::string& niiwoo_UBAS_borrow_info_item::bid_id() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
  return *bid_id_;
}
inline void niiwoo_UBAS_borrow_info_item::set_bid_id(const ::std::string& value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
}
inline void niiwoo_UBAS_borrow_info_item::set_bid_id(const char* value) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
}
inline void niiwoo_UBAS_borrow_info_item::set_bid_id(const void* value, size_t size) {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  bid_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
}
inline ::std::string* niiwoo_UBAS_borrow_info_item::mutable_bid_id() {
  set_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bid_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
  return bid_id_;
}
inline ::std::string* niiwoo_UBAS_borrow_info_item::release_bid_id() {
  clear_has_bid_id();
  if (bid_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bid_id_;
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_borrow_info_item::set_allocated_bid_id(::std::string* bid_id) {
  if (bid_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bid_id_;
  }
  if (bid_id) {
    set_has_bid_id();
    bid_id_ = bid_id;
  } else {
    clear_has_bid_id();
    bid_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.bid_id)
}

// optional .UBAS_niiwoo.en_apply_status apply_status = 3;
inline bool niiwoo_UBAS_borrow_info_item::has_apply_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niiwoo_UBAS_borrow_info_item::set_has_apply_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_has_apply_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_apply_status() {
  apply_status_ = 0;
  clear_has_apply_status();
}
inline ::UBAS_niiwoo::en_apply_status niiwoo_UBAS_borrow_info_item::apply_status() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.apply_status)
  return static_cast< ::UBAS_niiwoo::en_apply_status >(apply_status_);
}
inline void niiwoo_UBAS_borrow_info_item::set_apply_status(::UBAS_niiwoo::en_apply_status value) {
  assert(::UBAS_niiwoo::en_apply_status_IsValid(value));
  set_has_apply_status();
  apply_status_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.apply_status)
}

// optional int32 overdue_days = 4;
inline bool niiwoo_UBAS_borrow_info_item::has_overdue_days() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niiwoo_UBAS_borrow_info_item::set_has_overdue_days() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_has_overdue_days() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niiwoo_UBAS_borrow_info_item::clear_overdue_days() {
  overdue_days_ = 0;
  clear_has_overdue_days();
}
inline ::google::protobuf::int32 niiwoo_UBAS_borrow_info_item::overdue_days() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.overdue_days)
  return overdue_days_;
}
inline void niiwoo_UBAS_borrow_info_item::set_overdue_days(::google::protobuf::int32 value) {
  set_has_overdue_days();
  overdue_days_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_info_item.overdue_days)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_borrow_detail_ask

// optional .common.common_ask_header ask_header = 1;
inline bool niiwoo_UBAS_borrow_detail_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_borrow_detail_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_borrow_detail_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_borrow_detail_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& niiwoo_UBAS_borrow_detail_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_borrow_detail_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_borrow_detail_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_borrow_detail_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.ask_header)
}

// optional bytes identity_card = 2;
inline bool niiwoo_UBAS_borrow_detail_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_borrow_detail_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_borrow_detail_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_borrow_detail_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& niiwoo_UBAS_borrow_detail_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
  return *identity_card_;
}
inline void niiwoo_UBAS_borrow_detail_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
}
inline void niiwoo_UBAS_borrow_detail_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
}
inline void niiwoo_UBAS_borrow_detail_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
}
inline ::std::string* niiwoo_UBAS_borrow_detail_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
  return identity_card_;
}
inline ::std::string* niiwoo_UBAS_borrow_detail_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_borrow_detail_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ask.identity_card)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_borrow_detail_ans

// repeated .UBAS_niiwoo.niiwoo_UBAS_borrow_info_item borror_info = 1;
inline int niiwoo_UBAS_borrow_detail_ans::borror_info_size() const {
  return borror_info_.size();
}
inline void niiwoo_UBAS_borrow_detail_ans::clear_borror_info() {
  borror_info_.Clear();
}
inline const ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item& niiwoo_UBAS_borrow_detail_ans::borror_info(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.borror_info)
  return borror_info_.Get(index);
}
inline ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item* niiwoo_UBAS_borrow_detail_ans::mutable_borror_info(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.borror_info)
  return borror_info_.Mutable(index);
}
inline ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item* niiwoo_UBAS_borrow_detail_ans::add_borror_info() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.borror_info)
  return borror_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item >&
niiwoo_UBAS_borrow_detail_ans::borror_info() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.borror_info)
  return borror_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::niiwoo_UBAS_borrow_info_item >*
niiwoo_UBAS_borrow_detail_ans::mutable_borror_info() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.borror_info)
  return &borror_info_;
}

// optional .common.errorinfo error = 2;
inline bool niiwoo_UBAS_borrow_detail_ans::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_borrow_detail_ans::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_borrow_detail_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_borrow_detail_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& niiwoo_UBAS_borrow_detail_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* niiwoo_UBAS_borrow_detail_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.error)
  return error_;
}
inline ::common::errorinfo* niiwoo_UBAS_borrow_detail_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_borrow_detail_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.error)
}

// optional int32 max_overduemoney = 3;
inline bool niiwoo_UBAS_borrow_detail_ans::has_max_overduemoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niiwoo_UBAS_borrow_detail_ans::set_has_max_overduemoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niiwoo_UBAS_borrow_detail_ans::clear_has_max_overduemoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niiwoo_UBAS_borrow_detail_ans::clear_max_overduemoney() {
  max_overduemoney_ = 0;
  clear_has_max_overduemoney();
}
inline ::google::protobuf::int32 niiwoo_UBAS_borrow_detail_ans::max_overduemoney() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.max_overduemoney)
  return max_overduemoney_;
}
inline void niiwoo_UBAS_borrow_detail_ans::set_max_overduemoney(::google::protobuf::int32 value) {
  set_has_max_overduemoney();
  max_overduemoney_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_borrow_detail_ans.max_overduemoney)
}

// -------------------------------------------------------------------

// user_address_t

// optional .UBAS_niiwoo.en_address_type address_type = 1;
inline bool user_address_t::has_address_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_address_t::set_has_address_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_address_t::clear_has_address_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_address_t::clear_address_type() {
  address_type_ = 1;
  clear_has_address_type();
}
inline ::UBAS_niiwoo::en_address_type user_address_t::address_type() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_address_t.address_type)
  return static_cast< ::UBAS_niiwoo::en_address_type >(address_type_);
}
inline void user_address_t::set_address_type(::UBAS_niiwoo::en_address_type value) {
  assert(::UBAS_niiwoo::en_address_type_IsValid(value));
  set_has_address_type();
  address_type_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_address_t.address_type)
}

// optional bytes address = 2;
inline bool user_address_t::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_address_t::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_address_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_address_t::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& user_address_t::address() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_address_t.address)
  return *address_;
}
inline void user_address_t::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_address_t.address)
}
inline void user_address_t::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_address_t.address)
}
inline void user_address_t::set_address(const void* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_address_t.address)
}
inline ::std::string* user_address_t::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_address_t.address)
  return address_;
}
inline ::std::string* user_address_t::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_address_t::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_address_t.address)
}

// -------------------------------------------------------------------

// user_contact_t

// optional bytes name = 1;
inline bool user_contact_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_contact_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_contact_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_contact_t::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& user_contact_t::name() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_contact_t.name)
  return *name_;
}
inline void user_contact_t::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_contact_t.name)
}
inline void user_contact_t::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_contact_t.name)
}
inline void user_contact_t::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_contact_t.name)
}
inline ::std::string* user_contact_t::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_contact_t.name)
  return name_;
}
inline ::std::string* user_contact_t::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_contact_t::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_contact_t.name)
}

// optional bytes phone = 2;
inline bool user_contact_t::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_contact_t::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_contact_t::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_contact_t::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& user_contact_t::phone() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_contact_t.phone)
  return *phone_;
}
inline void user_contact_t::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_contact_t.phone)
}
inline void user_contact_t::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_contact_t.phone)
}
inline void user_contact_t::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_contact_t.phone)
}
inline ::std::string* user_contact_t::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_contact_t.phone)
  return phone_;
}
inline ::std::string* user_contact_t::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_contact_t::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_contact_t.phone)
}

// optional int32 is_delete = 3;
inline bool user_contact_t::has_is_delete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_contact_t::set_has_is_delete() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_contact_t::clear_has_is_delete() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_contact_t::clear_is_delete() {
  is_delete_ = 0;
  clear_has_is_delete();
}
inline ::google::protobuf::int32 user_contact_t::is_delete() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_contact_t.is_delete)
  return is_delete_;
}
inline void user_contact_t::set_is_delete(::google::protobuf::int32 value) {
  set_has_is_delete();
  is_delete_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_contact_t.is_delete)
}

// optional bytes delete_time = 4;
inline bool user_contact_t::has_delete_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_contact_t::set_has_delete_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_contact_t::clear_has_delete_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_contact_t::clear_delete_time() {
  if (delete_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete_time_->clear();
  }
  clear_has_delete_time();
}
inline const ::std::string& user_contact_t::delete_time() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.user_contact_t.delete_time)
  return *delete_time_;
}
inline void user_contact_t::set_delete_time(const ::std::string& value) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.user_contact_t.delete_time)
}
inline void user_contact_t::set_delete_time(const char* value) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.user_contact_t.delete_time)
}
inline void user_contact_t::set_delete_time(const void* value, size_t size) {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete_time_ = new ::std::string;
  }
  delete_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.user_contact_t.delete_time)
}
inline ::std::string* user_contact_t::mutable_delete_time() {
  set_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.user_contact_t.delete_time)
  return delete_time_;
}
inline ::std::string* user_contact_t::release_delete_time() {
  clear_has_delete_time();
  if (delete_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = delete_time_;
    delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void user_contact_t::set_allocated_delete_time(::std::string* delete_time) {
  if (delete_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete delete_time_;
  }
  if (delete_time) {
    set_has_delete_time();
    delete_time_ = delete_time;
  } else {
    clear_has_delete_time();
    delete_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.user_contact_t.delete_time)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_info_ask

// optional .common.common_ask_header ask_header = 1;
inline bool niiwoo_UBAS_info_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_info_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_info_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_info_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& niiwoo_UBAS_info_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_info_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_info_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_info_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_info_ask.ask_header)
}

// optional bytes identity_card = 2;
inline bool niiwoo_UBAS_info_ask::has_identity_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_info_ask::set_has_identity_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_info_ask::clear_has_identity_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_info_ask::clear_identity_card() {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_->clear();
  }
  clear_has_identity_card();
}
inline const ::std::string& niiwoo_UBAS_info_ask::identity_card() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
  return *identity_card_;
}
inline void niiwoo_UBAS_info_ask::set_identity_card(const ::std::string& value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
}
inline void niiwoo_UBAS_info_ask::set_identity_card(const char* value) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(value);
  // @@protoc_insertion_point(field_set_char:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
}
inline void niiwoo_UBAS_info_ask::set_identity_card(const void* value, size_t size) {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  identity_card_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
}
inline ::std::string* niiwoo_UBAS_info_ask::mutable_identity_card() {
  set_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    identity_card_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
  return identity_card_;
}
inline ::std::string* niiwoo_UBAS_info_ask::release_identity_card() {
  clear_has_identity_card();
  if (identity_card_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = identity_card_;
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void niiwoo_UBAS_info_ask::set_allocated_identity_card(::std::string* identity_card) {
  if (identity_card_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete identity_card_;
  }
  if (identity_card) {
    set_has_identity_card();
    identity_card_ = identity_card;
  } else {
    clear_has_identity_card();
    identity_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_info_ask.identity_card)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_info_ans

// repeated .UBAS_niiwoo.user_address_t addres = 1;
inline int niiwoo_UBAS_info_ans::addres_size() const {
  return addres_.size();
}
inline void niiwoo_UBAS_info_ans::clear_addres() {
  addres_.Clear();
}
inline const ::UBAS_niiwoo::user_address_t& niiwoo_UBAS_info_ans::addres(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ans.addres)
  return addres_.Get(index);
}
inline ::UBAS_niiwoo::user_address_t* niiwoo_UBAS_info_ans::mutable_addres(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ans.addres)
  return addres_.Mutable(index);
}
inline ::UBAS_niiwoo::user_address_t* niiwoo_UBAS_info_ans::add_addres() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.niiwoo_UBAS_info_ans.addres)
  return addres_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_address_t >&
niiwoo_UBAS_info_ans::addres() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.addres)
  return addres_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_address_t >*
niiwoo_UBAS_info_ans::mutable_addres() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.addres)
  return &addres_;
}

// repeated .UBAS_niiwoo.user_contact_t relations = 2;
inline int niiwoo_UBAS_info_ans::relations_size() const {
  return relations_.size();
}
inline void niiwoo_UBAS_info_ans::clear_relations() {
  relations_.Clear();
}
inline const ::UBAS_niiwoo::user_contact_t& niiwoo_UBAS_info_ans::relations(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ans.relations)
  return relations_.Get(index);
}
inline ::UBAS_niiwoo::user_contact_t* niiwoo_UBAS_info_ans::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ans.relations)
  return relations_.Mutable(index);
}
inline ::UBAS_niiwoo::user_contact_t* niiwoo_UBAS_info_ans::add_relations() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.niiwoo_UBAS_info_ans.relations)
  return relations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
niiwoo_UBAS_info_ans::relations() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.relations)
  return relations_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
niiwoo_UBAS_info_ans::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.relations)
  return &relations_;
}

// repeated .UBAS_niiwoo.user_contact_t constacts = 3;
inline int niiwoo_UBAS_info_ans::constacts_size() const {
  return constacts_.size();
}
inline void niiwoo_UBAS_info_ans::clear_constacts() {
  constacts_.Clear();
}
inline const ::UBAS_niiwoo::user_contact_t& niiwoo_UBAS_info_ans::constacts(int index) const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ans.constacts)
  return constacts_.Get(index);
}
inline ::UBAS_niiwoo::user_contact_t* niiwoo_UBAS_info_ans::mutable_constacts(int index) {
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ans.constacts)
  return constacts_.Mutable(index);
}
inline ::UBAS_niiwoo::user_contact_t* niiwoo_UBAS_info_ans::add_constacts() {
  // @@protoc_insertion_point(field_add:UBAS_niiwoo.niiwoo_UBAS_info_ans.constacts)
  return constacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >&
niiwoo_UBAS_info_ans::constacts() const {
  // @@protoc_insertion_point(field_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.constacts)
  return constacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::UBAS_niiwoo::user_contact_t >*
niiwoo_UBAS_info_ans::mutable_constacts() {
  // @@protoc_insertion_point(field_mutable_list:UBAS_niiwoo.niiwoo_UBAS_info_ans.constacts)
  return &constacts_;
}

// optional .common.errorinfo error = 4;
inline bool niiwoo_UBAS_info_ans::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niiwoo_UBAS_info_ans::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niiwoo_UBAS_info_ans::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niiwoo_UBAS_info_ans::clear_error() {
  if (error_ != NULL) error_->::common::errorinfo::Clear();
  clear_has_error();
}
inline const ::common::errorinfo& niiwoo_UBAS_info_ans::error() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_info_ans.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::common::errorinfo* niiwoo_UBAS_info_ans::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::common::errorinfo;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_info_ans.error)
  return error_;
}
inline ::common::errorinfo* niiwoo_UBAS_info_ans::release_error() {
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_info_ans::set_allocated_error(::common::errorinfo* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_info_ans.error)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_coincide_ask

// optional .common.common_ask_header ask_header = 1;
inline bool niiwoo_UBAS_coincide_ask::has_ask_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_coincide_ask::set_has_ask_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_coincide_ask::clear_has_ask_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_coincide_ask::clear_ask_header() {
  if (ask_header_ != NULL) ask_header_->::common::common_ask_header::Clear();
  clear_has_ask_header();
}
inline const ::common::common_ask_header& niiwoo_UBAS_coincide_ask::ask_header() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.ask_header)
  return ask_header_ != NULL ? *ask_header_ : *default_instance_->ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_coincide_ask::mutable_ask_header() {
  set_has_ask_header();
  if (ask_header_ == NULL) ask_header_ = new ::common::common_ask_header;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.ask_header)
  return ask_header_;
}
inline ::common::common_ask_header* niiwoo_UBAS_coincide_ask::release_ask_header() {
  clear_has_ask_header();
  ::common::common_ask_header* temp = ask_header_;
  ask_header_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_coincide_ask::set_allocated_ask_header(::common::common_ask_header* ask_header) {
  delete ask_header_;
  ask_header_ = ask_header;
  if (ask_header) {
    set_has_ask_header();
  } else {
    clear_has_ask_header();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.ask_header)
}

// optional int32 ask_funcode = 2;
inline bool niiwoo_UBAS_coincide_ask::has_ask_funcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_coincide_ask::set_has_ask_funcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_coincide_ask::clear_has_ask_funcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_coincide_ask::clear_ask_funcode() {
  ask_funcode_ = 0;
  clear_has_ask_funcode();
}
inline ::google::protobuf::int32 niiwoo_UBAS_coincide_ask::ask_funcode() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.ask_funcode)
  return ask_funcode_;
}
inline void niiwoo_UBAS_coincide_ask::set_ask_funcode(::google::protobuf::int32 value) {
  set_has_ask_funcode();
  ask_funcode_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.ask_funcode)
}

// optional .common.user_basic_identification user_1 = 3;
inline bool niiwoo_UBAS_coincide_ask::has_user_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niiwoo_UBAS_coincide_ask::set_has_user_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niiwoo_UBAS_coincide_ask::clear_has_user_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niiwoo_UBAS_coincide_ask::clear_user_1() {
  if (user_1_ != NULL) user_1_->::common::user_basic_identification::Clear();
  clear_has_user_1();
}
inline const ::common::user_basic_identification& niiwoo_UBAS_coincide_ask::user_1() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_1)
  return user_1_ != NULL ? *user_1_ : *default_instance_->user_1_;
}
inline ::common::user_basic_identification* niiwoo_UBAS_coincide_ask::mutable_user_1() {
  set_has_user_1();
  if (user_1_ == NULL) user_1_ = new ::common::user_basic_identification;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_1)
  return user_1_;
}
inline ::common::user_basic_identification* niiwoo_UBAS_coincide_ask::release_user_1() {
  clear_has_user_1();
  ::common::user_basic_identification* temp = user_1_;
  user_1_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_coincide_ask::set_allocated_user_1(::common::user_basic_identification* user_1) {
  delete user_1_;
  user_1_ = user_1;
  if (user_1) {
    set_has_user_1();
  } else {
    clear_has_user_1();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_1)
}

// optional .common.user_basic_identification user_2 = 4;
inline bool niiwoo_UBAS_coincide_ask::has_user_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niiwoo_UBAS_coincide_ask::set_has_user_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niiwoo_UBAS_coincide_ask::clear_has_user_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niiwoo_UBAS_coincide_ask::clear_user_2() {
  if (user_2_ != NULL) user_2_->::common::user_basic_identification::Clear();
  clear_has_user_2();
}
inline const ::common::user_basic_identification& niiwoo_UBAS_coincide_ask::user_2() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_2)
  return user_2_ != NULL ? *user_2_ : *default_instance_->user_2_;
}
inline ::common::user_basic_identification* niiwoo_UBAS_coincide_ask::mutable_user_2() {
  set_has_user_2();
  if (user_2_ == NULL) user_2_ = new ::common::user_basic_identification;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_2)
  return user_2_;
}
inline ::common::user_basic_identification* niiwoo_UBAS_coincide_ask::release_user_2() {
  clear_has_user_2();
  ::common::user_basic_identification* temp = user_2_;
  user_2_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_coincide_ask::set_allocated_user_2(::common::user_basic_identification* user_2) {
  delete user_2_;
  user_2_ = user_2;
  if (user_2) {
    set_has_user_2();
  } else {
    clear_has_user_2();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_coincide_ask.user_2)
}

// -------------------------------------------------------------------

// niiwoo_UBAS_coincide_ans

// optional float coincide = 1;
inline bool niiwoo_UBAS_coincide_ans::has_coincide() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niiwoo_UBAS_coincide_ans::set_has_coincide() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niiwoo_UBAS_coincide_ans::clear_has_coincide() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niiwoo_UBAS_coincide_ans::clear_coincide() {
  coincide_ = 0;
  clear_has_coincide();
}
inline float niiwoo_UBAS_coincide_ans::coincide() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ans.coincide)
  return coincide_;
}
inline void niiwoo_UBAS_coincide_ans::set_coincide(float value) {
  set_has_coincide();
  coincide_ = value;
  // @@protoc_insertion_point(field_set:UBAS_niiwoo.niiwoo_UBAS_coincide_ans.coincide)
}

// optional .common.result_info result = 2;
inline bool niiwoo_UBAS_coincide_ans::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niiwoo_UBAS_coincide_ans::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niiwoo_UBAS_coincide_ans::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niiwoo_UBAS_coincide_ans::clear_result() {
  if (result_ != NULL) result_->::common::result_info::Clear();
  clear_has_result();
}
inline const ::common::result_info& niiwoo_UBAS_coincide_ans::result() const {
  // @@protoc_insertion_point(field_get:UBAS_niiwoo.niiwoo_UBAS_coincide_ans.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::common::result_info* niiwoo_UBAS_coincide_ans::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::common::result_info;
  // @@protoc_insertion_point(field_mutable:UBAS_niiwoo.niiwoo_UBAS_coincide_ans.result)
  return result_;
}
inline ::common::result_info* niiwoo_UBAS_coincide_ans::release_result() {
  clear_has_result();
  ::common::result_info* temp = result_;
  result_ = NULL;
  return temp;
}
inline void niiwoo_UBAS_coincide_ans::set_allocated_result(::common::result_info* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:UBAS_niiwoo.niiwoo_UBAS_coincide_ans.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UBAS_niiwoo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::UBAS_niiwoo::en_sex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_sex>() {
  return ::UBAS_niiwoo::en_sex_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::en_marry> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_marry>() {
  return ::UBAS_niiwoo::en_marry_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::en_home> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_home>() {
  return ::UBAS_niiwoo::en_home_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::en_user> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_user>() {
  return ::UBAS_niiwoo::en_user_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::niiwoo_ask_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::niiwoo_ask_type>() {
  return ::UBAS_niiwoo::niiwoo_ask_type_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::en_apply_status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_apply_status>() {
  return ::UBAS_niiwoo::en_apply_status_descriptor();
}
template <> struct is_proto_enum< ::UBAS_niiwoo::en_address_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UBAS_niiwoo::en_address_type>() {
  return ::UBAS_niiwoo::en_address_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UBAS_5fniiwoo_2eproto__INCLUDED
